{
 "classes": {
  "AngleSelector": {
   "description": "@brief A wrapper around KisAngleSelector, a widget with several options to\nselect an angle. The widget itself is accessed with the widget() function.\n\nThis widget is a combination of a @ref KisAngleGauge and a spin box,\nalong with some flipping options\n",
   "extend": "QObject",
   "fileName": "AngleSelector.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief Get the internal KisAngleSelector as a QWidget, so it may be\nadded to a UI\n\n@return the internal KisAngleSelector as a QWidget\n",
     "hash": "25d38dfb37344fb924ddf5d69ee53cd5fb4645506c75f747ec8e79d3c3c81456",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "widget",
     "parameters": [],
     "returned": "QWidget",
     "sourceCodeLine": 38,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Sets the current angle\n@param newAngle the new angle\n@see angle() const\n",
     "hash": "27c67985fbc78756ae5058a047d9a9cc8e70ad59d66375b76757fd5779bb1b95",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setAngle",
     "parameters": [
      {
       "default": null,
       "name": "newAngle",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 45,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Sets the current angle to the reset angle\n@see resetAngle() const\n@see setResetAngle(qreal) const\n",
     "hash": "1ea1c83f31a7629b0899eb02c9efb59a45598e1e21d1d0e6174105dc4a21b7ba",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "reset",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 51,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Gets the current angle\n@return The current angle \n@see setAngle(qreal)\n",
     "hash": "977277354ffa05061583e5367a7c7fb53df935ee471b49a20c32a9e42f010fe0",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "angle",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 58,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Gets the angle to which multiples the selected angle will snap\n\nThe default snap angle is 15 degrees so the selected angle will snap\nto its multiples (0, 15, 30, 45, etc.)\n@return The angle to which multiples the selected angle will snap\n@see setSnapAngle(qreal)\n",
     "hash": "ae8ca5ee87614ed2d66fc5194a9d7306e1d05dcc9a808ff115476456c04c97a1",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "snapAngle",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 67,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Gets the angle that is used to reset the current angle\n\nThis angle is used when the user double clicks on the widget\n@return The angle that is used to reset the current angle\n@see setResetAngle(qreal)\n",
     "hash": "82e4bd674dd17bd3a45f30f383d5ef06e5a328e9c8382d7d2ceb88ef8affc368",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "resetAngle",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 75,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Gets the number of decimals (precision) used by the angle\n\nIf you want to simulate integer angles, set it to 0. The default is 2.\n@return The number of decimals being used\n@see setDecimals(int)\n",
     "hash": "7b1638a6afc64e347a05302c72f0b0aaf68d4be959653bf0ce39b389c00d157a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "decimals",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 83,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Gets the maximum value for the angle\n\nThe default is 360\n@return The maximum value for the angle\n@see setMaximum(qreal)\n@see setRange(qreal, qreal)\n",
     "hash": "b7f4b8b567763a6f0fcf97aefe1b340ddf82c6ca7f878eab8d312fe663cd6ac0",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "maximum",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 92,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Gets the minimum value for the angle\n\nThe default is 0\n@return The minimum value for the angle\n@see setMinimum(qreal)\n@see setRange(qreal, qreal)\n",
     "hash": "539e8f2dc98e7ff2f6a7bac3414cf5fcdd6fb9fcd0a07da6c0cf15d7b1276370",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "minimum",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 101,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Gets the prefix shown in the spin box\n@return The prefix shown in the spin box\n@see setPrefix(const QString&)\n",
     "hash": "e900adaf20b3c6c4209c7908f9da87af6d8844026eea083241fe04d43b9d4421",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "prefix",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 107,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Gets if the angle should wrap pass the minimum or maximum angles\n@return True if the angle should wrap pass the minimum or maximum angles,\nfalse otherwise\n@see setWrapping(bool)\n",
     "hash": "569d2e663394dda5ded552223ff838767d7d7ddc56d40977b958bdb69f148c45",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "wrapping",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 114,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Gets the mode in which the flip options should be shown\n\nThe default is Buttons\n@return The mode in which the flip options should be shown.\n@see setFlipOptionsMode(QString)\n",
     "hash": "dcf825d4620574c39262da8810da2ea5a0d0d073e1c05a285de5f721a912189e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "flipOptionsMode",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 122,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Gets the common height of the widgets inside this angle selector\n@return The height of the internal widgets (angle gauge, spin box, etc.).\n        Returns 0 if each widget has its default height.\n@see setWidgetsHeight(int)\n",
     "hash": "e819764115b3d726449f9bbee2e8de7e3f1edf684c5e993b86612a5ac431d798",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "widgetsHeight",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 129,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Gets the direction in which the angle increases in the angle gauge\n@return The direction in which the angle increases\n@see setIncreasingDirection(QString)\n",
     "hash": "e7c88be6bbd06a7bb81063aac3e5e689f221e5a86b6a4fec503ee6ba4063f2ee",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "increasingDirection",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 135,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Gets if the spin box is flat (no border or background)\n@return True if the spin box is flat, false otherwise\n@see useFlatSpinBox(bool)\n",
     "hash": "531a192c49174f1a226b31cbdca420a621c5808452886117d9dc558d132b6717",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "isUsingFlatSpinBox",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 141,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Sets the angle to which multiples the selected angle will snap\n@param newSnapAngle the new angle to which multiples the selected angle will snap\n@see snapAngle() const\n",
     "hash": "9f4eaf58d3d0e1e4a1e4bfc27860cb6a075b8136c0c277574fbededfffc3fcef",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setSnapAngle",
     "parameters": [
      {
       "default": null,
       "name": "newSnapAngle",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 148,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Sets the angle that is used to reset the current angle\n@param newResetAngle the new angle that is used to reset the current angle\n@see resetAngle() const\n",
     "hash": "74b37c9998589f27450f0d98e615b58cf5582a60d052aa51a53bc9d995b5c903",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setResetAngle",
     "parameters": [
      {
       "default": null,
       "name": "newResetAngle",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 154,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Sets the number of decimals (precision) used by the angle\n@param newNumberOfDecimals the new number of decimals used by the angle\n@see decimals() const\n",
     "hash": "6b93f9e4bf932c9eb718e1c5b2f080108eb15b276f87079654da74a873ee8dda",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setDecimals",
     "parameters": [
      {
       "default": null,
       "name": "newNumberOfDecimals",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 160,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Sets the maximum value for the angle\n@param newMaximum the new maximum value for the angle\n@see maximum() const\n@see setRange(qreal, qreal)\n",
     "hash": "f436f0c22abf54cfa3c6bab7af441a4f5f18e8dc72b82723595b0c6aebf62be4",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setMaximum",
     "parameters": [
      {
       "default": null,
       "name": "newMaximum",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 167,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Sets the minimum value for the angle\n@param newMinimum the new minimum value for the angle\n@see minimum() const\n@see setRange(qreal, qreal)\n",
     "hash": "1c32a13f69ca377ea5626d0f49ca45403e33e8bdaab9731687ad786fdefc9dca",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setMinimum",
     "parameters": [
      {
       "default": null,
       "name": "newMinimum",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 174,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Sets the minimum and maximum values for the angle\n@param newMinimum the new minimum value for the angle\n@param newMaximum the new maximum value for the angle\n@see minimum() const\n@see maximum() const\n@see setMinimum(qreal)\n@see setMaximum(qreal)\n",
     "hash": "a67af20a1e0eedcc2695a0247c938c1dc492ddf6eae0957589c5a63fc1b0d76a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setRange",
     "parameters": [
      {
       "default": null,
       "name": "newMinimum",
       "type": "float"
      },
      {
       "default": null,
       "name": "newMaximum",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 184,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Sets the prefix shown in the spin box\n@param newPrefix the new prefix for the spin box\n@see prefix() const\n",
     "hash": "e2a394bc007da55609ca3677dbffb87b55f3231c51a7724b6ce22e15a2899577",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setPrefix",
     "parameters": [
      {
       "default": null,
       "name": "newPrefix",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 190,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Sets if the angle should wrap pass the minimum or maximum angles\n@param newWrapping true if the angle should wrap pass the minimum or\nmaximum angles, false otherwise\n@see wrapping() const\n",
     "hash": "92c665689df575fc6cb4ba38206a95a17c54491ec7583eda26b17b7f0de4099c",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setWrapping",
     "parameters": [
      {
       "default": null,
       "name": "newWrapping",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 197,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Sets the mode in which the flip options should be shown\n@param newMode the new mode in which the flip options should be shown\nValid arguments:\n<ul>\n<li>NoFlipOptions - There are no flip options available</li>\n<li>MenuButton - The flip options are shown as a menu accessible via a options button</li>\n<li>Buttons - The flip options are shown as individual buttons</li>\n<li>ContextMenu - The flip options are shown only as a context menu when right-clicking the gauge widget</li>\n<ul>\n\n@see flipOptionsMode() const\n",
     "hash": "74d93dd85d2a58ae4610db598030770ef3b89647ef110d019006ccec4705209b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setFlipOptionsMode",
     "parameters": [
      {
       "default": null,
       "name": "newMode",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 211,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Sets the common height of the widgets inside this angle selector.\n       Use 0 to reset widgets to default height.\n@param newHeight the new height of the internal widgets (angle gauge, spin box, etc.)\n@see widgetsHeight() const\n",
     "hash": "56f42e9b0d20f7ec559d74a98af337e9c1d130d077bc0588309eddee60c3999e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setWidgetsHeight",
     "parameters": [
      {
       "default": null,
       "name": "newHeight",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 218,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Sets the increasing direction in the angle gauge\n@param newIncreasingDirection The new increasing direction\nValid arguments: CounterClockwise or Clockwise.\n@see increasingDirection() const\n",
     "hash": "bd7ca550a85d72d18243eee16a05231ee7fb0edcd60df2441982683ee714a9e2",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setIncreasingDirection",
     "parameters": [
      {
       "default": null,
       "name": "newIncreasingDirection",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 225,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Sets if the spin box should be flat\n@param newUseFlatSpinBox True if the spin box should be flat,\nfalse otherwise\n@see isUsingFlatSpinBox() const\n",
     "hash": "608292cc31c785078c1c67ee65a182981c324d59578bb0d97bf03b7902c2e6f1",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "useFlatSpinBox",
     "parameters": [
      {
       "default": null,
       "name": "newUseFlatSpinBox",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 232,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Gets the closest coterminal angle to the provided angle\nthat is in the range provided\n\nA coterminal angle to the provided angle is one that differs\nin size by an integer multiple of a turn (360 degrees)\n@param angle The reference angle for which the function will try to\nfind a coterminal angle\n@param minimum The range's lower bound\n@param maximum The range's upper bound\n@param[out] ok This parameter will be set to true if a coterminal\nangle exists in the provided range, or to false otherwise\n@return The closest coterminal angle in the provided range if one exists,\nor the closest value in the range (the minimum or maximum) otherwise.\nIf the reference angle is already in the range then it is returned\n",
     "hash": "6d66401d7974dc668359093d2766601bda6c667afb4f7f28a8c7075b41a00707",
     "isSignal": false,
     "isStatic": true,
     "isVirtual": false,
     "name": "closestCoterminalAngleInRange",
     "parameters": [
      {
       "default": null,
       "name": "angle",
       "type": "float"
      },
      {
       "default": null,
       "name": "minimum",
       "type": "float"
      },
      {
       "default": null,
       "name": "maximum",
       "type": "float"
      },
      {
       "default": "False",
       "name": "ok",
       "type": "bool"
      }
     ],
     "returned": "float",
     "sourceCodeLine": 250,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Gets the closest coterminal angle to the provided angle\nthat is in the range established\n\nA coterminal angle to the provided angle is one that differs\nin size by an integer multiple of a turn (360 degrees)\n@param angle The reference angle for which the function will try to\nfind a coterminal angle\n@param[out] ok This parameter will be set to true if a coterminal\nangle exists in the specified range, or to false otherwise\n@return The closest coterminal angle in the specified range if one exists,\nor the closest value in the range (the minimum or maximum) otherwise.\nIf the reference angle is already in the range then it is returned\n",
     "hash": "1331a154f783336765104fabee6220093fa3e667ca9f5db1e05013350ebd1cc8",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "closestCoterminalAngleInRange",
     "parameters": [
      {
       "default": null,
       "name": "angle",
       "type": "float"
      },
      {
       "default": "False",
       "name": "ok",
       "type": "bool"
      }
     ],
     "returned": "float",
     "sourceCodeLine": 265,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Flips an angle horizontally, vertically, or both\n\nThis function will always try to get the closest angle to the\nprovided one that satisfies the flipping requirements\n@param angle The angle to be flipped\n@param orientations Flags indicating in which directions the angle should\nbe flipped\n@return The flipped angle\n",
     "hash": "3c64bb0b3b0cba27ed43cef19f47745933fc7ef060f1913d6b3b3618a52ec407",
     "isSignal": false,
     "isStatic": true,
     "isVirtual": false,
     "name": "flipAngle",
     "parameters": [
      {
       "default": null,
       "name": "angle",
       "type": "float"
      },
      {
       "default": null,
       "name": "orientations",
       "type": "Qt.Orientations"
      }
     ],
     "returned": "float",
     "sourceCodeLine": 276,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Flips an angle horizontally, vertically, or both\n\nThis function will always try to get the closest angle to the\nprovided one that satisfies the flipping requirements\n@param angle The angle to be flipped\n@param minimum The lower bound of the valid range\n@param maximum The upper bound of the valid range\n@param orientations Flags indicating in which directions the angle should\nbe flipped\n@param[out] ok This parameter will be set to true if the flipped\nangle is in the provided range, or to false otherwise\n@return The flipped angle if it lies in the provided range or the\nclosest value in the range (the minimum or maximum) otherwise\n",
     "hash": "f9908a9b6db5ccc76ea1a6c593a7d6f615ad08cbdabcf76ffc5667d4d17b3731",
     "isSignal": false,
     "isStatic": true,
     "isVirtual": false,
     "name": "flipAngle",
     "parameters": [
      {
       "default": null,
       "name": "angle",
       "type": "float"
      },
      {
       "default": null,
       "name": "minimum",
       "type": "float"
      },
      {
       "default": null,
       "name": "maximum",
       "type": "float"
      },
      {
       "default": null,
       "name": "orientations",
       "type": "Qt.Orientations"
      },
      {
       "default": "False",
       "name": "ok",
       "type": "bool"
      }
     ],
     "returned": "float",
     "sourceCodeLine": 292,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Flips the angle horizontally, vertically, or both\n\nThis function will always try to set the closest angle to the\nstablished one that satisfies the flipping requirements\n@param orientations Flags indicating in which directions the angle should\nbe flipped\n",
     "hash": "d9c0178c93e94449c9ef0193d8a745d85e3131cda1b71b50e8abc466ce0bbfc2",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "flip",
     "parameters": [
      {
       "default": null,
       "name": "orientations",
       "type": "Qt.Orientations"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 301,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "fe8d6ccc1bc278ed0bee820c8c480c6e5b8a487007b9d98e809d2faa29a52401",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "angleChanged",
     "parameters": [
      {
       "default": null,
       "name": "angle",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 304,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    }
   ],
   "name": "AngleSelector",
   "sourceCodeLine": 21,
   "tagRef": {
    "available": [
     "master"
    ],
    "updated": [
     "master"
    ]
   }
  },
  "Canvas": {
   "description": "Canvas wraps the canvas inside a view on an image/document.\nIt is responsible for the view parameters of the document:\nzoom, rotation, mirror, wraparound and instant preview.\n",
   "extend": "QObject",
   "fileName": "Canvas.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@return the current zoomlevel. 1.0 is 100%.\n",
     "hash": "517ff272721aea086bb34e2397108ac37a4efd2070e2f7bddb7e79e0e7adda0f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "zoomLevel",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 38,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setZoomLevel set the zoomlevel to the given @p value. 1.0 is 100%.\n",
     "hash": "2e976b29d7018205dff3e181c70ef3a2cdbb3a28482b34024a27955748a98c5c",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setZoomLevel",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 43,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief resetZoom set the zoomlevel to 100%\n",
     "hash": "adaf370d2ec12568c1e56b7512cd7b67ccfe21ad2158e8a17dbd584821810b9b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "resetZoom",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 48,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the rotation of the canvas in degrees.\n",
     "hash": "ac5467379a8f4f7a9d8bdd98ebd7cf6bdcdefae71ace9c772498537b764b6995",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "rotation",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 53,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setRotation set the rotation of the canvas to the given  @param angle in degrees.\n",
     "hash": "6f0fc00a809d68c8acc502e95ba71a13c0f59481615d30527d1a50749f86c9fd",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setRotation",
     "parameters": [
      {
       "default": null,
       "name": "angle",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 58,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief resetRotation reset the canvas rotation.\n",
     "hash": "f4340a331ccd92f92e810d04fc6119e41ed7fbbee6f9a2d6525f1ff2b827c84b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "resetRotation",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 63,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return return true if the canvas is mirrored, false otherwise.\n",
     "hash": "84e2a05affbcefe1297ca32357aa32ce3d4ef2c7c0105f4756b37210a0e18a76",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "mirror",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 68,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setMirror turn the canvas mirroring on or off depending on @param value\n",
     "hash": "01aefbbbac92f7264406f4453a72ff0800b2efea82ca6c8da585e2d82e034620",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setMirror",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 73,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return true if the canvas is in wraparound mode, false if not. Only when OpenGL is enabled,\nis wraparound mode available.\n",
     "hash": "3fa3e702e6ae6fb6f1d1d1d45fc93e75df7f97be6f447a3ba7dda534d3c5feae",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "wrapAroundMode",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 79,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setWrapAroundMode set wraparound mode to  @param enable\n",
     "hash": "5c334f760f87fe27d6575254944dab79add59702d82d84a15e8001e3a74f3f84",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setWrapAroundMode",
     "parameters": [
      {
       "default": null,
       "name": "enable",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 84,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return true if the canvas is in Instant Preview mode, false if not. Only when OpenGL is enabled,\nis Instant Preview mode available.\n",
     "hash": "bf9650ba11d1b1644bdc92bbd4fb9f2ab056c1723e7cdc7f300f1909c3dab324",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "levelOfDetailMode",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 90,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setLevelOfDetailMode sets Instant Preview to @param enable\n",
     "hash": "41f82071437506421d181857ed8ac101bf9d15ebdfeb256b032daad86b1063c7",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setLevelOfDetailMode",
     "parameters": [
      {
       "default": null,
       "name": "enable",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 95,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the view that holds this canvas\n",
     "hash": "c8d5d08f1107a8c8d2e6815e9692415290917d053829737ec2242394cd289d01",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "view",
     "parameters": [],
     "returned": "View",
     "sourceCodeLine": 100,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    }
   ],
   "name": "Canvas",
   "sourceCodeLine": 22,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX"
    ]
   }
  },
  "Channel": {
   "description": "A Channel represents a single channel in a Node. Krita does not\nuse channels to store local selections: these are strictly the\ncolor and alpha channels.\n",
   "extend": "QObject",
   "fileName": "Channel.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief visible checks whether this channel is visible in the node\n@return the status of this channel\n",
     "hash": "1f34f61a94d1af40bf8ece545f47aa4941ae5a2dd5b53a7ef1f48a10b6dc88ea",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "visible",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 37,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setvisible set the visibility of the channel to the given value.\n",
     "hash": "24474cec8d21306cc723f598fc78832e20038e89d123f12dab2044898a258cb8",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setVisible",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 42,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the name of the channel\n",
     "hash": "adb9a431c82bf6f4ebeb1923e02ade971cc8afbc932edae87a8687c883becfef",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "name",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 47,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@returns the position of the first byte of the channel in the pixel\n",
     "hash": "36eeaac013c2f2664f86570a604c840772dabdf81604264de5efd91d9e4ca663",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "position",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 52,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the number of bytes this channel takes\n",
     "hash": "a05fd757ebed859e398b43ca99369b749ff995fd27141e31a891ea16976a55e2",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "channelSize",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 57,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the exact bounds of the channel. This can be smaller than the bounds of the Node this channel is part of.\n",
     "hash": "b381294e229b46e6df26bd6bfc2469c61d76418f9dee090e7b903c4ea1e8ce65",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "bounds",
     "parameters": [],
     "returned": "QRect",
     "sourceCodeLine": 62,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Read the values of the channel into the a byte array for each pixel in the rect from the Node this channel is part of, and returns it.\n\nNote that if Krita is built with OpenEXR and the Node has the 16 bits floating point channel depth type, Krita returns\n32 bits float for every channel; the libkis scripting API does not support half.\n",
     "hash": "3ebd8fc310e89d475e658e8b1fe5ac893effb78a1cb41389c5a20a854743b709",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "pixelData",
     "parameters": [
      {
       "default": null,
       "name": "rect",
       "type": "QRect"
      }
     ],
     "returned": "QByteArray",
     "sourceCodeLine": 70,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setPixelData writes the given data to the relevant channel in the Node. This is only possible for Nodes\nthat have a paintDevice, so nothing will happen when trying to write to e.g. a group layer.\n\nNote that if Krita is built with OpenEXR and the Node has the 16 bits floating point channel depth type, Krita expects\nto be given a 4 byte, 32 bits float for every channel; the libkis scripting API does not support half.\n\n@param value a byte array with exactly enough bytes.\n@param rect the rectangle to write the bytes into\n",
     "hash": "56df0f56fd1482ffdb1345fcf78ca34986706f43f21b51e4687cc14ddb5ceea0",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setPixelData",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "QByteArray"
      },
      {
       "default": null,
       "name": "rect",
       "type": "QRect"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 82,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    }
   ],
   "name": "Channel",
   "sourceCodeLine": 22,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX"
    ]
   }
  },
  "CloneLayer": {
   "description": "@brief The CloneLayer class\nA clone layer is a layer that takes a reference inside the image\nand shows the exact same pixeldata.\n\nIf the original is updated, the clone layer will update too.\n",
   "extend": "Node",
   "fileName": "CloneLayer.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief type Krita has several types of nodes, split in layers and masks. Group\nlayers can contain other layers, any layer can contain masks.\n\n@return clonelayer\n",
     "hash": "0b651b0d382d77fd1464364e6237e365c5a0e61d28e87119f6141629252d920f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": true,
     "name": "type",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 49,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief sourceNode\n@return the node the clone layer is based on.\n",
     "hash": "a90d30c574879725e6cd7270717818892462f55a8684ad66a0197441ebf7d8f1",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "sourceNode",
     "parameters": [],
     "returned": "Node",
     "sourceCodeLine": 55,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setSourceNode\n@param node the node to use as the source of the clone layer.\n",
     "hash": "1e5526bd3f7ff9c39fb124b491871bbce450cc34621e4fdf16db9d989351b86a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setSourceNode",
     "parameters": [
      {
       "default": null,
       "name": "node",
       "type": "Node"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 61,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    }
   ],
   "name": "CloneLayer",
   "sourceCodeLine": 25,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX",
     "050200-XX"
    ]
   }
  },
  "ColorizeMask": {
   "description": "@brief The ColorizeMask class\nA colorize mask is a mask type node that can be used\nto color in line art.\n\n@code\nwindow = Krita.instance().activeWindow()\ndoc = Krita.instance().createDocument(10, 3, \"Test\", \"RGBA\", \"U8\", \"\", 120.0)\nwindow.addView(doc)\nroot = doc.rootNode();\nnode = doc.createNode(\"layer\", \"paintLayer\")\nroot.addChildNode(node, None)\nnodeData = QByteArray.fromBase64(b\"AAAAAAAAAAAAAAAAEQYMBhEGDP8RBgz/EQYMAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARBgz5EQYM/xEGDAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEQYMAhEGDAkRBgwCAAAAAAAAAAAAAAAA\");\nnode.setPixelData(nodeData,0,0,10,3)\n\ncols = [ ManagedColor('RGBA','U8',''), ManagedColor('RGBA','U8','') ]\ncols[0].setComponents([0.65490198135376, 0.345098048448563, 0.474509805440903, 1.0]);\ncols[1].setComponents([0.52549022436142, 0.666666686534882, 1.0, 1.0]);\nkeys = [\n        QByteArray.fromBase64(b\"/48AAAAAAAAAAAAAAAAAAAAAAACmCwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"),\n        QByteArray.fromBase64(b\"AAAAAAAAAACO9ocAAAAAAAAAAAAAAAAAAAAAAMD/uQAAAAAAAAAAAAAAAAAAAAAAGoMTAAAAAAAAAAAA\")\n        ]\n\nmask = doc.createColorizeMask('c1')\nnode.addChildNode(mask,None)\nmask.setEditKeyStrokes(True)\n\nmask.setUseEdgeDetection(True)\nmask.setEdgeDetectionSize(4.0)\nmask.setCleanUpAmount(70.0)\nmask.setLimitToDeviceBounds(True)\nmask.initializeKeyStrokeColors(cols)\n\nfor col,key in zip(cols,keys):\n    mask.setKeyStrokePixelData(key,col,0,0,20,3)\n\nmask.updateMask()\nmask.setEditKeyStrokes(False);\nmask.setShowOutput(True);\n@endcode\n",
   "extend": "Node",
   "fileName": "ColorizeMask.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief type Krita has several types of nodes, split in layers and masks. Group\nlayers can contain other layers, any layer can contain masks.\n\n@return colorizemask\n\nIf the Node object isn't wrapping a valid Krita layer or mask object, and\nempty string is returned.\n",
     "hash": "226aa2d89f7ed35849e85e1d3ae781376d81a10772581cc9fba246207270245e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": true,
     "name": "type",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 79,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief keyStrokesColors\nColors used in the Colorize Mask's keystrokes.\n@return a ManagedColor list containing the colors of keystrokes.\n",
     "hash": "60300ab2b0413de30f6c734c354b68674697c3d3ef7bd1a71fcaedce5d1b7a81",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "keyStrokesColors",
     "parameters": [],
     "returned": "list[ManagedColor]",
     "sourceCodeLine": 86,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief initializeKeyStrokeColors\nSet the colors to use for the Colorize Mask's keystrokes.\n@param colors a list of ManagedColor to use for the keystrokes.\n@param transparentIndex index of the color that should be marked as transparent.\n",
     "hash": "890cce9765b10ce7a2bc231fb44b45b0499b4b29b65742e93a909a9f1a106442",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "initializeKeyStrokeColors",
     "parameters": [
      {
       "default": null,
       "name": "colors",
       "type": "list[ManagedColor]"
      },
      {
       "default": "1",
       "name": "transparentIndex",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 94,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief removeKeyStroke\nRemove a color from the Colorize Mask's keystrokes.\n@param color a ManagedColor to be removed from the keystrokes.\n",
     "hash": "47b629c10bb2fcce25542738bba52916e57b4ff5ad188e0e8980596c81d8a6ec",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "removeKeyStroke",
     "parameters": [
      {
       "default": null,
       "name": "color",
       "type": "ManagedColor"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 101,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief transparencyIndex\nIndex of the transparent color.\n@return an integer containing the index of the current color marked as transparent.\n",
     "hash": "bbd94715d1fdc3472c87ee9501e091e59d73c49ef33902e5c709e0070c864fd9",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "transparencyIndex",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 108,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief keyStrokePixelData\nreads the given rectangle from the keystroke image data and returns it as a byte\narray. The pixel data starts top-left, and is ordered row-first.\n@param color a ManagedColor to get keystrokes pixeldata from.\n@param x x position from where to start reading\n@param y y position from where to start reading\n@param w row length to read\n@param h number of rows to read\n@return a QByteArray with the pixel data. The byte array may be empty.\n",
     "hash": "3d5da07d50b0ceab0043c6dcf1f45af24ac8535b2758c907edaead816bbf65bf",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "keyStrokePixelData",
     "parameters": [
      {
       "default": null,
       "name": "color",
       "type": "ManagedColor"
      },
      {
       "default": null,
       "name": "x",
       "type": "int"
      },
      {
       "default": null,
       "name": "y",
       "type": "int"
      },
      {
       "default": null,
       "name": "w",
       "type": "int"
      },
      {
       "default": null,
       "name": "h",
       "type": "int"
      }
     ],
     "returned": "QByteArray",
     "sourceCodeLine": 121,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setKeyStrokePixelData\nwrites the given bytes, of which there must be enough, into the\nkeystroke, the keystroke's original pixels are overwritten\n\n@param value the byte array representing the pixels. There must be enough bytes available.\nKrita will take the raw pointer from the QByteArray and start reading, not stopping before\n(number of channels * size of channel * w * h) bytes are read.\n\n@param color a ManagedColor to set keystrokes pixeldata for.\n@param x the x position to start writing from\n@param y the y position to start writing from\n@param w the width of each row\n@param h the number of rows to write\n@return true if writing the pixeldata worked\n",
     "hash": "a34723748ef670664a06ee08751a86ff69b81201e1ef01ba3b02f188f7c32f99",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setKeyStrokePixelData",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "QByteArray"
      },
      {
       "default": null,
       "name": "color",
       "type": "ManagedColor"
      },
      {
       "default": null,
       "name": "x",
       "type": "int"
      },
      {
       "default": null,
       "name": "y",
       "type": "int"
      },
      {
       "default": null,
       "name": "w",
       "type": "int"
      },
      {
       "default": null,
       "name": "h",
       "type": "int"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 139,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setUseEdgeDetection\nActivate this for line art with large solid areas, for example shadows on an object.\n@param value true to enable edge detection, false to disable.\n",
     "hash": "531b130bd2e1009b2f184795a91240df87f501afe493971e66f13167ee113c3f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setUseEdgeDetection",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 146,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief useEdgeDetection\n@return true if Edge detection is enabled, false if disabled.\n",
     "hash": "835c108f833464254dca8307c3f003589b9924cd9b9f4eb3eb3ebfa2c945231f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "useEdgeDetection",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 152,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setEdgeDetectionSize\nSet the value to the thinnest line on the image.\n@param value a float value of the edge size to detect in pixels.\n",
     "hash": "8654c6462f3037ef8d6217a74cf95aaa5cf22e8f68e97852c0d58a9f31654b41",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setEdgeDetectionSize",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 159,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief edgeDetectionSize\n@return a float value of the edge detection size in pixels.\n",
     "hash": "cbb6f43a09bcfe13baffe0364d4dab2660c447a7c68141c334d8c582582dc257",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "edgeDetectionSize",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 165,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setCleanUpAmount\nThis will attempt to handle messy strokes that overlap the line art where they shouldn't.\n@param value a float value from 0.0 to 100.00 where 0.0 is no cleanup is done and 100.00 is most aggressive.\n",
     "hash": "5ec6377442beb01f1fe5c4386c853d1bb64c1f1da0e0dba594b0fcd5ffe74071",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setCleanUpAmount",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 172,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief cleanUpAmount\n@return a float value of 0.0 to 100.0 representing the cleanup amount where 0.0 is no cleanup is done and 100.00 is most aggressive.\n",
     "hash": "c3341ec308c9002bd77464eaee478daa666552e8ecf36a0f58611093db6b1a46",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "cleanUpAmount",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 178,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setLimitToDeviceBounds\nLimit the colorize mask to the combined layer bounds of the strokes and the line art it is filling. This can speed up the use of the mask on complicated compositions, such as comic pages.\n@param value set true to enabled limit bounds, false to disable.\n",
     "hash": "8d7036df4311c8d3b72f6b4edc24c34f36721ebd7ae13e8d7e5508df94afebee",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setLimitToDeviceBounds",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 185,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief limitToDeviceBounds\n@return true if limit bounds is enabled, false if disabled.\n",
     "hash": "a8901ef8bb119df37a1c117d7f850e5c7052610f9b31d8427b0b1d53319fb244",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "limitToDeviceBounds",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 191,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief updateMask\nProcess the Colorize Mask's keystrokes and generate a projection of the computed colors.\n@param force force an update\n",
     "hash": "49a77f1ee7944347ec21d7a053ae628cf32e0cf50a6a7b76400952fbc4596bbb",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "updateMask",
     "parameters": [
      {
       "default": "False",
       "name": "force",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 198,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "0197ad55be50ee71e492ae56c53f866667149c662c8a5d9592101c3c6bd2b00c",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "resetCache",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 200,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief showOutput\nShow output mode allows the user to see the result of the Colorize Mask's algorithm.\n@return true if edit show coloring mode is enabled, false if disabled.\n",
     "hash": "29b2cfecc4c4fde53722d2a12416828aa9258f2e326913675fbcbf7907cb291e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "showOutput",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 207,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setShowOutput\nToggle Colorize Mask's show output mode.\n@param enabled set true to enable show coloring mode and false to disable it.\n",
     "hash": "e9c0210e4d9fd5f57733128d8bdb4ee32e8c82890e76c008f94e348c9ccca2bd",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setShowOutput",
     "parameters": [
      {
       "default": null,
       "name": "enabled",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 214,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief editKeyStrokes\nEdit keystrokes mode allows the user to modify keystrokes on the active Colorize Mask.\n@return true if edit keystrokes mode is enabled, false if disabled.\n",
     "hash": "e9b6193d4f36454a742efc50ab02d58bc7478c6563ec981c3a32c34214e77da2",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "editKeyStrokes",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 221,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setEditKeyStrokes\nToggle Colorize Mask's edit keystrokes mode.\n@param enabled set true to enable edit keystrokes mode and false to disable it.\n",
     "hash": "b1618367712508ab08ae0df01054073f945048ad0647f7554b4e607f87049f7f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setEditKeyStrokes",
     "parameters": [
      {
       "default": null,
       "name": "enabled",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 228,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    }
   ],
   "name": "ColorizeMask",
   "sourceCodeLine": 59,
   "tagRef": {
    "available": [
     "050200-XX"
    ],
    "updated": [
     "050200-XX"
    ]
   }
  },
  "DockWidget": {
   "description": "DockWidget is the base class for custom Dockers. Dockers are created by a\nfactory class which needs to be registered by calling Application.addDockWidgetFactory:\n\n@code\nclass HelloDocker(DockWidget):\n  def __init__(self):\n      super().__init__()\n      label = QLabel(\"Hello\", self)\n      self.setWidget(label)\n      self.label = label\n      self.setWindowTitle(\"Hello Docker\")\n\ndef canvasChanged(self, canvas):\n      self.label.setText(\"Hellodocker: canvas changed\");\n\nApplication.addDockWidgetFactory(DockWidgetFactory(\"hello\", DockWidgetFactoryBase.DockRight, HelloDocker))\n\n@endcode\n\nOne docker per window will be created, not one docker per canvas or view. When the user\nswitches between views/canvases, canvasChanged will be called. You can override that\nmethod to reset your docker's internal state, if necessary.\n",
   "extend": "QDockWidget",
   "fileName": "DockWidget.h",
   "methods": [
    {
     "accesType": "protected",
     "description": "@@return the canvas object that this docker is currently associated with\n",
     "hash": "df3e3b90e2409640fc8649524b2967030f9acf4c689b43b8986ec2780e5a1c6b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "canvas",
     "parameters": [],
     "returned": "Canvas",
     "sourceCodeLine": 61,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "protected",
     "description": "@brief canvasChanged is called whenever the current canvas is changed\nin the mainwindow this dockwidget instance is shown in.\n@param canvas The new canvas.\n",
     "hash": "154052a4dc263f9e0935c8e8a9df2130faad2de98272fc1b7a7951f9ed35ff18",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": true,
     "name": "canvasChanged",
     "parameters": [
      {
       "default": null,
       "name": "canvas",
       "type": "Canvas"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 68,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    }
   ],
   "name": "DockWidget",
   "sourceCodeLine": 42,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX"
    ]
   }
  },
  "DockWidgetFactoryBase": {
   "description": "@brief The DockWidgetFactoryBase class is the base class for plugins that want\nto add a dock widget to every window. You do not need to implement this class\nyourself, but create a DockWidget implementation and then add the DockWidgetFactory\nto the Krita instance like this:\n\n@code\nclass HelloDocker(DockWidget):\n  def __init__(self):\n      super().__init__()\n      label = QLabel(\"Hello\", self)\n      self.setWidget(label)\n      self.label = label\n\ndef canvasChanged(self, canvas):\n      self.label.setText(\"Hellodocker: canvas changed\");\n\nApplication.addDockWidgetFactory(DockWidgetFactory(\"hello\", DockWidgetFactoryBase.DockRight, HelloDocker))\n\n@endcode\n",
   "extend": "KoDockFactoryBase",
   "fileName": "DockWidgetFactoryBase.h",
   "methods": [
    {
     "accesType": "public",
     "description": "",
     "hash": "357dbc3952d495c131f13d7865037ce22c26bfb70ee710c796813bc0ff40b93e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "DockWidgetFactoryBase",
     "parameters": [
      {
       "default": null,
       "name": "_id",
       "type": "str"
      },
      {
       "default": null,
       "name": "_dockPosition",
       "type": "DockPosition"
      }
     ],
     "returned": "DockWidgetFactoryBase",
     "sourceCodeLine": 39,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "fed802f314a6d80d8f8b99d80c39bad215d9e6af3f1848551e0bb40faee818d6",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "id",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 41,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "4457f1b06554c525ad7776bbe6288edf92137d78e357de63810753d3b94bfde5",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "defaultDockPosition",
     "parameters": [],
     "returned": "DockPosition",
     "sourceCodeLine": 42,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "f2b02d855c4b0c6592407159486132b1e54707c055079b27da2eea64abd269f0",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "isCollapsable",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 55,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "724b38be27494719ee0980ef5b73a322425feda8374dbb2a68879df26cc5974d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "defaultCollapsed",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 56,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    }
   ],
   "name": "DockWidgetFactoryBase",
   "sourceCodeLine": 36,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX"
    ]
   }
  },
  "Document": {
   "description": "The Document class encapsulates a Krita Document/Image. A Krita document is an Image with\na filename. Libkis does not differentiate between a document and an image, like Krita does\ninternally.\n",
   "extend": "QObject",
   "fileName": "Document.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief DEPRECATED - use guidesConfig() instead\nThe horizontal guides.\n@return a list of the horizontal positions of guides.\n",
     "hash": "bf8508ed019006b739cc7a2d5712089713a8b353e2d011e0d17b48ec443a820f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "horizontalGuides",
     "parameters": [],
     "returned": "list[float]",
     "sourceCodeLine": 55,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief DEPRECATED - use guidesConfig() instead\nThe vertical guide lines.\n@return a list of vertical guides.\n",
     "hash": "1b6c836ab59d8f9df59f918700c60909c11404fd9cdc886d2f91b39372ccd1e5",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "verticalGuides",
     "parameters": [],
     "returned": "list[float]",
     "sourceCodeLine": 61,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief DEPRECATED - use guidesConfig() instead\nReturns guide visibility.\n@return whether the guides are visible.\n",
     "hash": "b0b6b50781c8df9369abd9ce1bd21121a70ed2f2dc0aa1a0bd440714e845a64d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "guidesVisible",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 68,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief DEPRECATED - use guidesConfig() instead\nReturns guide lockedness.\n@return whether the guides are locked.\n",
     "hash": "36abd9e9cdbf26a94c8f37cd51ea698568497a2440f66872f4bbb6dd6979a215",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "guidesLocked",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 74,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief clone create a shallow clone of this document.\n@return a new Document that should be identical to this one in every respect.\n",
     "hash": "9b5f503a047870ed10fc6c754ef9c84550e4f675bb5c17b54c78f1177028543c",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "clone",
     "parameters": [],
     "returned": "Document",
     "sourceCodeLine": 80,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Batchmode means that no actions on the document should show dialogs or popups.\n@return true if the document is in batchmode.\n",
     "hash": "36e5f345b98a7e78aadaa5271dfa61f99bf98e99a49e5c3d76be3638bd8b38ce",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "batchmode",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 86,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Set batchmode to @p value. If batchmode is true, then there should be no popups\nor dialogs shown to the user.\n",
     "hash": "ef00d77412c02f1b6f7f1fd66711fb00143ca1ad9111be1789241866fd4abcf6",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setBatchmode",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 92,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief activeNode retrieve the node that is currently active in the currently active window\n@return the active node. If there is no active window, the first child node is returned.\n",
     "hash": "acfbe83bc1cd1941165e429d4a918cc1f3fe4fb57a15cb98c743d9864e6c8bda",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "activeNode",
     "parameters": [],
     "returned": "Node",
     "sourceCodeLine": 98,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setActiveNode make the given node active in the currently active view and window\n@param value the node to make active.\n",
     "hash": "db1eef21df358acbc9a63749178f352533715593eb47b75f2dbfa85063238b69",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setActiveNode",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "Node"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 104,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief toplevelNodes return a list with all top level nodes in the image graph\n",
     "hash": "2dc5e4275bc0d549cbdba0dda9d78108a4e9013740a1ca45b660cf7df6821007",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "topLevelNodes",
     "parameters": [],
     "returned": "list[Node]",
     "sourceCodeLine": 109,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief nodeByName searches the node tree for a node with the given name and returns it\n@param name the name of the node\n@return the first node with the given name or 0 if no node is found\n",
     "hash": "08bc555d85112a67f0abc704c2e74c18418a30e60d971649ffd938215adbe852",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "nodeByName",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      }
     ],
     "returned": "Node",
     "sourceCodeLine": 116,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "colorDepth A string describing the color depth of the image:\n<ul>\n<li>U8: unsigned 8 bits integer, the most common type</li>\n<li>U16: unsigned 16 bits integer</li>\n<li>F16: half, 16 bits floating point. Only available if Krita was built with OpenEXR</li>\n<li>F32: 32 bits floating point</li>\n</ul>\n@return the color depth.\n",
     "hash": "715836fcdecec25381cb7b1bfa32b67ba464a81f7a9129881617e39716e35a0f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "colorDepth",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 135,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief colorModel retrieve the current color model of this document:\n<ul>\n<li>A: Alpha mask</li>\n<li>RGBA: RGB with alpha channel (The actual order of channels is most often BGR!)</li>\n<li>XYZA: XYZ with alpha channel</li>\n<li>LABA: LAB with alpha channel</li>\n<li>CMYKA: CMYK with alpha channel</li>\n<li>GRAYA: Gray with alpha channel</li>\n<li>YCbCrA: YCbCr with alpha channel</li>\n</ul>\n@return the internal color model string.\n",
     "hash": "f4408c04e21543834db38d49c8f525c323f0b6e26470c9382c784d7556333831",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "colorModel",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 150,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the name of the current color profile\n",
     "hash": "23e4e424e364e6b2401ea99002b23714adaa4245ba25d7d42771a536f8be6df6",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "colorProfile",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 155,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setColorProfile set the color profile of the image to the given profile. The profile has to\nbe registered with krita and be compatible with the current color model and depth; the image data\nis <i>not</i> converted.\n@param colorProfile\n@return false if the colorProfile name does not correspond to to a registered profile or if assigning\nthe profile failed.\n",
     "hash": "26c36445760464c670407f361efe08d9456dc44305a08a592060c1c1abe566fc",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setColorProfile",
     "parameters": [
      {
       "default": null,
       "name": "colorProfile",
       "type": "str"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 165,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setColorSpace convert the nodes and the image to the given colorspace. The conversion is\ndone with Perceptual as intent, High Quality and No LCMS Optimizations as flags and no blackpoint\ncompensation.\n\n@param colorModel A string describing the color model of the image:\n<ul>\n<li>A: Alpha mask</li>\n<li>RGBA: RGB with alpha channel (The actual order of channels is most often BGR!)</li>\n<li>XYZA: XYZ with alpha channel</li>\n<li>LABA: LAB with alpha channel</li>\n<li>CMYKA: CMYK with alpha channel</li>\n<li>GRAYA: Gray with alpha channel</li>\n<li>YCbCrA: YCbCr with alpha channel</li>\n</ul>\n@param colorDepth A string describing the color depth of the image:\n<ul>\n<li>U8: unsigned 8 bits integer, the most common type</li>\n<li>U16: unsigned 16 bits integer</li>\n<li>F16: half, 16 bits floating point. Only available if Krita was built with OpenEXR</li>\n<li>F32: 32 bits floating point</li>\n</ul>\n@param colorProfile a valid color profile for this color model and color depth combination.\n@return false the combination of these arguments does not correspond to a colorspace.\n",
     "hash": "6429073a4b614cbd7c8f114486d24b27a5f28725cd8e45a24750e89751ca8b5b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setColorSpace",
     "parameters": [
      {
       "default": null,
       "name": "colorModel",
       "type": "str"
      },
      {
       "default": null,
       "name": "colorDepth",
       "type": "str"
      },
      {
       "default": null,
       "name": "colorProfile",
       "type": "str"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 192,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief documentInfo creates and XML document representing document and author information.\n@return a string containing a valid XML document with the right information about the document\nand author. The DTD can be found here:\n\nhttps://phabricator.kde.org/source/krita/browse/master/krita/dtd/\n\n@code\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE document-info PUBLIC '-//KDE//DTD document-info 1.1//EN' 'http://www.calligra.org/DTD/document-info-1.1.dtd'>\n<document-info xmlns=\"http://www.calligra.org/DTD/document-info\">\n<about>\n <title>My Document</title>\n  <description></description>\n  <subject></subject>\n  <abstract><![CDATA[]]></abstract>\n  <keyword></keyword>\n  <initial-creator>Unknown</initial-creator>\n  <editing-cycles>1</editing-cycles>\n  <editing-time>35</editing-time>\n  <date>2017-02-27T20:15:09</date>\n  <creation-date>2017-02-27T20:14:33</creation-date>\n  <language></language>\n </about>\n <author>\n  <full-name>Boudewijn Rempt</full-name>\n  <initial></initial>\n  <author-title></author-title>\n  <email></email>\n  <telephone></telephone>\n  <telephone-work></telephone-work>\n  <fax></fax>\n  <country></country>\n  <postal-code></postal-code>\n  <city></city>\n  <street></street>\n  <position></position>\n  <company></company>\n </author>\n</document-info>\n@endcode\n\n",
     "hash": "60e9aad533273ef4203b3c02688c22f88847967c72b5c28e2eeee1c1d8ba1693",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "documentInfo",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 254,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setDocumentInfo set the Document information to the information contained in document\n@param document A string containing a valid XML document that conforms to the document-info DTD\nthat can be found here:\n\nhttps://phabricator.kde.org/source/krita/browse/master/krita/dtd/\n",
     "hash": "ad484477cd5181126ba830f8ae259d3ef00b2bd213e969b7277316be038c2890",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setDocumentInfo",
     "parameters": [
      {
       "default": null,
       "name": "document",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 263,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the full path to the document, if it has been set.\n",
     "hash": "282f3d237baa2a25b7f84fb8df571ed4009d47da6e2bb374407fdeb06f2ea3b9",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "fileName",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 268,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setFileName set the full path of the document to @param value\n",
     "hash": "e3108bd2840219cb775d6a755e4b208f4a01caa2ab5f9b91c00fd1d7467f4076",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setFileName",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 273,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the height of the image in pixels\n",
     "hash": "83bea367663db155451363c5a46203d1443981188c27d289e3307ec8291f0ab7",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "height",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 278,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setHeight resize the document to @param value height. This is a canvas resize, not a scale.\n",
     "hash": "c1fd4c8771a58938eb585a842d92a4423e106f659ddb8a861cf86f67c19bd77a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setHeight",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 283,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the name of the document. This is the title field in the @ref documentInfo\n",
     "hash": "f83a15c0b0c8db98f2a4a7e286619a5ca0c8345b23bfcc2c5eb44b64c0ad660b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "name",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 288,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setName sets the name of the document to @p value. This is the title field in the @ref documentInfo\n",
     "hash": "97c0bf94faad654aedc459a4b42f43ea65a968630b6671197a3d99f847b0b248",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setName",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 293,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the resolution in pixels per inch\n",
     "hash": "3de10ba6bb54ffc0a506c794f24fbd8c1f16233046ae2cd9dd81f5295ef48fbe",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "resolution",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 298,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setResolution set the resolution of the image; this does not scale the image\n@param value the resolution in pixels per inch\n",
     "hash": "68bab8b10901cae617f43ed0f7de72434d09e6268593607ac6d53078e7eada44",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setResolution",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 303,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief rootNode the root node is the invisible group layer that contains the entire node\nhierarchy.\n@return the root of the image\n",
     "hash": "5069c8dd940a3a803e82ce1442da15672d2787f2ccf062f27f1454124abaaf12",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "rootNode",
     "parameters": [],
     "returned": "Node",
     "sourceCodeLine": 310,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief selection Create a Selection object around the global selection, if there is one.\n@return the global selection or None if there is no global selection.\n",
     "hash": "b4d413ea0e2ea4162e60d3e7607c04998065afb4648f9096c42ff805451e9a30",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "selection",
     "parameters": [],
     "returned": "Selection",
     "sourceCodeLine": 316,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setSelection set or replace the global selection\n@param value a valid selection object.\n",
     "hash": "c3e9a59cc0b96245ecb429e068e8054796f711fb1f0074478b519d1c205b89b7",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setSelection",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "Selection"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 322,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the width of the image in pixels.\n",
     "hash": "23777fd2de0792ab07b8418ce625c9749b7cc5b663867ad81aeae88fcc565862",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "width",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 327,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setWidth resize the document to @param value width. This is a canvas resize, not a scale.\n",
     "hash": "80e51fee2c9621817990029fb17cff0b1ce5264528fc883b63f52d511550f642",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setWidth",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 332,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the left edge of the canvas in pixels.\n",
     "hash": "28bf58c1c61a3d3da44b9aa62d72244a8c6ef659fc38954faaab4bdc6b71ad03",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "xOffset",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 337,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setXOffset sets the left edge of the canvas to @p x.\n",
     "hash": "e0992c55c63a6daa62fd16ddab33715ceaf9a394cb6af49376c8ed81be1a4e8a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setXOffset",
     "parameters": [
      {
       "default": null,
       "name": "x",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 342,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the top edge of the canvas in pixels.\n",
     "hash": "36e63e355ea59f2b8fc4ebeaea1a9f0806f0ae10436f9828262d6cbcdb071174",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "yOffset",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 347,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setYOffset sets the top edge of the canvas to @p y.\n",
     "hash": "bc25897cbb7562f0236cfcd1f1f26c8c72b3881e20691136d82ce511c8c9d3f9",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setYOffset",
     "parameters": [
      {
       "default": null,
       "name": "y",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 352,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return xRes the horizontal resolution of the image in pixels\nper inch\n",
     "hash": "e68c67fd33c999798641eccde3020112d71d8063dc3dc3b1a0be2124e1e1a548",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "xRes",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 359,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040208-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setXRes set the horizontal resolution of the image to\nxRes in pixels per inch\n",
     "hash": "33472325090c887cd1726bc998ed19f7c0653569c9eb7869fbbda7eb08844f83",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setXRes",
     "parameters": [
      {
       "default": null,
       "name": "xRes",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 365,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040208-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return yRes the vertical resolution of the image in pixels per\ninch\n",
     "hash": "d99df9c1f08d53eb4cd5235e97383d6d3189f63754b9438b6b701ec79d3e5e17",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "yRes",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 371,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040208-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setYRes set the vertical resolution of the image to yRes\nin pixels per inch\n",
     "hash": "5b6c95969ae2ca901194f8bfd3248e4fef1fb3143da8f8f154fa64eecd8497db",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setYRes",
     "parameters": [
      {
       "default": null,
       "name": "yRes",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 377,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040208-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief pixelData reads the given rectangle from the image projection and returns it as a byte\narray. The pixel data starts top-left, and is ordered row-first.\n\nThe byte array can be interpreted as follows: 8 bits images have one byte per channel,\nand as many bytes as there are channels. 16 bits integer images have two bytes per channel,\nrepresenting an unsigned short. 16 bits float images have two bytes per channel, representing\na half, or 16 bits float. 32 bits float images have four bytes per channel, representing a\nfloat.\n\nYou can read outside the image boundaries; those pixels will be transparent black.\n\nThe order of channels is:\n\n<ul>\n<li>Integer RGBA: Blue, Green, Red, Alpha\n<li>Float RGBA: Red, Green, Blue, Alpha\n<li>LabA: L, a, b, Alpha\n<li>CMYKA: Cyan, Magenta, Yellow, Key, Alpha\n<li>XYZA: X, Y, Z, A\n<li>YCbCrA: Y, Cb, Cr, Alpha\n</ul>\n\nThe byte array is a copy of the original image data. In Python, you can use bytes, bytearray\nand the struct module to interpret the data and construct, for instance, a Pillow Image object.\n\n@param x x position from where to start reading\n@param y y position from where to start reading\n@param w row length to read\n@param h number of rows to read\n@return a QByteArray with the pixel data. The byte array may be empty.\n",
     "hash": "13666c9d214e1bb009e2a4280e2e5eb2bd212c20379c91f65f24951b4219372b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "pixelData",
     "parameters": [
      {
       "default": null,
       "name": "x",
       "type": "int"
      },
      {
       "default": null,
       "name": "y",
       "type": "int"
      },
      {
       "default": null,
       "name": "w",
       "type": "int"
      },
      {
       "default": null,
       "name": "h",
       "type": "int"
      }
     ],
     "returned": "QByteArray",
     "sourceCodeLine": 411,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief close Close the document: remove it from Krita's internal list of documents and\nclose all views. If the document is modified, you should save it first. There will be\nno prompt for saving.\n\nAfter closing the document it becomes invalid.\n\n@return true if the document is closed.\n",
     "hash": "5f0e2f0ed4029c2ab75e4c74d05d9b2ded9d029e5a15a5e670612e93c7a7e2f0",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "close",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 422,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief crop the image to rectangle described by @p x, @p y,\n@p w and @p h\n@param x x coordinate of the top left corner\n@param y y coordinate of the top left corner\n@param w width\n@param h height\n",
     "hash": "6c64df4113be9f0ea9da4b300bb318b5a32e0d5bd764be8f7b313b3e99e671f1",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "crop",
     "parameters": [
      {
       "default": null,
       "name": "x",
       "type": "int"
      },
      {
       "default": null,
       "name": "y",
       "type": "int"
      },
      {
       "default": null,
       "name": "w",
       "type": "int"
      },
      {
       "default": null,
       "name": "h",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 432,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief exportImage export the image, without changing its URL to the given path.\n@param filename the full path to which the image is to be saved\n@param exportConfiguration a configuration object appropriate to the file format.\nAn InfoObject will used to that configuration.\n\nThe supported formats have specific configurations that must be used when in\nbatchmode. They are described below:\n\n\\b png\n<ul>\n<li>alpha: bool (True or False)\n<li>compression: int (1 to 9)\n<li>forceSRGB: bool (True or False)\n<li>indexed: bool (True or False)\n<li>interlaced: bool (True or False)\n<li>saveSRGBProfile: bool (True or False)\n<li>transparencyFillcolor: rgb (Ex:[255,255,255])\n</ul>\n\n\\b jpeg\n<ul>\n<li>baseline: bool (True or False)\n<li>exif: bool (True or False)\n<li>filters: bool (['ToolInfo', 'Anonymizer'])\n<li>forceSRGB: bool (True or False)\n<li>iptc: bool (True or False)\n<li>is_sRGB: bool (True or False)\n<li>optimize: bool (True or False)\n<li>progressive: bool (True or False)\n<li>quality: int (0 to 100)\n<li>saveProfile: bool (True or False)\n<li>smoothing: int (0 to 100)\n<li>subsampling: int (0 to 3)\n<li>transparencyFillcolor: rgb (Ex:[255,255,255])\n<li>xmp: bool (True or False)\n</ul>\n@return true if the export succeeded, false if it failed.\n",
     "hash": "ce3747e2f312f6330d252cf6c3558dfdbc41820c7fff9979a7e493a0c601f18a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "exportImage",
     "parameters": [
      {
       "default": null,
       "name": "filename",
       "type": "str"
      },
      {
       "default": null,
       "name": "exportConfiguration",
       "type": "InfoObject"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 473,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief flatten all layers in the image\n",
     "hash": "3ed40656efb3187ca4da1307ed5cb0ebc23346cdcd3e054257f18481109bd93e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "flatten",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 478,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief resizeImage resizes the canvas to the given left edge, top edge, width and height.\nNote: This doesn't scale, use scale image for that.\n@param x the new left edge\n@param y the new top edge\n@param w the new width\n@param h the new height\n",
     "hash": "70002c5bde2715ced600f016483bf8e71a441b22af310e0d71472e1949ace0a3",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "resizeImage",
     "parameters": [
      {
       "default": null,
       "name": "x",
       "type": "int"
      },
      {
       "default": null,
       "name": "y",
       "type": "int"
      },
      {
       "default": null,
       "name": "w",
       "type": "int"
      },
      {
       "default": null,
       "name": "h",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 488,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief scaleImage\n@param w the new width\n@param h the new height\n@param xres the new xres\n@param yres the new yres\n@param strategy the scaling strategy. There's several ones amongst these that aren't available in the regular UI.\nThe list of filters is extensible and can be retrieved with Krita::filter\n<ul>\n<li>Hermite</li>\n<li>Bicubic - Adds pixels using the color of surrounding pixels. Produces smoother tonal gradations than Bilinear.</li>\n<li>Box - Replicate pixels in the image. Preserves all the original detail, but can produce jagged effects.</li>\n<li>Bilinear - Adds pixels averaging the color values of surrounding pixels. Produces medium quality results when the image is scaled from half to two times the original size.</li>\n<li>Bell</li>\n<li>BSpline</li>\n<li>Kanczos3 - Offers similar results than Bicubic, but maybe a little bit sharper. Can produce light and dark halos along strong edges.</li>\n<li>Mitchell</li>\n</ul>\n",
     "hash": "9558b77def8a79fe86bc281698ac358bac740d99fe252365a5dafeaca7311dee",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "scaleImage",
     "parameters": [
      {
       "default": null,
       "name": "w",
       "type": "int"
      },
      {
       "default": null,
       "name": "h",
       "type": "int"
      },
      {
       "default": null,
       "name": "xres",
       "type": "int"
      },
      {
       "default": null,
       "name": "yres",
       "type": "int"
      },
      {
       "default": null,
       "name": "strategy",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 509,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief rotateImage\nRotate the image by the given radians.\n@param radians the amount you wish to rotate the image in radians\n",
     "hash": "fc448e95d32dc4d2a5a2ce3ca35a0c17b7f654d1f039a1c145247f8c10b8f8e7",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "rotateImage",
     "parameters": [
      {
       "default": null,
       "name": "radians",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 516,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief shearImage shear the whole image.\n@param angleX the X-angle in degrees to shear by\n@param angleY the Y-angle in degrees to shear by\n",
     "hash": "215aaa884a85082245e9c02d9a977950a110806205271191695f39e328333b6e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "shearImage",
     "parameters": [
      {
       "default": null,
       "name": "angleX",
       "type": "float"
      },
      {
       "default": null,
       "name": "angleY",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 523,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief save the image to its currently set path. The modified flag of the\ndocument will be reset\n@return true if saving succeeded, false otherwise.\n",
     "hash": "2ef9e7ebf82cbbff7841a0157685ea0fead28263bfc00576f38946719823cac2",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "save",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 530,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief saveAs save the document under the @p filename. The document's\nfilename will be reset to @p filename.\n@param filename the new filename (full path) for the document\n@return true if saving succeeded, false otherwise.\n",
     "hash": "bb372e375a8c48e0a149d2c551bc2f08f000ac87c416a15fb9b16f10612567c3",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "saveAs",
     "parameters": [
      {
       "default": null,
       "name": "filename",
       "type": "str"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 538,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief createNode create a new node of the given type. The node is not added\nto the node hierarchy; you need to do that by finding the right parent node,\ngetting its list of child nodes and adding the node in the right place, then\ncalling Node::SetChildNodes\n\n@param name The name of the node\n\n@param nodeType The type of the node. Valid types are:\n<ul>\n <li>paintlayer\n <li>grouplayer\n <li>filelayer\n <li>filterlayer\n <li>filllayer\n <li>clonelayer\n <li>vectorlayer\n <li>transparencymask\n <li>filtermask\n <li>transformmask\n <li>selectionmask\n</ul>\n\nWhen relevant, the new Node will have the colorspace of the image by default;\nthat can be changed with Node::setColorSpace.\n\nThe settings and selections for relevant layer and mask types can also be set\nafter the Node has been created.\n\n@code\nd = Application.createDocument(1000, 1000, \"Test\", \"RGBA\", \"U8\", \"\", 120.0)\nroot = d.rootNode();\nprint(root.childNodes())\nl2 = d.createNode(\"layer2\", \"paintLayer\")\nprint(l2)\nroot.addChildNode(l2, None)\nprint(root.childNodes())\n@endcode\n\n\n@return the new Node.\n",
     "hash": "4212ea28f99ba3ef9ac0d4821d8cf050b2d402b4d5d4dd5691e1bee44d1cdc4f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "createNode",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      },
      {
       "default": null,
       "name": "nodeType",
       "type": "str"
      }
     ],
     "returned": "Node",
     "sourceCodeLine": 582,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief createGroupLayer\nReturns a grouplayer object. Grouplayers are nodes that can have\nother layers as children and have the passthrough mode.\n@param name the name of the layer.\n@return a GroupLayer object.\n",
     "hash": "5920f07062dcd6d5dda1ae86f7da5908685cfaef12de506de414e5d3300325a7",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "createGroupLayer",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      }
     ],
     "returned": "GroupLayer",
     "sourceCodeLine": 590,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief createFileLayer returns a layer that shows an external image.\n@param name name of the file layer.\n@param fileName the absolute filename of the file referenced. Symlinks will be resolved.\n@param scalingMethod how the dimensions of the file are interpreted\n       can be either \"None\", \"ImageToSize\" or \"ImageToPPI\"\n@param scalingFilter filter used to scale the file\n       can be \"Bicubic\", \"Hermite\", \"NearestNeighbor\", \"Bilinear\", \"Bell\", \"BSpline\", \"Lanczos3\", \"Mitchell\"\n@return a FileLayer\n",
     "hash": "3234a04f2ff7913ee0c6a0b06234f1b5f5f78b43b83a53ce332b686bf3d2c81b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "createFileLayer",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      },
      {
       "default": null,
       "name": "fileName",
       "type": "str"
      },
      {
       "default": null,
       "name": "scalingMethod",
       "type": "str"
      },
      {
       "default": "\"Bicubic\"",
       "name": "scalingFilter",
       "type": "str"
      }
     ],
     "returned": "FileLayer",
     "sourceCodeLine": 601,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief createFilterLayer creates a filter layer, which is a layer that represents a filter\napplied non-destructively.\n@param name name of the filterLayer\n@param filter the filter that this filter layer will us.\n@param selection the selection.\n@return a filter layer object.\n",
     "hash": "de76d4c6c5c12d5e24665322b2b32bc15b8de6e543751733b6ea07ff7f291bf8",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "createFilterLayer",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      },
      {
       "default": null,
       "name": "filter",
       "type": "Filter"
      },
      {
       "default": null,
       "name": "selection",
       "type": "Selection"
      }
     ],
     "returned": "FilterLayer",
     "sourceCodeLine": 611,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief createFillLayer creates a fill layer object, which is a layer\n@param name\n@param generatorName - name of the generation filter.\n@param configuration - the configuration for the generation filter.\n@param selection - the selection.\n@return a filllayer object.\n\n@code\nfrom krita import *\nd = Krita.instance().activeDocument()\ni = InfoObject();\ni.setProperty(\"pattern\", \"Cross01.pat\")\ns = Selection();\ns.select(0, 0, d.width(), d.height(), 255)\nn = d.createFillLayer(\"test\", \"pattern\", i, s)\nr = d.rootNode();\nc = r.childNodes();\nr.addChildNode(n, c[0])\nd.refreshProjection()\n@endcode\n",
     "hash": "aa6684428b87c8a02add9b7ffba565681e3fff83f30e65bc571e0e05b185af60",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "createFillLayer",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      },
      {
       "default": null,
       "name": "generatorName",
       "type": "str"
      },
      {
       "default": null,
       "name": "configuration",
       "type": "InfoObject"
      },
      {
       "default": null,
       "name": "selection",
       "type": "Selection"
      }
     ],
     "returned": "FillLayer",
     "sourceCodeLine": 635,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief createCloneLayer\n@param name\n@param source\n@return\n",
     "hash": "c057e20c9036760938c9d99236b63024500f5f898a8efb025f235e7761046ea7",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "createCloneLayer",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      },
      {
       "default": null,
       "name": "source",
       "type": "Node"
      }
     ],
     "returned": "CloneLayer",
     "sourceCodeLine": 643,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief createVectorLayer\nCreates a vector layer that can contain vector shapes.\n@param name the name of this layer.\n@return a VectorLayer.\n",
     "hash": "ab0c35a885440622dfc038211ddb0f9bbe1a64ad7142319d398a8abaa00de423",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "createVectorLayer",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      }
     ],
     "returned": "VectorLayer",
     "sourceCodeLine": 651,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief createFilterMask\nCreates a filter mask object that much like a filterlayer can apply a filter non-destructively.\n@param name the name of the layer.\n@param filter the filter assigned.\n@param selection_source a node from which the selection should be initialized\n@return a FilterMask\n",
     "hash": "fdcc4737142ba6e82a675cd2fb4ee1ec0926cf28006914f01b91115a2b9addb9",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "createFilterMask",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      },
      {
       "default": null,
       "name": "filter",
       "type": "Filter"
      },
      {
       "default": null,
       "name": "selection_source",
       "type": "Node"
      }
     ],
     "returned": "FilterMask",
     "sourceCodeLine": 671,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief createSelectionMask\nCreates a selection mask, which can be used to store selections.\n@param name - the name of the layer.\n@return a SelectionMask\n",
     "hash": "6d6b792e3336010fef305a6e94d0c30952c0491385ecc203e974ecddabac3a5b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "createSelectionMask",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      }
     ],
     "returned": "SelectionMask",
     "sourceCodeLine": 679,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief projection creates a QImage from the rendered image or\na cutout rectangle.\n",
     "hash": "3a1c69206bcea1836e9dfc9730f35dd42291eb458512fabc79e555466f25f1f8",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "projection",
     "parameters": [
      {
       "default": "0",
       "name": "x",
       "type": "int"
      },
      {
       "default": "0",
       "name": "y",
       "type": "int"
      },
      {
       "default": "0",
       "name": "w",
       "type": "int"
      },
      {
       "default": "0",
       "name": "h",
       "type": "int"
      }
     ],
     "returned": "QImage",
     "sourceCodeLine": 709,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief thumbnail create a thumbnail of the given dimensions.\n\nIf the requested size is too big a null QImage is created.\n\n@return a QImage representing the layer contents.\n",
     "hash": "54ec6d7507eae9d83f7b800e6ab0d317cd48fd723c2ec23237321ef5f630280f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "thumbnail",
     "parameters": [
      {
       "default": null,
       "name": "w",
       "type": "int"
      },
      {
       "default": null,
       "name": "h",
       "type": "int"
      }
     ],
     "returned": "QImage",
     "sourceCodeLine": 718,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "[low-level] Lock the image without waiting for all the internal job queues are processed\n\nWARNING: Don't use it unless you really know what you are doing! Use barrierLock() instead!\n\nWaits for all the **currently running** internal jobs to complete and locks the image\nfor writing. Please note that this function does **not** wait for all the internal\nqueues to process, so there might be some non-finished actions pending. It means that\nyou just postpone these actions until you unlock() the image back. Until then, then image\nmight easily be frozen in some inconsistent state.\n\nThe only sane usage for this function is to lock the image for **emergency**\nprocessing, when some internal action or scheduler got hung up, and you just want\nto fetch some data from the image without races.\n\nIn all other cases, please use barrierLock() instead!\n",
     "hash": "c0f17e5edd62d1c6ca82b646c65acf43932fb332ca25675cd2bb983a42e7acef",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "lock",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 738,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040300-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Unlocks the image and starts/resumes all the pending internal jobs. If the image\nhas been locked for a non-readOnly access, then all the internal caches of the image\n(e.g. lod-planes) are reset and regeneration jobs are scheduled.\n",
     "hash": "68271f378696044ecaf78bd9f96eceaea59c0f9a78868c90720dcce89c13b0c6",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "unlock",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 745,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040300-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Wait for all the internal image jobs to complete and return without locking\nthe image. This function is handy for tests or other synchronous actions,\nwhen one needs to wait for the result of his actions.\n",
     "hash": "f27f11080b9d0d367186003adbe42d220fbe5e39067e5cb439eddd5d640deca0",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "waitForDone",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 752,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040300-XX",
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Tries to lock the image without waiting for the jobs to finish\n\nSame as barrierLock(), but doesn't block execution of the calling thread\nuntil all the background jobs are finished. Instead, in case of presence of\nunfinished jobs in the queue, it just returns false\n\n@return whether the lock has been acquired\n",
     "hash": "bd64d2250ff3236673628669490deda7455fd99c1bb82cc749b923cf5e0e97dd",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "tryBarrierLock",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 763,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040300-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Why this should be used, When it should be used, How it should be used,\nand warnings about when not.\n",
     "hash": "7d84904635ea4f93d85b1c33d453386fb418d9bd7e1e9288fdc5a89a4684c34a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "isIdle",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 723,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Starts a synchronous recomposition of the projection: everything will\nwait until the image is fully recomputed.\n",
     "hash": "c71ec6f3e5876a61036a2d9f1deabea4f0a96e8c6462ac0cb87ad885ee3ae96c",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "refreshProjection",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 769,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief DEPRECATED - use guidesConfig() instead\nreplace all existing horizontal guides with the entries in the list.\n@param lines a list of floats containing the new guides.\n",
     "hash": "9bdaf6932bc32cbeb36b923debf5e2ad4959cbc9b21d0c235c6e846836d9d962",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setHorizontalGuides",
     "parameters": [
      {
       "default": null,
       "name": "lines",
       "type": "list[float]"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 776,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief DEPRECATED - use guidesConfig() instead\nreplace all existing horizontal guides with the entries in the list.\n@param lines a list of floats containing the new guides.\n",
     "hash": "147d13c851691a89a91cc42703ce092c2d5b885a8dc3b008271d59d867158c67",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setVerticalGuides",
     "parameters": [
      {
       "default": null,
       "name": "lines",
       "type": "list[float]"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 782,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief DEPRECATED - use guidesConfig() instead\nset guides visible on this document.\n@param visible whether or not the guides are visible.\n",
     "hash": "7a70c240e89213ac588364397c5ae3deaff651ac307c0618a79b33acdc63a11a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setGuidesVisible",
     "parameters": [
      {
       "default": null,
       "name": "visible",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 789,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief DEPRECATED - use guidesConfig() instead\nset guides locked on this document\n@param locked whether or not to lock the guides on this document.\n",
     "hash": "93351c668ac43c74918e3fd19dca9bfff590376835f398136abd2ff070dca208",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setGuidesLocked",
     "parameters": [
      {
       "default": null,
       "name": "locked",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 796,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief backgroundColor returns the current background color of the document. The color will\nalso include the opacity.\n\n@return QColor\n",
     "hash": "c68a8d4150e44a2f8b6ae4c3394d49c6a80f2e8c2d848172c1fced7ad42a8a12",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "backgroundColor",
     "parameters": [],
     "returned": "QColor",
     "sourceCodeLine": 200,
     "tagRef": {
      "available": [
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040002-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setBackGroundColor sets the background color of the document. It will trigger a projection\nupdate.\n\n@param color A QColor. The color will be converted from sRGB.\n@return bool\n",
     "hash": "63fde9c404f4150f0031112d4e218e802d37b5b649f9747c43d90bc311ac7b6d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setBackGroundColor",
     "parameters": [
      {
       "default": null,
       "name": "color",
       "type": "QColor"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 208,
     "tagRef": {
      "available": [
       "040002-XX"
      ],
      "updated": [
       "040002-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setBackgroundColor sets the background color of the document. It will trigger a projection\nupdate.\n\n@param color A QColor. The color will be converted from sRGB.\n@return bool\n",
     "hash": "f1b8a46a54abeebff0e5239362f3f1cfe79f9234d5423db2abef9200b3a66390",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setBackgroundColor",
     "parameters": [
      {
       "default": null,
       "name": "color",
       "type": "QColor"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 209,
     "tagRef": {
      "available": [
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040003-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief modified returns true if the document has unsaved modifications.\n",
     "hash": "5cc7eeabfe3d8d084e279d1e1d2842692ffe68f2e93db3780bd83f2025f41c9d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "modified",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 801,
     "tagRef": {
      "available": [
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040102-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief bounds return the bounds of the image\n@return the bounds\n",
     "hash": "05631d79a95ceaa574fec5bc9f8cf2ffcba18a203e9f416ff8ab1374f06b9c01",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "bounds",
     "parameters": [],
     "returned": "QRect",
     "sourceCodeLine": 813,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Import an image sequence of files from a directory. This will grab all\nimages from the directory and import them with a potential offset (firstFrame)\nand step (images on 2s, 3s, etc)\n@returns whether the animation import was successful\n",
     "hash": "f371f17b7b65e7022de81e5373b709d6afb74f272315ac3870c5b0b19ee2aeea",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "importAnimation",
     "parameters": [
      {
       "default": null,
       "name": "files",
       "type": "list[str]"
      },
      {
       "default": null,
       "name": "firstFrame",
       "type": "int"
      },
      {
       "default": null,
       "name": "step",
       "type": "int"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 826,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief frames per second of document\n@return the fps of the document\n",
     "hash": "7d5f158329880d868a7f0fddf04b44b8f6db5ead56c05de9471d7ae2214adae7",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "framesPerSecond",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 832,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief set frames per second of document\n",
     "hash": "d0cd10e7525c20929e6baa48eb00e51cd9452b395a48a7b5b91f724c17be081c",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setFramesPerSecond",
     "parameters": [
      {
       "default": null,
       "name": "fps",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 837,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief set start time of animation\n",
     "hash": "09e533b71baaa1f7d618966c38e66aff71a2e4c27bfafeecbe316917bbea0fda",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setFullClipRangeStartTime",
     "parameters": [
      {
       "default": null,
       "name": "startTime",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 842,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief get the full clip range start time\n@return full clip range start time\n",
     "hash": "625f4714077afbc263e08592c9140245367c48192d08fe610f6e6c3336defefd",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "fullClipRangeStartTime",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 848,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief set full clip range end time\n",
     "hash": "50cacd4b95729f24b915384e550484dd5c590f0959b6761db52f235109ce1431",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setFullClipRangeEndTime",
     "parameters": [
      {
       "default": null,
       "name": "endTime",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 853,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief get the full clip range end time\n@return full clip range end time\n",
     "hash": "db02aed0a970d57184aeddc83a8de7b4a24931ca179b76370db86578bdd74a70",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "fullClipRangeEndTime",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 859,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief get total frame range for animation\n@return total frame range for animation\n",
     "hash": "1d589e8182f86851c120a899bca4d85efd2be9127e3d6a702de4040ec44114f2",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "animationLength",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 865,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief set temporary playback range of document\n",
     "hash": "38a277519f0f7d732521812c310b85beabb9fb49f8d74a570401ff57f13d8198",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setPlayBackRange",
     "parameters": [
      {
       "default": null,
       "name": "start",
       "type": "int"
      },
      {
       "default": null,
       "name": "stop",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 870,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief get start time of current playback\n@return start time of current playback\n",
     "hash": "000513aa48a77518e785c1992e43eca359d064af9b5b6a8531ea618497e7d5cb",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "playBackStartTime",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 876,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief get end time of current playback\n@return end time of current playback\n",
     "hash": "ae9ce79e8ac87fb8f9123567c2c9221d67cfd086fdd5aef1f739c9945a742893",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "playBackEndTime",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 882,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief get current frame selected of animation\n@return current frame selected of animation\n",
     "hash": "d77135d65777303ea7a5452ce6d5a094f4011e4ef9e7e23abaab9ae6290861ad",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "currentTime",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 888,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief set current time of document's animation\n",
     "hash": "7fd878130bc36000b2bceee0b1410f73fc3771ec18ea66faed72ef35a022aec6",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setCurrentTime",
     "parameters": [
      {
       "default": null,
       "name": "time",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 893,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief nodeByUniqueID searches the node tree for a node with the given name and returns it.\n@param uuid the unique id of the node\n@return the node with the given unique id, or 0 if no node is found.\n",
     "hash": "d2b9c9808e9ee23d080a88db06581f2433269077c41e74d540f0605c0045813f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "nodeByUniqueID",
     "parameters": [
      {
       "default": null,
       "name": "id",
       "type": "QUuid"
      }
     ],
     "returned": "Node",
     "sourceCodeLine": 123,
     "tagRef": {
      "available": [
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040405-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief createTransformMask\nCreates a transform mask, which can be used to apply a transformation non-destructively.\n@param name - the name of the layer mask.\n@return a TransformMask\n",
     "hash": "b1937b4b6fda554b101ada54b05415fcc36904af63e3851117edec65a431b581",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "createTransformMask",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      }
     ],
     "returned": "TransformMask",
     "sourceCodeLine": 695,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief annotationTypes returns the list of annotations present in the document.\nEach annotation type is unique.\n",
     "hash": "d4534647c8931d05a2f7ef96de96cabaabaa08dd5bbde61b7a9ecee1e43d1742",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "annotationTypes",
     "parameters": [],
     "returned": "list[str]",
     "sourceCodeLine": 899,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief annotationDescription gets the pretty description for the current annotation\n@param type the type of the annotation\n@return a string that can be presented to the user\n",
     "hash": "5c56b9389338d1a0879a579fa26db945231c9d8ca3121aa2280dfdf07e0d4403",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "annotationDescription",
     "parameters": [
      {
       "default": null,
       "name": "type",
       "type": "str"
      }
     ],
     "returned": "str",
     "sourceCodeLine": 906,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief annotation the actual data for the annotation for this type. It's a simple\nQByteArray, what's in it depends on the type of the annotation\n@param type the type of the annotation\n@return a bytearray, possibly empty if this type of annotation doesn't exist\n",
     "hash": "5927404e01ab080cf10ec6fd40a0d6c8e0a1ed32c5739eb885aded39b8a8f0bd",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "annotation",
     "parameters": [
      {
       "default": null,
       "name": "type",
       "type": "str"
      }
     ],
     "returned": "QByteArray",
     "sourceCodeLine": 914,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setAnnotation Add the given annotation to the document\n@param type the unique type of the annotation\n@param description the user-visible description of the annotation\n@param annotation the annotation itself\n",
     "hash": "1cbecac1680a4dcf30f35a41d4987017f88b3cb9822a97d51903e881be48d8c4",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setAnnotation",
     "parameters": [
      {
       "default": null,
       "name": "type",
       "type": "str"
      },
      {
       "default": null,
       "name": "description",
       "type": "str"
      },
      {
       "default": null,
       "name": "annotation",
       "type": "QByteArray"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 922,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief removeAnnotation remove the specified annotation from the image\n@param type the type defining the annotation\n",
     "hash": "ba4ce10a0ee5e34f710b458b3d41c2c6f13267e13d448ba08b05531957fcd91b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "removeAnnotation",
     "parameters": [
      {
       "default": null,
       "name": "type",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 928,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setModified sets the modified status of the document\n@param modified if true, the document is considered modified and closing it will ask for saving.\n",
     "hash": "e8a9b2e77d0effc025510b4b0d21c4950b110162053e1f78441c63eb0d996d87",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setModified",
     "parameters": [
      {
       "default": null,
       "name": "modified",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 807,
     "tagRef": {
      "available": [
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050102-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief createTransparencyMask\nCreates a transparency mask, which can be used to assign transparency to regions.\n@param name - the name of the layer.\n@return a TransparencyMask\n",
     "hash": "723f6df276b8132fd43c29fe06dc5ab55d0eddbff6aa483f1036baad0760d05a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "createTransparencyMask",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      }
     ],
     "returned": "TransparencyMask",
     "sourceCodeLine": 687,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief createColorizeMask\nCreates a colorize mask, which can be used to color fill via keystrokes.\n@param name - the name of the layer.\n@return a TransparencyMask\n",
     "hash": "69a43b1054e38a72d074e92342d55c12097faf93622021e2110f93affd92f8b2",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "createColorizeMask",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      }
     ],
     "returned": "ColorizeMask",
     "sourceCodeLine": 703,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Allow to activate/deactivate autosave for document\nWhen activated, it will use default Krita autosave settings\nIt means that even when autosave is set to True, under condition Krita will not proceed to automatic save of document:\n- autosave is globally deactivated\n- document is read-only\n\nBeing able to deactivate autosave on a document can make sense when a plugin use internal document\n(document is not exposed in a view, only created for intenal process purposes)\n\n@param active True to activate autosave\n",
     "hash": "cc190327b7723815c7026508be85da9146189e16725b5199f60a13d0c0f2e442",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setAutosave",
     "parameters": [
      {
       "default": null,
       "name": "active",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 942,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Return autosave status for document\nNotes:\n- returned value is Autosave flag value\n  Even if autosave is set to True, under condition Krita will not proceed to automatic save of document:\n  - autosave is globally deactivated\n  - document is read-only\n- When autosave is set to False, Krita never execute automatic save for document\n\n@return True if autosave is active, otherwise False\n",
     "hash": "ef23bae5ce33dc5886c1a0e9dee612a315511d451b8aefd76249c5b0fafb2219",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "autosave",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 955,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns a GuidesConfig guides configuration for current document\n@return a GuidesConfig object with guides configuration\n",
     "hash": "f20dcccc971f3c61149f03cbed4f5a814f5996d1f887dfe12678df8a9b042cdb",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "guidesConfig",
     "parameters": [],
     "returned": "GuidesConfig",
     "sourceCodeLine": 961,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set guides configuration for current document\n@param guidesConfig a GuidesConfig object to apply for guides configuration\n\nTo modify/set guides property on a document\n@code\n# get document (create one or get active one for example)\nnewDoc = Krita.instance().createDocument(500, 500, \"Test\", \"RGBA\", \"U8\", \"\", 300)\n\n# retrieve document guides configuration\nnewDocGuides = newDoc.guidesConfig()\n\n# update properties\nnewDocGuides.setColor(QColor('#ff00ff'))\nnewDocGuides.setLineType('dotted')\nnewDocGuides.setVisible(True)\nnewDocGuides.setLocked(True)\nnewDocGuides.setSnap(True)\nnewDocGuides.setHorizontalGuides([100,200])\n\n# set guides configuration to document\nnewDoc.setGuidesConfig(newDocGuides)\n@endcode\n",
     "hash": "53c7178f3cd2686d27c42f66f5df00f5871cb27a7c4c3d84ac4c05ce7deac3a6",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setGuidesConfig",
     "parameters": [
      {
       "default": null,
       "name": "guidesConfig",
       "type": "GuidesConfig"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 987,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns a GridConfig grid configuration for current document\n@return a GridConfig object with grid configuration\n",
     "hash": "b1c9ba446e2fedc502c5d2af0d120c60b34bed0a6f36b21ccd2570ab863f983e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "gridConfig",
     "parameters": [],
     "returned": "GridConfig",
     "sourceCodeLine": 993,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set grid configuration for current document\n@param gridConfig a GridConfig object to apply for grid configuration\n\nTo modify/set grid property on a document\n@code\n# get document (create one or get active one for example)\nnewDoc = Krita.instance().createDocument(500, 500, \"Test\", \"RGBA\", \"U8\", \"\", 300)\n\n# retrieve document grid configuration\nnewDocGrid = newDoc.gridConfig()\n\n# update properties\nnewDocGrid.setColorMain(QColor('#ff00ff'))\nnewDocGrid.setLineTypeMain('dashed')\nnewDocGrid.setVisible(True)\nnewDocGrid.setAngleLeft(30)\nnewDocGrid.setAngleRight(15)\nnewDocGrid.setType('isometric')\n\n# set grid configuration to document\nnewDoc.setGridConfig(newDocGrid)\n@endcode\n",
     "hash": "324e9fb0858e08a14fdcd97d0839dcd022f3871bcd5af68ea75167876298e339",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setGridConfig",
     "parameters": [
      {
       "default": null,
       "name": "gridConfig",
       "type": "GridConfig"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 1019,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Return current audio level for document\n@return A value between 0.0 and 1.0 (1.0 = 100%)\n",
     "hash": "ccb4ea2c0e849e4394b2c1951a859ca4ce08552a0b811b69d949cdb920ee9b6a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "audioLevel",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 1025,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set current audio level for document\n@param level Audio volumne between 0.0 and 1.0 (1.0 = 100%)\n",
     "hash": "5a7b35676f8fe1ff83ccc12c2d824ce07b712453c2f760de4d9d58d09a0882e0",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setAudioLevel",
     "parameters": [
      {
       "default": null,
       "name": "level",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 1031,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Return a list of current audio tracks for document\n@return List of absolute path/file name of audio files\n",
     "hash": "307ff0f3b68fea7d8ba48aef8dc90cb09cc18dd8c55f9e5444693fd0dc93b2d6",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "audioTracks",
     "parameters": [],
     "returned": "list[str]",
     "sourceCodeLine": 1037,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set a list of audio tracks for document\nNote: the function allows to add more than one file while from Krita's UI, importing a file\nwill replace the complete list\n\nThe reason why this method let the ability to provide more than one file is related to\nthe internal's Krita method from KisDocument class:\nvoid KisDocument::setAudioTracks(QVector<QFileInfo> f)\n\n@param files List of absolute path/file name of audio files\n@return True if all files from list have been added, otherwise False (a file was not found)\n",
     "hash": "47ec9275b5136f4d7eb1e4e21c1eb9f4d3df444448e414b5ae2088d4fd781a98",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setAudioTracks",
     "parameters": [
      {
       "default": null,
       "name": "files",
       "type": "list[str]"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 1051,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    }
   ],
   "name": "Document",
   "sourceCodeLine": 37,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX",
     "040002-XX",
     "040003-XX",
     "040102-XX",
     "040200-XX",
     "040405-XX",
     "050000-XX",
     "050102-XX",
     "050200-XX",
     "master"
    ]
   }
  },
  "DoubleParseSpinBox": {
   "description": "@brief A wrapper around KisDoubleParseSpinBox, which is a cleverer\ndoubleSpinBox, able to parse arithmetic expressions. The widget itself is\naccessed with the widget() function.\n\nUse this spinbox instead of the basic one from Qt if you want it to be able\nto parse arithmetic expressions.\n",
   "extend": "QObject",
   "fileName": "DoubleParseSpinBox.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief Get the internal KisDoubleParseSpinBox as a QWidget, so it may be\nadded to a UI\n\n@return the internal KisDoubleParseSpinBox as a QWidget\n",
     "hash": "43127a52114281a0901d062b594477633322d2099d39d7b250a29d85b3aa2d75",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "widget",
     "parameters": [],
     "returned": "QDoubleSpinBox",
     "sourceCodeLine": 40,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief This is a reimplementation of @ref QDoubleSpinBox::stepBy that\nuses @ref setValue\n@param steps Number of steps that the value should change\n",
     "hash": "97ae9a522b1771123fdf9e5e6c60e454d2b3ab32d3e68d0169394d3774b613ad",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "stepBy",
     "parameters": [
      {
       "default": null,
       "name": "steps",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 47,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set the value of the spinbox\n\nThis reimplementation also tries to clear the current expression and\nwarning message whenever possible. This will happen when the new value\nis different from the current one and the line edit has not the focus\nor it is read-only. One can force the reset also by passing true to the\n@p overwriteExpression parameter.\n\n@param value The new value\n@param overwriteExpression Get if the expression in the edit field\n(and the warning message) should be reset to reflect the new value.\nThe default is false so that if the user is editing the expression\nit won't be disrupted by any default call to this function\n",
     "hash": "16da04194bfedd70f3b99d2496f73cd611e23bf93e21c4beb2493e431924de9d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setValue",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "float"
      },
      {
       "default": "False",
       "name": "overwriteExpression",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 63,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Get if the last expression entered is a valid one\n@retval true if the last expression entered is valid\n@retval false otherwise\n",
     "hash": "98fb9df5f5e7bcb85bc8056ea50a7a278e37a9b6ae87dc231996d432420e0ce9",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "isLastValid",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 69,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief This virtual function is similar to cleanText(). But child classes\nmay reimplement it to further process (\"clean up\") the expression.\n@return The processed expression\n",
     "hash": "5f30c5d8551dbf6c80f02179d83088010fec87eb6559219eab35ff5010b440f7",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": true,
     "name": "veryCleanText",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 75,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief signal emitted when the last parsed expression is not valid.\n",
     "hash": "1fabc5ad39d468c511e4c06aea00a5fdabe567ddbdc3ee6dd96212a8315c7aee",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "errorWhileParsing",
     "parameters": [
      {
       "default": null,
       "name": "expr",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 81,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief signal emitted when the last parsed expression is valid and\nthe expression before was not valid.\n",
     "hash": "50877b2c19a2e137699d069658332f4205b2edb9b3143e950f8f1ea02e5e785d",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "noMoreParsingError",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 86,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    }
   ],
   "name": "DoubleParseSpinBox",
   "sourceCodeLine": 23,
   "tagRef": {
    "available": [
     "master"
    ],
    "updated": [
     "master"
    ]
   }
  },
  "DoubleSliderSpinBox": {
   "description": "@brief This class is a wrapper around KisDoubleSliderSpinBox, a spinbox in\nwhich you can click and drag to set the value, with a slider like bar\ndisplayed inside. The widget itself is accessed with the widget() function.\n\n@see SliderSpinBox\n",
   "extend": "DoubleParseSpinBox",
   "fileName": "SliderSpinBox.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief Get the internal KisDoubleSliderSpinBox as a QWidget, so it may be\nadded to a UI\n\n@return the internal KisDoubleSliderSpinBox as a QWidget\n",
     "hash": "fb1f1427116308eb0a7caab57a88eabd2bbb073ffea0b1e36a87da817b0ff3fd",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "widget",
     "parameters": [],
     "returned": "QWidget",
     "sourceCodeLine": 231,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "604a449f7cbd4297834ee7a4c2ef1edf4f4e940f302129047efeff2aac5a274c",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "fastSliderStep",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 233,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "ca3cbb10435e301af9ad5503cd5a17e2b567d462a8d975286d74e2e33a1bda7b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "softMinimum",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 234,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "9cb165a4a0e4364fb8523faed005e6132dd7f43ad1c772e7891a3173b27c5479",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "softMaximum",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 235,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "b0c839364fc6520bd028e2ee2820e91e605854fa9603896450014caa608de7b4",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "isDragging",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 236,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "92ceffb9fd7f4dd37ce8c9b6cba85409739bfc3c7bc6cf9da97ee1f9d89c0a89",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setValue",
     "parameters": [
      {
       "default": null,
       "name": "newValue",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 237,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set the minimum and the maximum values of the range\n\nThe soft range will be adapted to fit inside the range\nThe number of decimals used can be changed with the newNumberOfDecimals\nparameter\n@param newMinimum the new minimum value\n@param newMaximum the new maximum value\n@param newNumberOfDecimals the new number of decimals\n@param computeNewFastSliderStep true if a new \"fast slider step\"\nmust be computed based on the range\n@see setMinimum(qreal)\n@see setMaximum(qreal)\n",
     "hash": "84d17339502bc8f8fe49fd6058eb2ac1cb862ce7cd74ce937f228dbd8767f50d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setRange",
     "parameters": [
      {
       "default": null,
       "name": "newMinimum",
       "type": "float"
      },
      {
       "default": null,
       "name": "newMaximum",
       "type": "float"
      },
      {
       "default": "0",
       "name": "newNumberOfDecimals",
       "type": "int"
      },
      {
       "default": "True",
       "name": "computeNewFastSliderStep",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 252,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "9f52d16e4f82a9e6088671efc38ada2b403140c7557a34f305c224048c114564",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setMinimum",
     "parameters": [
      {
       "default": null,
       "name": "newMinimum",
       "type": "float"
      },
      {
       "default": "True",
       "name": "computeNewFastSliderStep",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 253,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "a23f3ec8b05d70c69036195a3cb5f6564d5a538af59c43b347f5bd285466e1bf",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setMaximum",
     "parameters": [
      {
       "default": null,
       "name": "newMaximum",
       "type": "float"
      },
      {
       "default": "True",
       "name": "computeNewFastSliderStep",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 254,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "e7bfec6e421f5e279e83444cc1aa1671d8e3107cc25d56b9bb72c25c6aece0bd",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setExponentRatio",
     "parameters": [
      {
       "default": null,
       "name": "newExponentRatio",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 255,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "e86d129c10ee0e8c61549f7c6621d3a84b77361eba189e7a76072e7612bf1103",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setBlockUpdateSignalOnDrag",
     "parameters": [
      {
       "default": null,
       "name": "newBlockUpdateSignalOnDrag",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 256,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "4c3c7a168ad96b1cf7b4c3cf7cc25ade8feaa9fc896eae4d00fa5b4280b09b69",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setFastSliderStep",
     "parameters": [
      {
       "default": null,
       "name": "newFastSliderStep",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 257,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "258f428059f43c5187dfc44d03bd122e4422e03b8e9e24d35440cdf390b41fbd",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setSoftRange",
     "parameters": [
      {
       "default": null,
       "name": "newSoftMinimum",
       "type": "float"
      },
      {
       "default": null,
       "name": "newSoftMaximum",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 258,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "2b2f59f760be071af697570ca07a47f3432144a8cd7fc46717c94dfcb1c56ee7",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setSoftMinimum",
     "parameters": [
      {
       "default": null,
       "name": "newSoftMinimum",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 259,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "13375af0d4e31d20d68fa814a2ae150f26b4df893d3c87753d520d007ba90c33",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setSoftMaximum",
     "parameters": [
      {
       "default": null,
       "name": "newSoftMaximum",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 260,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "d6cd904a7da6d798054358e13bc1c4627f080a6522d82c0c5de54be5c95091ca",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "draggingFinished",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 263,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    }
   ],
   "name": "DoubleSliderSpinBox",
   "sourceCodeLine": 214,
   "tagRef": {
    "available": [
     "master"
    ],
    "updated": [
     "master"
    ]
   }
  },
  "Extension": {
   "description": "An Extension is the base for classes that extend Krita. An Extension\nis loaded on startup, when the setup() method will be executed.\n\nThe extension instance should be added to the Krita Application object\nusing Krita.instance().addViewExtension or Application.addViewExtension\nor Scripter.addViewExtension.\n\nExample:\n\n@code\nimport sys\nfrom PyQt5.QtGui import *\nfrom PyQt5.QtWidgets import *\nfrom krita import *\nclass HelloExtension(Extension):\n\ndef __init__(self, parent):\n    super().__init__(parent)\n\ndef hello(self):\n    QMessageBox.information(QWidget(), \"Test\", \"Hello! This is Krita \" + Application.version())\n\ndef setup(self):\n    qDebug(\"Hello Setup\")\n\ndef createActions(self, window)\n    action = window.createAction(\"hello\")\n    action.triggered.connect(self.hello)\n\nScripter.addExtension(HelloExtension(Krita.instance()))\n\n@endcode\n",
   "extend": "QObject",
   "fileName": "Extension.h",
   "methods": [
    {
     "accesType": "public",
     "description": "Override this function to setup your Extension. You can use it to integrate\nwith the Krita application instance.\n",
     "hash": "0c1a140ddb5be8bfdbd513189a9a074a8d770c2b1b1badcbfe1d28b4be578179",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": true,
     "name": "setup",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 65,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "a523761ec8f7c371a3918568745a41ff0f8721396b90a7e9e1b9b5e2873e3113",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": true,
     "name": "createActions",
     "parameters": [
      {
       "default": null,
       "name": "window",
       "type": "Window"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 67,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    }
   ],
   "name": "Extension",
   "sourceCodeLine": 49,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX"
    ]
   }
  },
  "FileLayer": {
   "description": "@brief The FileLayer class\nA file layer is a layer that can reference an external image\nand show said reference in the layer stack.\n\nIf the external image is updated, Krita will try to update the\nfile layer image as well.\n",
   "extend": "Node",
   "fileName": "FileLayer.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief type Krita has several types of nodes, split in layers and masks. Group\nlayers can contain other layers, any layer can contain masks.\n\n@return \"filelayer\"\n",
     "hash": "86b1820bfd52390e0a54ec74c0ca9b75535c5514dd567413f7b626d89358b789",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "type",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 49,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setProperties\nChange the properties of the file layer.\n@param fileName - A String containing the absolute file name.\n@param scalingMethod - a string with the scaling method, defaults to \"None\",\n other options are \"ToImageSize\" and \"ToImagePPI\"\n@param scalingFilter - a string with the scaling filter, defaults to \"Bicubic\",\n other options are \"Hermite\", \"NearestNeighbor\", \"Bilinear\", \"Bell\", \"BSpline\", \"Lanczos3\", \"Mitchell\"\n",
     "hash": "a864c738f235db5fa6d79bff568824a54e296063e29a23ae6c2b07ec0cee5abc",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setProperties",
     "parameters": [
      {
       "default": null,
       "name": "fileName",
       "type": "str"
      },
      {
       "default": "\"None\"",
       "name": "scalingMethod",
       "type": "str"
      },
      {
       "default": "\"Bicubic\"",
       "name": "scalingFilter",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 60,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief path\n@return A QString with the full path of the referenced image.\n",
     "hash": "ada1a4fb11abae51f5344c0c885a01325fbd9393379eec902a4d3fa928a1ff09",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "path",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 71,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief scalingMethod\nreturns how the file referenced is scaled.\n@return one of the following:\n<ul>\n <li> None - The file is not scaled in any way.\n <li> ToImageSize - The file is scaled to the full image size;\n <li> ToImagePPI - The file is scaled by the PPI of the image. This keep the physical dimensions the same.\n</ul>\n",
     "hash": "68df0efa02003f351568daaccd460ef01aad3047367a9923390d5b0ae482f015",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "scalingMethod",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 83,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief makes the file layer to reload the connected image from disk\n",
     "hash": "7d418cd851ffab80a3b8e97549ab6505c8627adaae4bd71d8a1d6b89f9c75b0d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "resetCache",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 65,
     "tagRef": {
      "available": [
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040102-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief scalingFilter\nreturns the filter with which the file referenced is scaled.\n",
     "hash": "59ecb5d9fb3b7b03c99ebb933639be6513209023fcf14972af0ff0403c198938",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "scalingFilter",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 89,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    }
   ],
   "name": "FileLayer",
   "sourceCodeLine": 26,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX",
     "040102-XX",
     "050200-XX"
    ]
   }
  },
  "FillLayer": {
   "description": "@brief The FillLayer class\nA fill layer is much like a filter layer in that it takes a name\nand filter. It however specializes in filters that fill the whole canvas,\nsuch as a pattern or full color fill.\n",
   "extend": "Node",
   "fileName": "FillLayer.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief type Krita has several types of nodes, split in layers and masks. Group\nlayers can contain other layers, any layer can contain masks.\n\n@return The type of the node. Valid types are:\n<ul>\n <li>paintlayer\n <li>grouplayer\n <li>filelayer\n <li>filterlayer\n <li>filllayer\n <li>clonelayer\n <li>vectorlayer\n <li>transparencymask\n <li>filtermask\n <li>transformmask\n <li>selectionmask\n <li>colorizemask\n</ul>\n\nIf the Node object isn't wrapping a valid Krita layer or mask object, and\nempty string is returned.\n",
     "hash": "f3418964c605e81bbae4cf2728b5e2bedcdd5226f677c3c0233c38f35c7e7362",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": true,
     "name": "type",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 74,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setGenerator set the given generator for this fill layer\n@param generatorName \"pattern\" or \"color\"\n@param filterConfig a configuration object appropriate to the given generator plugin\n@return true if the generator was correctly created and set on the layer\n",
     "hash": "2c35f6b37950e72e1d688af4974da89d014e286742d3e1791e56b18e0dac2076",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setGenerator",
     "parameters": [
      {
       "default": null,
       "name": "generatorName",
       "type": "str"
      },
      {
       "default": null,
       "name": "filterConfig",
       "type": "InfoObject"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 82,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "7f34b70867434d91b524d6efb0e9d582ad4fa7ff42d7c6e602bb5caaff50fffc",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "generatorName",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 83,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "a9607b980103545ad7f3567ab46ee8b2ab2083fe975e1ff7fdae3ffa039d512b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "filterConfig",
     "parameters": [],
     "returned": "InfoObject",
     "sourceCodeLine": 85,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    }
   ],
   "name": "FillLayer",
   "sourceCodeLine": 24,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX"
    ]
   }
  },
  "Filter": {
   "description": "Filter: represents a filter and its configuration. A filter is identified by\nan internal name. The configuration for each filter is defined as an InfoObject:\na map of name and value pairs.\n\nCurrently available filters are:\n\n'autocontrast', 'blur', 'bottom edge detections', 'brightnesscontrast', 'burn', 'colorbalance', 'colortoalpha', 'colortransfer',\n'desaturate', 'dodge', 'emboss', 'emboss all directions', 'emboss horizontal and vertical', 'emboss horizontal only',\n'emboss laplascian', 'emboss vertical only', 'gaussian blur', 'gaussiannoisereducer', 'gradientmap', 'halftone', 'hsvadjustment',\n'indexcolors', 'invert', 'left edge detections', 'lens blur', 'levels', 'maximize', 'mean removal', 'minimize', 'motion blur',\n'noise', 'normalize', 'oilpaint', 'perchannel', 'phongbumpmap', 'pixelize', 'posterize', 'raindrops', 'randompick',\n'right edge detections', 'roundcorners', 'sharpen', 'smalltiles', 'sobel', 'threshold', 'top edge detections', 'unsharp',\n'wave', 'waveletnoisereducer']\n",
   "extend": "QObject",
   "fileName": "Filter.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief name the internal name of this filter.\n@return the name.\n",
     "hash": "1a03134f3f34b38429a8551d383f2805dce1c54fcc3dc333c3a183afae5b9fd9",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "name",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 52,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setName set the filter's name to the given name.\n",
     "hash": "0a8a7750767322b852c0313c915509f9743fc819f3ca4dc73c478e6856a352b2",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setName",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 57,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the configuration object for the filter\n",
     "hash": "5d97c5d6c7bc11c868b7ea341c034077ce8a2e412f5e9bdc498098f44d44f4d8",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "configuration",
     "parameters": [],
     "returned": "InfoObject",
     "sourceCodeLine": 62,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setConfiguration set the configuration object for the filter\n",
     "hash": "e399972bd1a262674e9501330034c3f59f74a0ffe72d97b45f473dd652b710a4",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setConfiguration",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "InfoObject"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 67,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Apply the filter to the given node.\n@param node the node to apply the filter to\n@param x\n@param y\n@param w\n@param h describe the rectangle the filter should be apply.\nThis is always in image pixel coordinates and not relative to the x, y\nof the node.\n@return @c true if the filter was applied successfully, or\n@c false if the filter could not be applied because the node is locked or\ndoes not have an editable paint device.\n",
     "hash": "e97601a59afe83ef81fe57beb631e2f43ff0f17367b94e901bf02f6760908464",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "apply",
     "parameters": [
      {
       "default": null,
       "name": "node",
       "type": "Node"
      },
      {
       "default": null,
       "name": "x",
       "type": "int"
      },
      {
       "default": null,
       "name": "y",
       "type": "int"
      },
      {
       "default": null,
       "name": "w",
       "type": "int"
      },
      {
       "default": null,
       "name": "h",
       "type": "int"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 82,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief startFilter starts the given filter on the given node.\n\n@param node the node to apply the filter to\n@param x\n@param y\n@param w\n@param h describe the rectangle the filter should be apply.\nThis is always in image pixel coordinates and not relative to the x, y\nof the node.\n",
     "hash": "44bb3e07184838756b6e936f77a498a4449083068c8934c753eb56ec3bab8f5d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "startFilter",
     "parameters": [
      {
       "default": null,
       "name": "node",
       "type": "Node"
      },
      {
       "default": null,
       "name": "x",
       "type": "int"
      },
      {
       "default": null,
       "name": "y",
       "type": "int"
      },
      {
       "default": null,
       "name": "w",
       "type": "int"
      },
      {
       "default": null,
       "name": "h",
       "type": "int"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 95,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX"
      ]
     }
    }
   ],
   "name": "Filter",
   "sourceCodeLine": 30,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX"
    ]
   }
  },
  "FilterLayer": {
   "description": "@brief The FilterLayer class\nA filter layer will, when compositing, take the composited\nimage up to the point of the location of the filter layer\nin the stack, create a copy and apply a filter.\n\nThis means you can use blending modes on the filter layers,\nwhich will be used to blend the filtered image with the original.\n\nSimilarly, you can activate things like alpha inheritance, or\nyou can set grayscale pixeldata on the filter layer to act as\na mask.\n\nFilter layers can be animated.\n",
   "extend": "Node",
   "fileName": "FilterLayer.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief type Krita has several types of nodes, split in layers and masks. Group\nlayers can contain other layers, any layer can contain masks.\n\n@return \"filterlayer\"\n",
     "hash": "84468f8de8e87a04137193e93799023675556a1a28d1f9c0357cc4cd90d69e89",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "type",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 50,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "b07f0494e7b1eb72dbb1539f06a44730dfef983138b8004c802b39ed7b7b3ba3",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setFilter",
     "parameters": [
      {
       "default": null,
       "name": "filter",
       "type": "Filter"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 52,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "d45ea7985ad15026bb14e77fae8cb0aa2f5c998964fc1af725c82dc1d42c4b23",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "filter",
     "parameters": [],
     "returned": "Filter",
     "sourceCodeLine": 54,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    }
   ],
   "name": "FilterLayer",
   "sourceCodeLine": 33,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX"
    ]
   }
  },
  "FilterMask": {
   "description": "@brief The FilterMask class\nA filter mask, unlike a filter layer, will add a non-destructive filter\nto the composited image of the node it is attached to.\n\nYou can set grayscale pixeldata on the filter mask to adjust where the filter is applied.\n\nFiltermasks can be animated.\n",
   "extend": "Node",
   "fileName": "FilterMask.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief type Krita has several types of nodes, split in layers and masks. Group\nlayers can contain other layers, any layer can contain masks.\n\n@return The type of the node. Valid types are:\n<ul>\n <li>paintlayer\n <li>grouplayer\n <li>filelayer\n <li>filterlayer\n <li>filllayer\n <li>clonelayer\n <li>vectorlayer\n <li>transparencymask\n <li>filtermask\n <li>transformmask\n <li>selectionmask\n <li>colorizemask\n</ul>\n\nIf the Node object isn't wrapping a valid Krita layer or mask object, and\nempty string is returned.\n",
     "hash": "633f683b898b1b1f6c4eff60e14efd2f85debc1038e61df8e173cf42b9b8a4d2",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "type",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 62,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "b07f0494e7b1eb72dbb1539f06a44730dfef983138b8004c802b39ed7b7b3ba3",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setFilter",
     "parameters": [
      {
       "default": null,
       "name": "filter",
       "type": "Filter"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 64,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "d45ea7985ad15026bb14e77fae8cb0aa2f5c998964fc1af725c82dc1d42c4b23",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "filter",
     "parameters": [],
     "returned": "Filter",
     "sourceCodeLine": 65,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    }
   ],
   "name": "FilterMask",
   "sourceCodeLine": 28,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX"
    ]
   }
  },
  "GridConfig": {
   "description": "The GridConfig class encapsulates a Krita Guides configuration.\n\n",
   "extend": "QObject",
   "fileName": "GridConfig.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief Returns grid visibility for document.\n@return If grid is visible, return True.\n",
     "hash": "f0d034d52be596fb4fccede5e9699b4b01c2eeb66914f82e8119fd7cb472a530",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "visible",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 41,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set grid visibility for document.\n@param snap Set to True to get grid visible.\n",
     "hash": "13046508207c321152ed23ef7c35114d86a0d49895eab78481a70ee97a5106ae",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setVisible",
     "parameters": [
      {
       "default": null,
       "name": "visible",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 47,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns snap to grid status for document.\n@return If snap to grid is active on document, return True.\n",
     "hash": "12d79e3f636fea36e34d0539f25d4e5d6e7466f20a71c369a19b8115178620c5",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "snap",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 53,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Activate or deactivate snap to grid for document\n@param snap Set to True to activate snap to grid.\n",
     "hash": "e1720e28605cfc91bc929e06c333dab4e100cefa2c3776dcb9bf8e7582aad009",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setSnap",
     "parameters": [
      {
       "default": null,
       "name": "snap",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 59,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns grid offset (in pixels, from origin) for document.\n@return A QPoint that define X and Y offset.\n",
     "hash": "be002abbfa546abd3a058099f10067268333f0252496eb7f2e75567034d27858",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "offset",
     "parameters": [],
     "returned": "QPoint",
     "sourceCodeLine": 65,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Define grid offset (in pixels, from origin) for document.\n@param offset A QPoint that define X and Y offset (X and Y in range [0 - 500])\n",
     "hash": "d017d378e9db77b322251b03e04fa6c83014359cf547ae36f18a9911200b1e60",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setOffset",
     "parameters": [
      {
       "default": null,
       "name": "offset",
       "type": "QPoint"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 71,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns grid spacing (in pixels) for document.\nSpacing value is used for grid type \"rectangular\".\n@return A QPoint that define X and Y spacing.\n",
     "hash": "5f127ec3498098ee7592562161f97f50ea4f0a309304480f42784c4d10fcb4d7",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "spacing",
     "parameters": [],
     "returned": "QPoint",
     "sourceCodeLine": 78,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set grid spacing (in pixels) for document.\nSpacing value is used for grid type \"rectangular\".\n@param spacing A QPoint that define X and Y spacing  (minimum value for X and Y is 1)\n",
     "hash": "dd7a473513bcc6b161db1bfd0a9373764bbf4781a3d059a9a2668dbcf4a9be1d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setSpacing",
     "parameters": [
      {
       "default": null,
       "name": "spacing",
       "type": "QPoint"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 85,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns if horizontal grid spacing is active.\nSpacing value is used for grid type \"rectangular\".\n\n@returns a boolean which indicate if horizontal grid is active or not\n",
     "hash": "1160df34c7d22f3082c92ea41218ab0b5f7bd4006d085dc2ce6c9b3389c48d47",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "spacingActiveHorizontal",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 93,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set horizontal grid spacing active.\nSpacing value is used for grid type \"rectangular\".\n\n@param active True to activate horizontal spacing, False to deactivate it.\n",
     "hash": "491430ac6bd26a2c9c9dcecfca948de0fec6afcba3c702253187a9779821106e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setSpacingActiveHorizontal",
     "parameters": [
      {
       "default": null,
       "name": "active",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 101,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns if vertical grid spacing is active.\nSpacing value is used for grid type \"rectangular\".\n\n@returns a boolean which indicate if vertical grid is active or not\n",
     "hash": "417a8d4a7ffdfac2b62c142254dcd2f206a25e2fdf2ed27f4c479c986939887d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "spacingActiveVertical",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 109,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set vertical grid spacing active.\nSpacing value is used for grid type \"rectangular\".\n\n@param active True to activate vertical spacing, False to deactivate it.\n",
     "hash": "0a7fc6af9f5d4b4eb91877cf591be999bfde21d0ced888c48799e7fc0113e4a8",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setSpacingActiveVertical",
     "parameters": [
      {
       "default": null,
       "name": "active",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 117,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns number of grid subdivision for document.\nSubdivision value is used for grid type \"rectangular\".\n@return A positive integer value, starting from 1\n",
     "hash": "7a83c6e79e47a7b20f6374b977569228bb1eabb9260c9326c9d7fabfc49f0e18",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "subdivision",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 124,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set number of grid subdivision for document.\nSubdivision value is used for grid type \"rectangular\".\n@param subdivision A positive integer value, in range [1 - 10]\n",
     "hash": "46df5a2838ad07ae9cd08897ce5b7f3a1998f58165ec93172d5e333d4dedb16b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setSubdivision",
     "parameters": [
      {
       "default": null,
       "name": "subdivision",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 131,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns left angle (in degrees) of isometric grid for document.\nAngleLeft value is used for grid type \"isometric\".\n@return A positive decimal value, in range [0.00 - 89.00]\n",
     "hash": "798f15b82d9335159fb105101398e8e2f7c2beb8ee0272c425b49debcaa511ca",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "angleLeft",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 138,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set left angle (in degrees) of isometric grid for document.\nAngleLeft value is used for grid type \"isometric\".\n@param angleLeft A positive decimal value, in range [0.00 - 89.00]\n",
     "hash": "079eeb72f9e3367f191f0e84f35839bc62a766e52c2bc9f13d70553b74337e20",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setAngleLeft",
     "parameters": [
      {
       "default": null,
       "name": "angleLeft",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 145,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns right angle (in degrees) of isometric grid for document.\nAngleRight value is used for grid type \"isometric\".\n@return A positive decimal value, in range [0.00 - 89.00]\n",
     "hash": "502093710bc562e872ea626d49d2149d84b74e3850647bdd0f1a31883a27c323",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "angleRight",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 152,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set right angle (in degrees) of isometric grid for document.\nAngleRight value is used for grid type \"isometric\".\n@param angleRight A positive decimal value, in range [0.00 - 89.00]\n",
     "hash": "1aa3917198bd4a70a75e7384b33ffe2b086a712762020fdc90ce3c55975914c0",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setAngleRight",
     "parameters": [
      {
       "default": null,
       "name": "angleRight",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 159,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns if left angle grid is active.\nSpacing value is used for grid type \"isometric\".\n\n@returns a boolean which indicate if left angle grid is active or not\n",
     "hash": "30fe2e4e60ffbe796c82434e5ddcc8c54750772f012e091cc7686a290b3f5046",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "angleLeftActive",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 167,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set left angle grid active.\nSpacing value is used for grid type \"isometric\".\n\n@param active True to activate left angle grid, False to deactivate it.\n",
     "hash": "953c4f43e695bff8eae061eaee82e9c62e6b85c23ebfee7d95094dcee3e97a95",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setAngleLeftActive",
     "parameters": [
      {
       "default": null,
       "name": "active",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 175,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns if right angle grid is active.\nSpacing value is used for grid type \"isometric\".\n\n@returns a boolean which indicate if right angle grid is active or not\n",
     "hash": "233b8ed57185a2407304fbfa90198e6e301faf95d020d4df1e7de0171c011ece",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "angleRightActive",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 183,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set right angle grid active.\nSpacing value is used for grid type \"isometric\".\n\n@param active True to activate right angle grid, False to deactivate it.\n",
     "hash": "8ca44a00c7d8f0df0d4fe4da1c483a0315530bdfe3d0dfed9324e94d7b31c61e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setAngleRightActive",
     "parameters": [
      {
       "default": null,
       "name": "active",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 191,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns grid cell spacing (in pixels) for document.\nCell spacing value is used for grid type \"isometric_legacy\".\n@return A positive integer value, minimum value is 10\n",
     "hash": "9c3814b028bfc12a811ef2c1be1f711b9e89e9b398cc002be96f866681b70a55",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "cellSpacing",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 198,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set grid cell spacing for document.\nCell spacing value is used for grid type \"isometric_legacy\".\n@param cellSpacing A integer that define spacing, in range [10 - 1000]\n",
     "hash": "bafa1f9af03bfc39cc4ec0e491658b0e4cf9c7183ae6ccb5434a8b154f719b25",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setCellSpacing",
     "parameters": [
      {
       "default": null,
       "name": "cellSpacing",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 205,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns grid cell border size (in pixels) for document.\nCell spacing value is used for grid type \"isometric\".\n@return A positive integer value, in range [10 - 1000]\n",
     "hash": "7a1ddfc1d6cc8ab4c0d2163f6c55f17e90ab5ef53c432c0d6407bb006bb9fd80",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "cellSize",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 212,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set grid cell size (in pixels) for document.\nCell spacing value is used for grid type \"isometric\".\n@param cellSize An integer that define cell border size.\n",
     "hash": "5385de40efd149959f91f165d59c232a1d43d7cbfc174e2f28f266da5a15d713",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setCellSize",
     "parameters": [
      {
       "default": null,
       "name": "cellSize",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 219,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns current grid type applied for document.\n@return The grid type can be:\n- \"rectangular\"\n- \"isometric\"\n- \"isometric_legacy\"\n",
     "hash": "7c6b362eb6f6dfe0a547a101138f5fccf2fad311dd84c6d33361dbfdd43d00c5",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "type",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 228,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set current grid type applied for document.\n@param gridType The grid type can be:\n- \"rectangular\"\n- \"isometric\"\n- \"isometric_legacy\"\n",
     "hash": "a8dc8c73ea48f13cf443c2295983750a8c967c61c7afd167e4e2fc04f408c5be",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setType",
     "parameters": [
      {
       "default": null,
       "name": "gridType",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 237,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns status of \"Aspect locked\" property for offset values\n(X and Y values are linked to keep ratio)\n@return If locked, return True.\n",
     "hash": "401cd02b8350a6f4f1e84debe708d9ca19090f967b8924570f13a8df51e39d88",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "offsetAspectLocked",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 244,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set status of \"Aspect locked\" property for offset values\n(X and Y values are linked to keep ratio)\n@param offsetAspectLocked Set to True lock aspect.\n",
     "hash": "18c26f14546981fa536920144843e4cc5617e66f52e36c7f9a0e2889f4ca5537",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setOffsetAspectLocked",
     "parameters": [
      {
       "default": null,
       "name": "offsetAspectLocked",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 251,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns status of \"Aspect locked\" property for spacing values\n(mean, X and Y values are linked to keep ratio)\nSpacingAspectLocked value is used for grid type \"rectangular\".\n@return If locked, return True.\n",
     "hash": "eda1a2b48f0a362a3b277b4dd39bf06f89305707fad49692ae81cf7a27869425",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "spacingAspectLocked",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 259,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set status of \"Aspect locked\" property for spacing values\n(X and Y values are linked to keep ratio)\nSpacingAspectLocked value is used for grid type \"rectangular\".\n@param spacingAspectLocked Set to True lock aspect.\n",
     "hash": "09c1144d4598f2c215b051de38f7eadd559db25a819109c5cf0597155a83f968",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setSpacingAspectLocked",
     "parameters": [
      {
       "default": null,
       "name": "spacingAspectLocked",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 267,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns status of \"Aspect locked\" property for angles values\n(mean, left and right angles values are linked to keep ratio)\nAngleAspectLocked value is used for grid type \"isometric\" and \"isometric_legacy\".\n@return If locked, return True.\n",
     "hash": "79f1c4194fc42b533c148612e0bb9987ac04a3f1c408f11ad3e3e422fd67f227",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "angleAspectLocked",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 275,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set status of \"Aspect locked\" property for angles values\n(left and right angles values are linked to keep ratio)\nAngleAspectLocked value is used for grid type \"isometric\" and \"isometric_legacy\".\n@param angleAspectLocked Set to True lock aspect.\n",
     "hash": "6fb63f1c37bc36d305d5e92f996b220c07b8bc056369ad56bb8e7d8b3946676e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setAngleAspectLocked",
     "parameters": [
      {
       "default": null,
       "name": "angleAspectLocked",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 283,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns grid main line type\n@return The main line type for grid in current document\nCan be:\n- \"solid\"\n- \"dashed\"\n- \"dotted\"\n",
     "hash": "d3d57b83759d4f70d3648878cce9a7c35be5caef6a1d229d458669c67c1a2ef5",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "lineTypeMain",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 293,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set grid main line type\n@param lineType The main line type to apply for grid\nCan be:\n- \"solid\"\n- \"dashed\"\n- \"dotted\"\n",
     "hash": "96606e286d527c50977e7d3b0f5ba850dad41d6314ead71563da5e4e033a6ef8",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setLineTypeMain",
     "parameters": [
      {
       "default": null,
       "name": "lineType",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 303,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns grid subdivision line type\n@return The subdivision line type for grid in current document\nCan be:\n- \"solid\"\n- \"dashed\"\n- \"dotted\"\n\nLineTypeSubdivision value is used for grid type \"rectangular\".\n",
     "hash": "e600d7bc2302f76910ae5cb4f1f20f80087143bf2ca7454309cea327d8960941",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "lineTypeSubdivision",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 315,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set grid subdivision line type\n@param lineType The subdivision line type to apply for grid\nCan be:\n- \"solid\"\n- \"dashed\"\n- \"dotted\"\n\nLineTypeSubdivision value is used for grid type \"rectangular\".\n",
     "hash": "1fe92869e0fbd83bf43bd78a53b92d16e5383b6d29616933b20b7fee0ce37cf6",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setLineTypeSubdivision",
     "parameters": [
      {
       "default": null,
       "name": "lineType",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 327,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns grid vertical line type\n@return The vertical line type for grid in current document\nCan be:\n- \"solid\"\n- \"dashed\"\n- \"dotted\"\n- \"none\"\n\nLineTypeVertical value is used for grid type \"isometric\".\n",
     "hash": "a6cfe448df7b6b84484ee423219a66cd27170ce94f8a5f6dd651ddb9e0769dfa",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "lineTypeVertical",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 340,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set grid vertical line type\n@param lineType The vertical line type to apply for grid\nCan be:\n- \"solid\"\n- \"dashed\"\n- \"dotted\"\n- \"none\"\n\nLineTypeVertical value is used for grid type \"isometric\".\n",
     "hash": "ee2d4a61626dd328488765bb602cf664844778b2cb8260e5f2a3a0f6f7dcd4ee",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setLineTypeVertical",
     "parameters": [
      {
       "default": null,
       "name": "lineType",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 353,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns grid main line color\n@return The color for grid main line\n",
     "hash": "64385d1b18747f68a8163a9d94ea8a59cf925d1d0e7f9694ed235eefc0f78502",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "colorMain",
     "parameters": [],
     "returned": "QColor",
     "sourceCodeLine": 359,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set grid main line color\n@param color The color to apply for grid main line\n",
     "hash": "7046c80f7cdc92177066e3dee73e784e2b53c43f03c81e4affafd685ef1e7f6a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setColorMain",
     "parameters": [
      {
       "default": null,
       "name": "colorMain",
       "type": "QColor"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 365,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns grid subdivision line color\nColorSubdivision value is used for grid type \"rectangular\".\n@return The color for grid subdivision line\n",
     "hash": "70f128740788eaf927bb30809da2263135ae541532c388264a688fd77738a452",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "colorSubdivision",
     "parameters": [],
     "returned": "QColor",
     "sourceCodeLine": 372,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set grid subdivision line color\nColorSubdivision value is used for grid type \"rectangular\".\n@param color The color to apply for grid subdivision line\n",
     "hash": "eb388f2f759f4a802a585e99936f28013811fbedf279781a83217b41e827be19",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setColorSubdivision",
     "parameters": [
      {
       "default": null,
       "name": "colorSubdivision",
       "type": "QColor"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 379,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns grid vertical line color\nColorSubdivision value is used for grid type \"isometric\".\n@return The color for grid vertical line\n",
     "hash": "6063baf5c75c0481fd6e31d15a767349bb0f9edf5871599f829492d538646de1",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "colorVertical",
     "parameters": [],
     "returned": "QColor",
     "sourceCodeLine": 386,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set grid vertical line color\nColorSubdivision value is used for grid type \"isometric\".\n@param color The color to apply for grid vertical line\n",
     "hash": "cc5dba2fd2cf8b76934dcd763b3e400f053008bb3b9ecc284c5851acb44bd161",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setColorVertical",
     "parameters": [
      {
       "default": null,
       "name": "colorVertical",
       "type": "QColor"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 393,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Load grid definition from an XML document\n@param xmlContent xml content provided as a string\n@return True if xml content is valid and grid has been loaded, otherwise False\n",
     "hash": "f23402a592f34e21f93f1b752aa14998d8b4fcfe90865839ccec5de103debe7e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "fromXml",
     "parameters": [
      {
       "default": null,
       "name": "xmlContent",
       "type": "str"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 400,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Save grid definition as an XML document\n@return A string with xml content\n",
     "hash": "63a85c1a0306b1d9a465920940908f2390d85b520bdabc78f56ccaad4be8e7d9",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "toXml",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 406,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    }
   ],
   "name": "GridConfig",
   "sourceCodeLine": 19,
   "tagRef": {
    "available": [
     "master"
    ],
    "updated": [
     "master"
    ]
   }
  },
  "GroupLayer": {
   "description": "@brief The GroupLayer class\nA group layer is a layer that can contain other layers.\nIn Krita, layers within a group layer are composited\nfirst before they are added into the composition code for where\nthe group is in the stack. This has a significant effect on how\nit is interpreted for blending modes.\n\nPassThrough changes this behaviour.\n\nGroup layer cannot be animated, but can contain animated layers or masks.\n",
   "extend": "Node",
   "fileName": "GroupLayer.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief type Krita has several types of nodes, split in layers and masks. Group\nlayers can contain other layers, any layer can contain masks.\n\n@return grouplayer\n",
     "hash": "129c69674945d8b0ed93fb28b6d18e861247cb4a1c42434969cab249e031acb0",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": true,
     "name": "type",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 46,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setPassThroughMode\nThis changes the way how compositing works.\nInstead of compositing all the layers before compositing it with the rest of the image,\nthe group layer becomes a sort of formal way to organise everything.\n\nPassthrough mode is the same as it is in photoshop,\nand the inverse of SVG's isolation attribute(with passthrough=false being the same as\nisolation=\"isolate\").\n\n@param passthrough whether or not to set the layer to passthrough.\n",
     "hash": "c808a08898db4c6c85eae34dd57265e51a9ef631fb7cb00c72858189b15905cf",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setPassThroughMode",
     "parameters": [
      {
       "default": null,
       "name": "passthrough",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 60,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief passThroughMode\n@return returns whether or not this layer is in passthrough mode. @see setPassThroughMode\n",
     "hash": "78434a32ce5f57dc18f956408be75a6f2cb63158220af5f469127d29fb2e32b1",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "passThroughMode",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 66,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    }
   ],
   "name": "GroupLayer",
   "sourceCodeLine": 29,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX"
    ]
   }
  },
  "GroupShape": {
   "description": "@brief The GroupShape class\nA group shape is a vector object with child shapes.\n",
   "extend": "Shape",
   "fileName": "GroupShape.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief type returns the type.\n@return \"groupshape\"\n",
     "hash": "2c98cdb61027396946f8ecd9fc8fb5165ac4c6f27b5c6b8bc4e057c70a0c739a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "type",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 34,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief children\n@return the child shapes of this group shape.\n",
     "hash": "2536ba5817737a95a5ffaf9ccff056aa00e3d00dc852f6d4bb29f5a9981f4a72",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "children",
     "parameters": [],
     "returned": "list[Shape]",
     "sourceCodeLine": 40,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    }
   ],
   "name": "GroupShape",
   "sourceCodeLine": 20,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX"
    ]
   }
  },
  "GuidesConfig": {
   "description": "The GuidesConfig class encapsulates a Krita Guides configuration.\n\n",
   "extend": "QObject",
   "fileName": "GuidesConfig.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief Guides color\n@return color applied for all guides\n",
     "hash": "a27b936fccef46e1c0f1dd993261ea38cb73763f7d6c9a48f3846da9186af16e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "color",
     "parameters": [],
     "returned": "QColor",
     "sourceCodeLine": 41,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Define guides color\n@param color color to apply\n",
     "hash": "8e87e454e321ccfaa4c24d6b2332b2687ee9e955b56e85eece7d49095b99da9e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setColor",
     "parameters": [
      {
       "default": null,
       "name": "color",
       "type": "QColor"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 47,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Guides line type\n@return line type applied for all guides\nCan be:\n- \"solid\"\n- \"dashed\"\n- \"dot\"\n",
     "hash": "c70bc374a7458900064a791aa08e91c42a419f5032dead34936f6992958bd716",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "lineType",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 57,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Define guides lines type\n@param lineType line type to use for guides:\nCan be:\n- \"solid\"\n- \"dashed\"\n- \"dot\"\n",
     "hash": "7d7ca1341d66e4913e6d39804dc6e429fbb1357f6cb9f1a0bd1aecfda8ae3087",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setLineType",
     "parameters": [
      {
       "default": null,
       "name": "lineType",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 67,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief indicate if there's guides defined\n@return True if at least one guide is defined, otherwise False\n",
     "hash": "4886c35c18f513d56ec7e9181c0398bb457202377774eacf97f050a93cbfa7db",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "hasGuides",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 73,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief indicate if position from current guides configuration match positions from another guides configuration\n@return True if positions are the same\n",
     "hash": "be4b692a47b2d096463eb4df19999825268934d7128240755c6cbefcdac00fe9",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "hasSamePositionAs",
     "parameters": [
      {
       "default": null,
       "name": "guideConfig",
       "type": "GuidesConfig"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 79,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief The horizontal guides.\n@return a list of the horizontal positions of guides.\n",
     "hash": "fd3a7a216f461e9fea38f872f3fbc747f844c45ee51ae027d2751085eb98da8a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "horizontalGuides",
     "parameters": [],
     "returned": "list[float]",
     "sourceCodeLine": 85,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set the horizontal guides.\n@param lines a list of the horizontal positions of guides to set\n",
     "hash": "b46559d86cbfce21c5cd16dc88859d5c12124ad2629605ca7778b7cb99c47c2e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setHorizontalGuides",
     "parameters": [
      {
       "default": null,
       "name": "lines",
       "type": "list[float]"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 91,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief The vertical guides.\n@return a list of vertical positions of guides.\n",
     "hash": "d8016aaa282881cefb4a467bf3a13fb96f117432ef5fbce02cc098f16dbfa472",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "verticalGuides",
     "parameters": [],
     "returned": "list[float]",
     "sourceCodeLine": 97,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set the vertical guides.\n@param lines a list of the vertical positions of guides to set\n",
     "hash": "12eea37cfa8ccca9511628f777c56c884d09cc83d3cce3c61ad9476cb1c1990f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setVerticalGuides",
     "parameters": [
      {
       "default": null,
       "name": "lines",
       "type": "list[float]"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 103,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Load guides definition from an XML document\n@param xmlContent xml content provided as a string\n@return True if xml content is valid and guides has been loaded, otherwise False\n",
     "hash": "390c1dd3c2dbaf6264bd71c18f6812189bc0ccc8b3345384fd7467e3e511cf71",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "fromXml",
     "parameters": [
      {
       "default": null,
       "name": "xmlContent",
       "type": "str"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 110,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Save guides definition as an XML document\n@return A string with xml content\n",
     "hash": "642559d925e6764a6136b75e7849c122b15efcb9bcdb434372538feedde6e712",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "toXml",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 116,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Remove all guides\n",
     "hash": "5ef769d71d9d3b47ff4560f66e41fe97e8c4649803e2846ac44b1327b2c55816",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "removeAllGuides",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 121,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns guides visibility status.\n@return True if guides are visibles, otherwise False\n",
     "hash": "6bdb41f18e76265fb0aec378b23a6790785811a964e7c899fc9a0d7d5c8d2d63",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "visible",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 127,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set guides visibility status\n@param value True to set guides visible, otherwise False\n",
     "hash": "db44d06189d35ec1a269654b3286d8c6de69bb37863a7dff8d90f90cac5f7888",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setVisible",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 133,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns guide lock status\n@return True if guides are locked, otherwise False\n",
     "hash": "307e0f46fd2ab06c129abddd7331d6498bf8233abcd0c93bbf50612fbc73838d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "locked",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 139,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set guides lock status\n@param value True to set guides locked, otherwise False\n",
     "hash": "e1051e46b3853fb3c2ec278c170209ed1f8935b3252aa193ddffe61f642ce429",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setLocked",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 145,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Returns guide snap status\n@return True if snap to guides is active, otherwise False\n",
     "hash": "54eaaa3c69e118754861191f3cd335cd76a28cec04fa4a982db37579c9b63645",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "snap",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 151,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set guides snap status\n@param value True to set snap to guides active, otherwise False\n",
     "hash": "61ff78f5c0e1189b7793ea0703c4837183f5975af852e11e5a50f91ce007b85c",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setSnap",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 157,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    }
   ],
   "name": "GuidesConfig",
   "sourceCodeLine": 19,
   "tagRef": {
    "available": [
     "master"
    ],
    "updated": [
     "master"
    ]
   }
  },
  "InfoObject": {
   "description": "InfoObject wrap a properties map. These maps can be used to set the\nconfiguration for filters.\n",
   "extend": "QObject",
   "fileName": "InfoObject.h",
   "methods": [
    {
     "accesType": "public",
     "description": "Return all properties this InfoObject manages.\n",
     "hash": "a685875c4b4409d7ba82b127eb400a32bc1e826d116cc2d8399d914006c2954b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "properties",
     "parameters": [],
     "returned": "dict[str: QVariant]",
     "sourceCodeLine": 37,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Add all properties in the @p propertyMap to this InfoObject\n",
     "hash": "eb5dbf9981a6e574b82e9356a374f5864d11e92b55109c2f540841cac4b8f1de",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setProperties",
     "parameters": [
      {
       "default": null,
       "name": "propertyMap",
       "type": "dict[str: QVariant]"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 42,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "set the property identified by @p key to @p value\n\nIf you want create a property that represents a color, you can use a QColor\nor hex string, as defined in https://doc.qt.io/qt-5/qcolor.html#setNamedColor.\n\n",
     "hash": "f6ec9d6574992dc9a7032398fe8e83c06987ab0afe30e4f6a78359752d1036e0",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setProperty",
     "parameters": [
      {
       "default": null,
       "name": "key",
       "type": "str"
      },
      {
       "default": null,
       "name": "value",
       "type": "QVariant"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 52,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX",
       "040300-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "return the value for the property identified by key, or None if there is no such key.\n",
     "hash": "2da60d49dbf45695579a034fb5441146520d420c7f95da0d36056e559e51216d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "property",
     "parameters": [
      {
       "default": null,
       "name": "key",
       "type": "str"
      }
     ],
     "returned": "QVariant",
     "sourceCodeLine": 57,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040001-XX"
      ]
     }
    }
   ],
   "name": "InfoObject",
   "sourceCodeLine": 19,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX"
    ]
   }
  },
  "IntParseSpinBox": {
   "description": "@brief A wrapper around KisIntParseSpinBox, which is a cleverer SpinBox,\nable to parse arithmetic expressions. The widget itself is accessed with\nthe widget() function.\n\nUse this spinbox instead of the basic one from Qt if you want it to be able\nto parse arithmetic expressions.\n",
   "extend": "QObject",
   "fileName": "IntParseSpinBox.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief Get the internal KisIntParseSpinBox as a QWidget, so it may be\nadded to a UI\n\n@return the internal KisIntParseSpinBox as a QWidget\n",
     "hash": "9b692ec2e4e7befa135c9d0e2dae2b807861084fda751fea916d3ca77e2c7534",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "widget",
     "parameters": [],
     "returned": "QSpinBox",
     "sourceCodeLine": 40,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief This is a reimplementation of @ref QSpinBox::stepBy that\nuses @ref setValue\n@param steps Number of steps that the value should change\n",
     "hash": "70f29d38b6c30a8aaf5cb392531a70aa8989bf46c19fc19015a9786e59919bd5",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "stepBy",
     "parameters": [
      {
       "default": null,
       "name": "steps",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 47,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set the value of the spinbox\n\nThis reimplementation also tries to clear the current expression and\nwarning message whenever possible. This will happen when the new value\nis different from the current one and the line edit has not the focus\nor it is read-only. One can force the reset also by passing true to the\n@p overwriteExpression parameter.\n\n@param value The new value\n@param overwriteExpression Get if the expression in the edit field\n(and the warning message) should be reset to reflect the new value.\nThe default is false so that if the user is editing the expression\nit won't be disrupted by any default call to this function\n",
     "hash": "d38bb5c80810335dd7fe504596a1d8cf0d2fdb83cd71595b6b8355bf8af16e20",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setValue",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "int"
      },
      {
       "default": "False",
       "name": "overwriteExpression",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 63,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Get if the last expression entered is a valid one\n@retval true if the last expression entered is valid\n@retval false otherwise\n",
     "hash": "98fb9df5f5e7bcb85bc8056ea50a7a278e37a9b6ae87dc231996d432420e0ce9",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "isLastValid",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 69,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief This virtual function is similar to cleanText(). But child classes\nmay reimplement it to further process (\"clean up\") the expression.\n@return The processed expression\n",
     "hash": "5f30c5d8551dbf6c80f02179d83088010fec87eb6559219eab35ff5010b440f7",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": true,
     "name": "veryCleanText",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 75,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief signal emitted when the last parsed expression is not valid.\n",
     "hash": "1fabc5ad39d468c511e4c06aea00a5fdabe567ddbdc3ee6dd96212a8315c7aee",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "errorWhileParsing",
     "parameters": [
      {
       "default": null,
       "name": "expr",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 81,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief signal emitted when the last parsed expression is valid and\nthe expression before was not valid.\n",
     "hash": "50877b2c19a2e137699d069658332f4205b2edb9b3143e950f8f1ea02e5e785d",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "noMoreParsingError",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 86,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    }
   ],
   "name": "IntParseSpinBox",
   "sourceCodeLine": 23,
   "tagRef": {
    "available": [
     "master"
    ],
    "updated": [
     "master"
    ]
   }
  },
  "Krita": {
   "description": "Krita is a singleton class that offers the root access to the Krita object hierarchy.\n\nThe Krita.instance() is aliased as two builtins: Scripter and Application.\n",
   "extend": "QObject",
   "fileName": "Krita.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@return the currently active document, if there is one.\n",
     "hash": "1db7d08b84ee3f108cd1ad90a6a85e9a1749cf2b5aec393e102778d089b9c773",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "activeDocument",
     "parameters": [],
     "returned": "Document",
     "sourceCodeLine": 41,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setActiveDocument activates the first view that shows the given document\n@param value the document we want to activate\n",
     "hash": "0033476596e442d1ed77ed7026b07c00539d8c9cad542001df70fa8e9f616328",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setActiveDocument",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "Document"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 47,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief batchmode determines whether the script is run in batch mode. If batchmode\nis true, scripts should now show messageboxes or dialog boxes.\n\nNote that this separate from Document.setBatchmode(), which determines whether\nexport/save option dialogs are shown.\n\n@return true if the script is run in batchmode\n",
     "hash": "b1a5e557aabfc274fe7a82209235d84f2f2a6585997ab6e1c143df6e66fc325d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "batchmode",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 58,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setBatchmode sets the batchmode to @param value; if true, scripts should\nnot show dialogs or messageboxes.\n",
     "hash": "d5a5ea0c1a5afbc6cb42fdb390a3d56ec2cb9dd2b160316c40c49d5d14bac76b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setBatchmode",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 64,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return return a list of all actions for the currently active mainWindow.\n",
     "hash": "66a959050295d5689bfe9a20ec91439fd19528cf25fa5f420bea98e6d7066c0b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "actions",
     "parameters": [],
     "returned": "list[QAction]",
     "sourceCodeLine": 69,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the action that has been registered under the given name, or 0 if no such action exists.\n",
     "hash": "5113675d8242a9b33768fbf0ec8b90e441dcb2be6cb4422342af190798fd57d1",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "action",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      }
     ],
     "returned": "QAction",
     "sourceCodeLine": 74,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return a list of all open Documents\n",
     "hash": "f0c0a605b78b2da5189e755e7e2fd7918dbee0bab4706f1e7e4b17c85839468c",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "documents",
     "parameters": [],
     "returned": "list[Document]",
     "sourceCodeLine": 79,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Filters are identified by an internal name. This function returns a list\nof all existing registered filters.\n@return a list of all registered filters\n",
     "hash": "0c96bc3d2666ff1e01707e79ccdb3b37066824d7f8b4fab0ab16036f60b0c684",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "filters",
     "parameters": [],
     "returned": "list[str]",
     "sourceCodeLine": 91,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief filter construct a Filter object with a default configuration.\n@param name the name of the filter. Use Krita.instance().filters() to get\na list of all possible filters.\n@return the filter or None if there is no such filter.\n",
     "hash": "778e193d627ed1feb9037485768a99c7ca6d762424fdc8a8ebff9b512d2287e1",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "filter",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      }
     ],
     "returned": "Filter",
     "sourceCodeLine": 99,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief colorModels creates a list with all color models id's registered.\n@return a list of all color models or a empty list if there is no such color models.\n",
     "hash": "c65cd82116931380b5e87d97ff35d14c8776c431d75796a44fcf5c2512d30fda",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "colorModels",
     "parameters": [],
     "returned": "list[str]",
     "sourceCodeLine": 105,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief colorDepths creates a list with the names of all color depths\ncompatible with the given color model.\n@param colorModel the id of a color model.\n@return a list of all color depths or a empty list if there is no such\ncolor depths.\n",
     "hash": "9d382d7598d9f3647ad8abc574c1b2b6e7d7b50609f82298d0f0c2d102b9cb90",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "colorDepths",
     "parameters": [
      {
       "default": null,
       "name": "colorModel",
       "type": "str"
      }
     ],
     "returned": "list[str]",
     "sourceCodeLine": 114,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief filterStrategies Retrieves all installed filter strategies. A filter\nstrategy is used when transforming (scaling, shearing, rotating) an image to\ncalculate the value of the new pixels. You can use th\n@return the id's of all available filters.\n",
     "hash": "9209fde5893c3f836c581e9e61194da15bd6dfb66fb129647554c3e7751dbf1d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "filterStrategies",
     "parameters": [],
     "returned": "list[str]",
     "sourceCodeLine": 122,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief profiles creates a list with the names of all color profiles compatible\nwith the given color model and color depth.\n@param colorModel A string describing the color model of the image:\n<ul>\n<li>A: Alpha mask</li>\n<li>RGBA: RGB with alpha channel (The actual order of channels is most often BGR!)</li>\n<li>XYZA: XYZ with alpha channel</li>\n<li>LABA: LAB with alpha channel</li>\n<li>CMYKA: CMYK with alpha channel</li>\n<li>GRAYA: Gray with alpha channel</li>\n<li>YCbCrA: YCbCr with alpha channel</li>\n</ul>\n@param colorDepth A string describing the color depth of the image:\n<ul>\n<li>U8: unsigned 8 bits integer, the most common type</li>\n<li>U16: unsigned 16 bits integer</li>\n<li>F16: half, 16 bits floating point. Only available if Krita was built with OpenEXR</li>\n<li>F32: 32 bits floating point</li>\n</ul>\n@return a list with valid names\n",
     "hash": "c1cd22e375eec44e9d255e61eef5e1b03808e7e7dbf148e293a02e329f635bed",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "profiles",
     "parameters": [
      {
       "default": null,
       "name": "colorModel",
       "type": "str"
      },
      {
       "default": null,
       "name": "colorDepth",
       "type": "str"
      }
     ],
     "returned": "list[str]",
     "sourceCodeLine": 146,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief addProfile load the given profile into the profile registry.\n@param profilePath the path to the profile.\n@return true if adding the profile succeeded.\n",
     "hash": "0386574f16b5748437df48883ba1d1722741603f121a51b0eedff23c36f8fd01",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "addProfile",
     "parameters": [
      {
       "default": null,
       "name": "profilePath",
       "type": "str"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 153,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief notifier the Notifier singleton emits signals when documents are opened and\nclosed, the configuration changes, views are opened and closed or windows are opened.\n@return the notifier object\n",
     "hash": "c10bdd4668190c78470af01c37866d5c124700478e128440aeeb251e300517b9",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "notifier",
     "parameters": [],
     "returned": "Notifier",
     "sourceCodeLine": 160,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief version Determine the version of Krita\n\nUsage: print(Application.version ())\n\n@return the version string including git sha1 if Krita was built from git\n",
     "hash": "84a8543e4ff083f6d549fb5fabb7a351facc182d90ae573f2a3f6abdeca0782a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "version",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 169,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return a list of all views. A Document can be shown in more than one view.\n",
     "hash": "724ab3d62ad253c789cb3f60596d7a2088cc0230991ae8d41e7e561a8f7b5e3a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "views",
     "parameters": [],
     "returned": "list[View]",
     "sourceCodeLine": 174,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the currently active window or None if there is no window\n",
     "hash": "99091d755069c6e1ce5ac57590793cff65f03050061daad558c8c182b1679a16",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "activeWindow",
     "parameters": [],
     "returned": "Window",
     "sourceCodeLine": 179,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return a list of all windows\n",
     "hash": "7c0f8dfdc1ccebf4b93e68abe7b893bc4b079400056cc5c09413f1c575afc25c",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "windows",
     "parameters": [],
     "returned": "list[Window]",
     "sourceCodeLine": 184,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief resources returns a list of Resource objects of the given type\n@param type Valid types are:\n\n<ul>\n<li>pattern</li>\n<li>gradient</li>\n<li>brush</li>\n<li>preset</li>\n<li>palette</li>\n<li>workspace</li>\n</ul>\n",
     "hash": "b9bcb4af9a0ca63ac1b44c5bcfb7a47af26b50e66ae6841ae7a3e6c183eb73d9",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "resources",
     "parameters": [
      {
       "default": null,
       "name": "type",
       "type": "str"
      }
     ],
     "returned": "dict[str: Resource]",
     "sourceCodeLine": 199,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief return all recent documents registered in the RecentFiles group of the kritarc\n",
     "hash": "4e733f8ca9f66d0fdfdac502d5d327c5973118f0ca438a277f4a766172cf0882",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "recentDocuments",
     "parameters": [],
     "returned": "list[str]",
     "sourceCodeLine": 205,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief createDocument creates a new document and image and registers\nthe document with the Krita application.\n\nUnless you explicitly call Document::close() the document will remain\nknown to the Krita document registry. The document and its image will\nonly be deleted when Krita exits.\n\nThe document will have one transparent layer.\n\nTo create a new document and show it, do something like:\n@code\nfrom Krita import *\n\ndef add_document_to_window():\n    d = Application.createDocument(100, 100, \"Test\", \"RGBA\", \"U8\", \"\", 120.0)\n    Application.activeWindow().addView(d)\n\nadd_document_to_window()\n@endcode\n\n@param width the width in pixels\n@param height the height in pixels\n@param name the name of the image (not the filename of the document)\n@param colorModel A string describing the color model of the image:\n<ul>\n<li>A: Alpha mask</li>\n<li>RGBA: RGB with alpha channel (The actual order of channels is most often BGR!)</li>\n<li>XYZA: XYZ with alpha channel</li>\n<li>LABA: LAB with alpha channel</li>\n<li>CMYKA: CMYK with alpha channel</li>\n<li>GRAYA: Gray with alpha channel</li>\n<li>YCbCrA: YCbCr with alpha channel</li>\n</ul>\n@param colorDepth A string describing the color depth of the image:\n<ul>\n<li>U8: unsigned 8 bits integer, the most common type</li>\n<li>U16: unsigned 16 bits integer</li>\n<li>F16: half, 16 bits floating point. Only available if Krita was built with OpenEXR</li>\n<li>F32: 32 bits floating point</li>\n</ul>\n@param profile The name of an icc profile that is known to Krita. If an empty string is passed, the default is\ntaken.\n@param resolution the resolution in points per inch.\n@return the created document.\n",
     "hash": "1b37a055ba0c6f2f4bd391ae92b6d99bddc6758f1c166029e9347811f8ec3773",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "createDocument",
     "parameters": [
      {
       "default": null,
       "name": "width",
       "type": "int"
      },
      {
       "default": null,
       "name": "height",
       "type": "int"
      },
      {
       "default": null,
       "name": "name",
       "type": "str"
      },
      {
       "default": null,
       "name": "colorModel",
       "type": "str"
      },
      {
       "default": null,
       "name": "colorDepth",
       "type": "str"
      },
      {
       "default": null,
       "name": "profile",
       "type": "str"
      },
      {
       "default": null,
       "name": "resolution",
       "type": "float"
      }
     ],
     "returned": "Document",
     "sourceCodeLine": 254,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040100-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief openDocument creates a new Document, registers it with the Krita application and loads the given file.\n@param filename the file to open in the document\n@return the document\n",
     "hash": "e1078af8795da4f61b04a527e5ac3a8171324d52281659b179e1e5fdc37a0105",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "openDocument",
     "parameters": [
      {
       "default": null,
       "name": "filename",
       "type": "str"
      }
     ],
     "returned": "Document",
     "sourceCodeLine": 261,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief openWindow create a new main window. The window is not shown by default.\n",
     "hash": "f81f9138d4218805f3587165199941977dd01823773899a81f394996f6e54027",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "openWindow",
     "parameters": [],
     "returned": "Window",
     "sourceCodeLine": 266,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief addExtension add the given plugin to Krita. There will be a single instance of each Extension in the Krita process.\n@param extension the extension to add.\n",
     "hash": "801b30cfcee04c93b2ef5e0807eb757261d6959d2d118edb58ca31c1ab3993fd",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "addExtension",
     "parameters": [
      {
       "default": null,
       "name": "extension",
       "type": "Extension"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 272,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "return a list with all registered extension objects.\n",
     "hash": "0d3eeb63f08ce9ddb820019ce2dd8c8418d57cb5202230e17bcf935e23e42150",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "extensions",
     "parameters": [],
     "returned": "list[Extension]",
     "sourceCodeLine": 277,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief addDockWidgetFactory Add the given docker factory to the application. For scripts\nloaded on startup, this means that every window will have one of the dockers created by the\nfactory.\n@param factory The factory object.\n",
     "hash": "452f1723474bb019d8352fca3deffa7d3c9492dadc746887c3633a2a8b46ed09",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "addDockWidgetFactory",
     "parameters": [
      {
       "default": null,
       "name": "factory",
       "type": "DockWidgetFactoryBase"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 285,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief writeSetting write the given setting under the given name to the kritarc file in\nthe given settings group.\n@param group The group the setting belongs to. If empty, then the setting is written in the\ngeneral section\n@param name The name of the setting\n@param value The value of the setting. Script settings are always written as strings.\n",
     "hash": "543ba7abf00efab6bbe38fbaed4a60f3e04bf245b7dcebfc7c3c91a1fef9511f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "writeSetting",
     "parameters": [
      {
       "default": null,
       "name": "group",
       "type": "str"
      },
      {
       "default": null,
       "name": "name",
       "type": "str"
      },
      {
       "default": null,
       "name": "value",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 295,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief readSetting read the given setting value from the kritarc file.\n@param group The group the setting is part of. If empty, then the setting is read from\nthe general group.\n@param name The name of the setting\n@param defaultValue The default value of the setting\n@return a string representing the setting.\n",
     "hash": "8a96191af83fd9f1bfc54d8587cc5996ddcc4737809b06a26b46234e51044154",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "readSetting",
     "parameters": [
      {
       "default": null,
       "name": "group",
       "type": "str"
      },
      {
       "default": null,
       "name": "name",
       "type": "str"
      },
      {
       "default": null,
       "name": "defaultValue",
       "type": "str"
      }
     ],
     "returned": "str",
     "sourceCodeLine": 305,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief icon\nThis allows you to get icons from Krita's internal icons.\n@param iconName name of the icon.\n@return the icon related to this name.\n",
     "hash": "02f561f79a201a0b9143b9cf71103fcc5418b09280ae730cb1bd5e432fe7d02c",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "icon",
     "parameters": [
      {
       "default": null,
       "name": "iconName",
       "type": "str"
      }
     ],
     "returned": "QIcon",
     "sourceCodeLine": 313,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief instance retrieve the singleton instance of the Application object.\n",
     "hash": "c79aefaf89547cf6608af1b906aeb3dc3a5824e9d4d1850af4594a1e9d7e415d",
     "isSignal": false,
     "isStatic": true,
     "isVirtual": false,
     "name": "instance",
     "parameters": [],
     "returned": "Krita",
     "sourceCodeLine": 318,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Internal only: for use with mikro.py",
     "hash": "5673920959da94882c6668f6587390a9b01e23da65bbc5db523fdac3263f2cce",
     "isSignal": false,
     "isStatic": true,
     "isVirtual": false,
     "name": "fromVariant",
     "parameters": [
      {
       "default": null,
       "name": "v",
       "type": "QVariant"
      }
     ],
     "returned": "QObject",
     "sourceCodeLine": 321,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "12f48ad03833f49b9aef2e0e4351b3783ee09a430698e69c5655525847a350a1",
     "isSignal": false,
     "isStatic": true,
     "isVirtual": false,
     "name": "krita_i18n",
     "parameters": [
      {
       "default": null,
       "name": "text",
       "type": "str"
      }
     ],
     "returned": "str",
     "sourceCodeLine": 323,
     "tagRef": {
      "available": [
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040100-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return a list of all the dockers\n",
     "hash": "0d9464fc95c1a1761799e1b38f1cafe1f026fd022bdee3e7024fb3cabeb962a8",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "dockers",
     "parameters": [],
     "returned": "list[QDockWidget]",
     "sourceCodeLine": 84,
     "tagRef": {
      "available": [
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040400-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "64a699fe6ee707ebaa53dee93af45b9c55bb3835a1b9e49e1f0ebb3867607bf6",
     "isSignal": false,
     "isStatic": true,
     "isVirtual": false,
     "name": "krita_i18nc",
     "parameters": [
      {
       "default": null,
       "name": "context",
       "type": "str"
      },
      {
       "default": null,
       "name": "text",
       "type": "str"
      }
     ],
     "returned": "str",
     "sourceCodeLine": 324,
     "tagRef": {
      "available": [
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040400-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "9f4b25e4623bf659cfc3ea92f1f96dd40511f7175a108c8098dc8f22a932673e",
     "isSignal": false,
     "isStatic": true,
     "isVirtual": false,
     "name": "getAppDataLocation",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 327,
     "tagRef": {
      "available": [
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050100-XX"
      ]
     }
    }
   ],
   "name": "Krita",
   "sourceCodeLine": 27,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX",
     "040100-XX",
     "040400-XX",
     "050100-XX"
    ]
   }
  },
  "ManagedColor": {
   "description": "@brief The ManagedColor class is a class to handle colors that are color managed.\nA managed color is a color of which we know the model(RGB, LAB, CMYK, etc), the bitdepth and\nthe specific properties of its colorspace, such as the whitepoint, chromaticities, trc, etc, as represented\nby the color profile.\n\nKrita has two color management systems. LCMS and OCIO.\nLCMS is the one handling the ICC profile stuff, and the major one handling that ManagedColor deals with.\nOCIO support is only in the display of the colors. ManagedColor has some support for it in colorForCanvas()\n\nAll colors in Krita are color managed. QColors are understood as RGB-type colors in the sRGB space.\n\nWe recommend you make a color like this:\n\n@code\ncolorYellow = ManagedColor(\"RGBA\", \"U8\", \"\")\nQVector<float> yellowComponents = colorYellow.components()\nyellowComponents[0] = 1.0\nyellowComponents[1] = 1.0\nyellowComponents[2] = 0\nyellowComponents[3] = 1.0\n\ncolorYellow.setComponents(yellowComponents)\nQColor yellow = colorYellow.colorForCanvas(canvas)\n@endcode\n",
   "extend": "QObject",
   "fileName": "ManagedColor.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief ManagedColor create a managed color with the given color space properties.\n@see setColorModel() for more details.\n",
     "hash": "cff3122edbb555aecc536c9957c5fe8182cfc4ecbfcc0693ce2f1eff31d4a87c",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "ManagedColor",
     "parameters": [
      {
       "default": null,
       "name": "colorModel",
       "type": "str"
      },
      {
       "default": null,
       "name": "colorDepth",
       "type": "str"
      },
      {
       "default": null,
       "name": "colorProfile",
       "type": "str"
      },
      {
       "default": "None",
       "name": "parent",
       "type": "QObject"
      }
     ],
     "returned": "ManagedColor",
     "sourceCodeLine": 58,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief colorForCanvas\n@param canvas the canvas whose color management you'd like to use. In Krita, different views have\nseparate canvasses, and these can have different OCIO configurations active.\n@return the QColor as it would be displaying on the canvas. This result can be used to draw widgets with\nthe correct configuration applied.\n",
     "hash": "3338c7352c955d7fe436ad852d8e4768eedd87f334aa4fa2dfcb7d1165a76d47",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "colorForCanvas",
     "parameters": [
      {
       "default": null,
       "name": "canvas",
       "type": "Canvas"
      }
     ],
     "returned": "QColor",
     "sourceCodeLine": 71,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "colorDepth A string describing the color depth of the image:\n<ul>\n<li>U8: unsigned 8 bits integer, the most common type</li>\n<li>U16: unsigned 16 bits integer</li>\n<li>F16: half, 16 bits floating point. Only available if Krita was built with OpenEXR</li>\n<li>F32: 32 bits floating point</li>\n</ul>\n@return the color depth.\n",
     "hash": "715836fcdecec25381cb7b1bfa32b67ba464a81f7a9129881617e39716e35a0f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "colorDepth",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 91,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief colorModel retrieve the current color model of this document:\n<ul>\n<li>A: Alpha mask</li>\n<li>RGBA: RGB with alpha channel (The actual order of channels is most often BGR!)</li>\n<li>XYZA: XYZ with alpha channel</li>\n<li>LABA: LAB with alpha channel</li>\n<li>CMYKA: CMYK with alpha channel</li>\n<li>GRAYA: Gray with alpha channel</li>\n<li>YCbCrA: YCbCr with alpha channel</li>\n</ul>\n@return the internal color model string.\n",
     "hash": "f4408c04e21543834db38d49c8f525c323f0b6e26470c9382c784d7556333831",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "colorModel",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 106,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the name of the current color profile\n",
     "hash": "23e4e424e364e6b2401ea99002b23714adaa4245ba25d7d42771a536f8be6df6",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "colorProfile",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 111,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setColorProfile set the color profile of the image to the given profile. The profile has to\nbe registered with krita and be compatible with the current color model and depth; the image data\nis <i>not</i> converted.\n@param colorProfile\n@return false if the colorProfile name does not correspond to to a registered profile or if assigning\nthe profile failed.\n",
     "hash": "26c36445760464c670407f361efe08d9456dc44305a08a592060c1c1abe566fc",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setColorProfile",
     "parameters": [
      {
       "default": null,
       "name": "colorProfile",
       "type": "str"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 121,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setColorSpace convert the nodes and the image to the given colorspace. The conversion is\ndone with Perceptual as intent, High Quality and No LCMS Optimizations as flags and no blackpoint\ncompensation.\n\n@param colorModel A string describing the color model of the image:\n<ul>\n<li>A: Alpha mask</li>\n<li>RGBA: RGB with alpha channel (The actual order of channels is most often BGR!)</li>\n<li>XYZA: XYZ with alpha channel</li>\n<li>LABA: LAB with alpha channel</li>\n<li>CMYKA: CMYK with alpha channel</li>\n<li>GRAYA: Gray with alpha channel</li>\n<li>YCbCrA: YCbCr with alpha channel</li>\n</ul>\n@param colorDepth A string describing the color depth of the image:\n<ul>\n<li>U8: unsigned 8 bits integer, the most common type</li>\n<li>U16: unsigned 16 bits integer</li>\n<li>F16: half, 16 bits floating point. Only available if Krita was built with OpenEXR</li>\n<li>F32: 32 bits floating point</li>\n</ul>\n@param colorProfile a valid color profile for this color model and color depth combination.\n@return false the combination of these arguments does not correspond to a colorspace.\n",
     "hash": "6429073a4b614cbd7c8f114486d24b27a5f28725cd8e45a24750e89751ca8b5b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setColorSpace",
     "parameters": [
      {
       "default": null,
       "name": "colorModel",
       "type": "str"
      },
      {
       "default": null,
       "name": "colorDepth",
       "type": "str"
      },
      {
       "default": null,
       "name": "colorProfile",
       "type": "str"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 148,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief components\n@return a QVector containing the channel/components of this color normalized. This includes the alphachannel.\n",
     "hash": "19e90bec268964547c0e377d3a7407977407d930d696f7613b54cc47f4370454",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "components",
     "parameters": [],
     "returned": "list[float]",
     "sourceCodeLine": 154,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief componentsOrdered()\n@return same as Components, except the values are ordered to the display.\n",
     "hash": "89a584227553e2d78b6a7b5a71999fcd0a73268bff98e01c7b2016df884f353e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "componentsOrdered",
     "parameters": [],
     "returned": "list[float]",
     "sourceCodeLine": 160,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setComponents\nSet the channel/components with normalized values. For integer colorspace, this obviously means the limit\nis between 0.0-1.0, but for floating point colorspaces, 2.4 or 103.5 are still meaningful (if bright) values.\n@param values the QVector containing the new channel/component values. These should be normalized.\n",
     "hash": "799f80ad81c6d85db61fa45a9f49e2873fbdc1eb6eb09f1c8825766487499618",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setComponents",
     "parameters": [
      {
       "default": null,
       "name": "values",
       "type": "list[float]"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 168,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Serialize this color following Create's swatch color specification available\nat https://web.archive.org/web/20110826002520/http://create.freedesktop.org/wiki/Swatches_-_color_file_format/Draft\n",
     "hash": "1404272ace3230b9b3ec220bf2cad58d7edd9210c363df92e387c2d7e532abde",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "toXML",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 174,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040300-XX",
       "050100-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Unserialize a color following Create's swatch color specification available\nat https://web.archive.org/web/20110826002520/http://create.freedesktop.org/wiki/Swatches_-_color_file_format/Draft\n\n@param xml an XML color\n\n@return the unserialized color, or an empty color object if the function failed\n        to unserialize the color\n",
     "hash": "1293df8cd9883a0be977c2e54ceb858176f22894b942e749bbe97da4e8e00931",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "fromXML",
     "parameters": [
      {
       "default": null,
       "name": "xml",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 185,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX",
       "040300-XX",
       "050100-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief toQString create a user-visible string of the channel names and the channel values\n@return a string that can be used to display the values of this color to the user.\n",
     "hash": "bc3968ccf81ab257e9d0e697715925fab18b907bdb6a9107ccc9f901c98d03db",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "toQString",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 191,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief fromQColor is the (approximate) reverse of colorForCanvas()\n@param qcolor the QColor to convert to a KoColor.\n@param canvas the canvas whose color management you'd like to use.\n@return the approximated ManagedColor, to use for canvas resources.\n",
     "hash": "a40e3e18de43e6961cd2d41e9fcf67bcdc517136e9d2b723481970eb8f47183c",
     "isSignal": false,
     "isStatic": true,
     "isVirtual": false,
     "name": "fromQColor",
     "parameters": [
      {
       "default": null,
       "name": "qcolor",
       "type": "QColor"
      },
      {
       "default": "None",
       "name": "canvas",
       "type": "Canvas"
      }
     ],
     "returned": "ManagedColor",
     "sourceCodeLine": 79,
     "tagRef": {
      "available": [
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040300-XX"
      ]
     }
    }
   ],
   "name": "ManagedColor",
   "sourceCodeLine": 45,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX",
     "040300-XX"
    ]
   }
  },
  "Node": {
   "description": "Node represents a layer or mask in a Krita image's Node hierarchy. Group layers can contain\nother layers and masks; layers can contain masks.\n\n",
   "extend": "QObject",
   "fileName": "Node.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief clone clone the current node. The node is not associated with any image.\n",
     "hash": "d92afbd45e0a95045c16a8378b8006aef107f14ad83d8f87807763752dc17241",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "clone",
     "parameters": [],
     "returned": "Node",
     "sourceCodeLine": 37,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief alphaLocked checks whether the node is a paint layer and returns whether it is alpha locked\n@return whether the paint layer is alpha locked, or false if the node is not a paint layer\n",
     "hash": "8f8562c23ae2fcf2f845eb86d20b4c602b17cdddedbf19dfc1bf48ae2e2ceb6c",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "alphaLocked",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 43,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setAlphaLocked set the layer to value if the node is paint layer.\n",
     "hash": "2e27998bb014bb8f2f130774a7e8ba877af8b7e91f1f152e5ece8129aae585af",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setAlphaLocked",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 48,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the blending mode of the layer. The values of the blending modes are defined in @see KoCompositeOpRegistry.h\n",
     "hash": "45656e3f87d5ea5acda392c22e6a43c2cf0208683f989bd549dcada9dd63bccc",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "blendingMode",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 53,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setBlendingMode set the blending mode of the node to the given value\n@param value one of the string values from @see KoCompositeOpRegistry.h\n",
     "hash": "d34e54d9592864e25e97783682fc5cdb3dd561f08b204d68ab9b483f521d77db",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setBlendingMode",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 59,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief channels creates a list of Channel objects that can be used individually to\nshow or hide certain channels, and to retrieve the contents of each channel in a\nnode separately.\n\nOnly layers have channels, masks do not, and calling channels on a Node that is a mask\nwill return an empty list.\n\n@return the list of channels ordered in by position of the channels in pixel position\n",
     "hash": "a66996a921eb33bd1c3317ba8c3bf33da88e7d8e3f9a70306a8ce55e5e356517",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "channels",
     "parameters": [],
     "returned": "list[Channel]",
     "sourceCodeLine": 71,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief childNodes\n@return returns a list of child nodes of the current node. The nodes are ordered from the bottommost up.\nThe function is not recursive.\n",
     "hash": "7eee29cd88bf54abf7ab0e3e11bac4836fd1fda4b2910c6521cbb27f4f0214a4",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "childNodes",
     "parameters": [],
     "returned": "list[Node]",
     "sourceCodeLine": 78,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief addChildNode adds the given node in the list of children.\n@param child the node to be added\n@param above the node above which this node will be placed\n@return false if adding the node failed\n",
     "hash": "3776c009d6e15b53e919091cc95b2b917885ba6e3cd6084ddd62e85604097e14",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "addChildNode",
     "parameters": [
      {
       "default": null,
       "name": "child",
       "type": "Node"
      },
      {
       "default": null,
       "name": "above",
       "type": "Node"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 97,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief removeChildNode removes the given node from the list of children.\n@param child the node to be removed\n",
     "hash": "8cdf50698da012ea4edabc3176f422759905e76a0ac8bfccb277a9114f3c1f35",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "removeChildNode",
     "parameters": [
      {
       "default": null,
       "name": "child",
       "type": "Node"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 103,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setChildNodes this replaces the existing set of child nodes with the new set.\n@param nodes The list of nodes that will become children, bottom-up -- the first node,\nis the bottom-most node in the stack.\n",
     "hash": "3f0bd5f1060cd49634046f011bc4c9cd4c48df519c09f6c28f34b520d4c619d7",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setChildNodes",
     "parameters": [
      {
       "default": null,
       "name": "nodes",
       "type": "list[Node]"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 110,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "colorDepth A string describing the color depth of the image:\n<ul>\n<li>U8: unsigned 8 bits integer, the most common type</li>\n<li>U16: unsigned 16 bits integer</li>\n<li>F16: half, 16 bits floating point. Only available if Krita was built with OpenEXR</li>\n<li>F32: 32 bits floating point</li>\n</ul>\n@return the color depth.\n",
     "hash": "715836fcdecec25381cb7b1bfa32b67ba464a81f7a9129881617e39716e35a0f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "colorDepth",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 122,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief colorModel retrieve the current color model of this document:\n<ul>\n<li>A: Alpha mask</li>\n<li>RGBA: RGB with alpha channel (The actual order of channels is most often BGR!)</li>\n<li>XYZA: XYZ with alpha channel</li>\n<li>LABA: LAB with alpha channel</li>\n<li>CMYKA: CMYK with alpha channel</li>\n<li>GRAYA: Gray with alpha channel</li>\n<li>YCbCrA: YCbCr with alpha channel</li>\n</ul>\n@return the internal color model string.\n",
     "hash": "f4408c04e21543834db38d49c8f525c323f0b6e26470c9382c784d7556333831",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "colorModel",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 137,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the name of the current color profile\n",
     "hash": "23e4e424e364e6b2401ea99002b23714adaa4245ba25d7d42771a536f8be6df6",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "colorProfile",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 142,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setColorProfile set the color profile of the image to the given profile. The profile has to\nbe registered with krita and be compatible with the current color model and depth; the image data\nis <i>not</i> converted.\n@param colorProfile\n@return if assigning the color profile worked\n",
     "hash": "663a662ca508b692148696dc0a8244c65356a39cd45cff838e4f42de1dce0c1a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setColorProfile",
     "parameters": [
      {
       "default": null,
       "name": "colorProfile",
       "type": "str"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 151,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setColorSpace convert the node to the given colorspace\n@param colorModel A string describing the color model of the node:\n<ul>\n<li>A: Alpha mask</li>\n<li>RGBA: RGB with alpha channel (The actual order of channels is most often BGR!)</li>\n<li>XYZA: XYZ with alpha channel</li>\n<li>LABA: LAB with alpha channel</li>\n<li>CMYKA: CMYK with alpha channel</li>\n<li>GRAYA: Gray with alpha channel</li>\n<li>YCbCrA: YCbCr with alpha channel</li>\n</ul>\n@param colorDepth A string describing the color depth of the image:\n<ul>\n<li>U8: unsigned 8 bits integer, the most common type</li>\n<li>U16: unsigned 16 bits integer</li>\n<li>F16: half, 16 bits floating point. Only available if Krita was built with OpenEXR</li>\n<li>F32: 32 bits floating point</li>\n</ul>\n@param colorProfile a valid color profile for this color model and color depth combination.\n",
     "hash": "1a2585b95243ffdd51b82409808b3f949b9d13e833292775e58339e7df998db1",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setColorSpace",
     "parameters": [
      {
       "default": null,
       "name": "colorModel",
       "type": "str"
      },
      {
       "default": null,
       "name": "colorDepth",
       "type": "str"
      },
      {
       "default": null,
       "name": "colorProfile",
       "type": "str"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 174,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Krita layers can be animated, i.e., have frames.\n@return return true if the layer has frames. Currently, the scripting framework\ndoes not give access to the animation features.\n",
     "hash": "4c75ca5512eaed115711d546ca6010155ac33d6b2179c5ddf7e60f9e6c32c697",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "animated",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 181,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief enableAnimation make the current layer animated, so it can have frames.\n",
     "hash": "200a12bfd75e31e8e0a49e6ae637486a9c2c09b1a41425005174c6be8be50845",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "enableAnimation",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 186,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Sets the state of the node to the value of @param collapsed\n",
     "hash": "fdf9cff19e4c76c0e02376d0b3e4769afe20fd90cd54f37c74f270f660d4ae5c",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setCollapsed",
     "parameters": [
      {
       "default": null,
       "name": "collapsed",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 202,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "returns the collapsed state of this node\n",
     "hash": "80c86a9f136b90c8f618e778f2048b83967bd04be5d0f3c5a1aad773b0df1d92",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "collapsed",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 207,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Sets a color label index associated to the layer.  The actual\ncolor of the label and the number of available colors is\ndefined by Krita GUI configuration.\n",
     "hash": "13aef6d42b2f358a97f4e358ed396591a906cec2934c2b5309f2b02c9d1793fc",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "colorLabel",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 214,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setColorLabel sets a color label index associated to the layer.  The actual\ncolor of the label and the number of available colors is\ndefined by Krita GUI configuration.\n@param index an integer corresponding to the set of available color labels.\n",
     "hash": "9333c015d56c10ad1bee6b7374a5c52f46fc62093d5a45e3e6eefc9da2f22e99",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setColorLabel",
     "parameters": [
      {
       "default": null,
       "name": "index",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 222,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief inheritAlpha checks whether this node has the inherits alpha flag set\n@return true if the Inherit Alpha is set\n",
     "hash": "f2657eadee7b6330f9601b781e65291b3751264fe26166789845cdb6ab5e91a4",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "inheritAlpha",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 228,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "set the Inherit Alpha flag to the given value\n",
     "hash": "9d692b66d6e55f430950460962fb770b3e0ec7cbee704b13e04ef3ca6c986522",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setInheritAlpha",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 233,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief locked checks whether the Node is locked. A locked node cannot be changed.\n@return true if the Node is locked, false if it hasn't been locked.\n",
     "hash": "79827faab60d3de91b3c9f249f0909721c77f89af3947a9708f99a8fd491e0e1",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "locked",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 239,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "set the Locked flag to the give value\n",
     "hash": "24a5a9ea4800657899a7f121edee23e68e77301aeba10bacb70101a2a82c1c20",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setLocked",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 244,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the user-visible name of this node.\n",
     "hash": "ad50a2ec9e534c81659aeb300aae94e89aa122a6e9d945c65200faaa1d7ac598",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "name",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 256,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "rename the Node to the given name\n",
     "hash": "84d762ebaa7c180e4491500a7550cee7a118cb957d14c04a57bc1c56f0b62ea4",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setName",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 261,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "return the opacity of the Node. The opacity is a value between 0 and 255.\n",
     "hash": "09eaefa0739884b6c845e9921776a1dbd8c5d16013976ae4165217e857354cf6",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "opacity",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 266,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "set the opacity of the Node to the given value. The opacity is a value between 0 and 255.\n",
     "hash": "b049e189cdc4f792558a0f6671f18b52ed6715b7a34609be8a114024f588342d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setOpacity",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 271,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "return the Node that is the parent of the current Node, or 0 if this is the root Node.\n",
     "hash": "8b91bc7fec18dd8706cfb72b4a7bc4ca0b37cd503e437be4b3fad5d273b75c0e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "parentNode",
     "parameters": [],
     "returned": "Node",
     "sourceCodeLine": 276,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief type Krita has several types of nodes, split in layers and masks. Group\nlayers can contain other layers, any layer can contain masks.\n\n@return The type of the node. Valid types are:\n<ul>\n <li>paintlayer\n <li>grouplayer\n <li>filelayer\n <li>filterlayer\n <li>filllayer\n <li>clonelayer\n <li>vectorlayer\n <li>transparencymask\n <li>filtermask\n <li>transformmask\n <li>selectionmask\n <li>colorizemask\n</ul>\n\nIf the Node object isn't wrapping a valid Krita layer or mask object, and\nempty string is returned.\n",
     "hash": "f3418964c605e81bbae4cf2728b5e2bedcdd5226f677c3c0233c38f35c7e7362",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": true,
     "name": "type",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 301,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief icon\n@return the icon associated with the layer.\n",
     "hash": "5e45db3633240e16d9741fc3555c972d38ba2b73f39616fc000e410576936fa7",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "icon",
     "parameters": [],
     "returned": "QIcon",
     "sourceCodeLine": 307,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Check whether the current Node is visible in the layer stack\n",
     "hash": "ec2b07069c90f09461da80f9a158a14ef0e578cbef6606dd4c1d41da1c865ce2",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "visible",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 312,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Set the visibility of the current node to @param visible\n",
     "hash": "41c89887630d0070af563f75f18cf587cd4742519444979ac3a7116ea131f2e8",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setVisible",
     "parameters": [
      {
       "default": null,
       "name": "visible",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 322,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief pixelData reads the given rectangle from the Node's paintable pixels, if those\nexist, and returns it as a byte array. The pixel data starts top-left, and is ordered row-first.\n\nThe byte array can be interpreted as follows: 8 bits images have one byte per channel,\nand as many bytes as there are channels. 16 bits integer images have two bytes per channel,\nrepresenting an unsigned short. 16 bits float images have two bytes per channel, representing\na half, or 16 bits float. 32 bits float images have four bytes per channel, representing a\nfloat.\n\nYou can read outside the node boundaries; those pixels will be transparent black.\n\nThe order of channels is:\n\n<ul>\n<li>Integer RGBA: Blue, Green, Red, Alpha\n<li>Float RGBA: Red, Green, Blue, Alpha\n<li>GrayA: Gray, Alpha\n<li>Selection: selectedness\n<li>LabA: L, a, b, Alpha\n<li>CMYKA: Cyan, Magenta, Yellow, Key, Alpha\n<li>XYZA: X, Y, Z, A\n<li>YCbCrA: Y, Cb, Cr, Alpha\n</ul>\n\nThe byte array is a copy of the original node data. In Python, you can use bytes, bytearray\nand the struct module to interpret the data and construct, for instance, a Pillow Image object.\n\nIf you read the pixeldata of a mask, a filter or generator layer, you get the selection bytes,\nwhich is one channel with values in the range from 0..255.\n\nIf you want to change the pixels of a node you can write the pixels back after manipulation\nwith setPixelData(). This will only succeed on nodes with writable pixel data, e.g not on groups\nor file layers.\n\n@param x x position from where to start reading\n@param y y position from where to start reading\n@param w row length to read\n@param h number of rows to read\n@return a QByteArray with the pixel data. The byte array may be empty.\n",
     "hash": "444141ca1c5390d513ea4df49e67e0338c82edd903a6460ed5cad5d70c2244f4",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "pixelData",
     "parameters": [
      {
       "default": null,
       "name": "x",
       "type": "int"
      },
      {
       "default": null,
       "name": "y",
       "type": "int"
      },
      {
       "default": null,
       "name": "w",
       "type": "int"
      },
      {
       "default": null,
       "name": "h",
       "type": "int"
      }
     ],
     "returned": "QByteArray",
     "sourceCodeLine": 366,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief pixelDataAtTime a basic function to get pixeldata from an animated node at a given time.\n@param x the position from the left to start reading.\n@param y the position from the top to start reader\n@param w the row length to read\n@param h the number of rows to read\n@param time the frame number\n@return a QByteArray with the pixel data. The byte array may be empty.\n",
     "hash": "dc64a7ae2671ded8f4950316915a96356a07e83d2d3c2a959358c26470218423",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "pixelDataAtTime",
     "parameters": [
      {
       "default": null,
       "name": "x",
       "type": "int"
      },
      {
       "default": null,
       "name": "y",
       "type": "int"
      },
      {
       "default": null,
       "name": "w",
       "type": "int"
      },
      {
       "default": null,
       "name": "h",
       "type": "int"
      },
      {
       "default": null,
       "name": "time",
       "type": "int"
      }
     ],
     "returned": "QByteArray",
     "sourceCodeLine": 377,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief projectionPixelData reads the given rectangle from the Node's projection (that is, what the node\nlooks like after all sub-Nodes (like layers in a group or masks on a layer) have been applied,\nand returns it as a byte array. The pixel data starts top-left, and is ordered row-first.\n\nThe byte array can be interpreted as follows: 8 bits images have one byte per channel,\nand as many bytes as there are channels. 16 bits integer images have two bytes per channel,\nrepresenting an unsigned short. 16 bits float images have two bytes per channel, representing\na half, or 16 bits float. 32 bits float images have four bytes per channel, representing a\nfloat.\n\nYou can read outside the node boundaries; those pixels will be transparent black.\n\nThe order of channels is:\n\n<ul>\n<li>Integer RGBA: Blue, Green, Red, Alpha\n<li>Float RGBA: Red, Green, Blue, Alpha\n<li>GrayA: Gray, Alpha\n<li>Selection: selectedness\n<li>LabA: L, a, b, Alpha\n<li>CMYKA: Cyan, Magenta, Yellow, Key, Alpha\n<li>XYZA: X, Y, Z, A\n<li>YCbCrA: Y, Cb, Cr, Alpha\n</ul>\n\nThe byte array is a copy of the original node data. In Python, you can use bytes, bytearray\nand the struct module to interpret the data and construct, for instance, a Pillow Image object.\n\nIf you read the projection of a mask, you get the selection bytes, which is one channel with\nvalues in the range from 0..255.\n\nIf you want to change the pixels of a node you can write the pixels back after manipulation\nwith setPixelData(). This will only succeed on nodes with writable pixel data, e.g not on groups\nor file layers.\n\n@param x x position from where to start reading\n@param y y position from where to start reading\n@param w row length to read\n@param h number of rows to read\n@return a QByteArray with the pixel data. The byte array may be empty.\n",
     "hash": "9e94ed2584ab79dfabe7070ed09c9a086be7d2973a0ea78528a026dd0cbde66c",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "projectionPixelData",
     "parameters": [
      {
       "default": null,
       "name": "x",
       "type": "int"
      },
      {
       "default": null,
       "name": "y",
       "type": "int"
      },
      {
       "default": null,
       "name": "w",
       "type": "int"
      },
      {
       "default": null,
       "name": "h",
       "type": "int"
      }
     ],
     "returned": "QByteArray",
     "sourceCodeLine": 421,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setPixelData writes the given bytes, of which there must be enough, into the\nNode, if the Node has writable pixel data:\n\n<ul>\n<li>paint layer: the layer's original pixels are overwritten\n<li>filter layer, generator layer, any mask: the embedded selection's pixels are overwritten.\n<b>Note:</b> for these\n</ul>\n\nFile layers, Group layers, Clone layers cannot be written to. Calling setPixelData on\nthose layer types will silently do nothing.\n\n@param value the byte array representing the pixels. There must be enough bytes available.\nKrita will take the raw pointer from the QByteArray and start reading, not stopping before\n(number of channels * size of channel * w * h) bytes are read.\n\n@param x the x position to start writing from\n@param y the y position to start writing from\n@param w the width of each row\n@param h the number of rows to write\n@return true if writing the pixeldata worked\n",
     "hash": "895d44538b7dd770ed147361818c488df06ec45c5177081e72625659e048e2cd",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setPixelData",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "QByteArray"
      },
      {
       "default": null,
       "name": "x",
       "type": "int"
      },
      {
       "default": null,
       "name": "y",
       "type": "int"
      },
      {
       "default": null,
       "name": "w",
       "type": "int"
      },
      {
       "default": null,
       "name": "h",
       "type": "int"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 446,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief bounds return the exact bounds of the node's paint device\n@return the bounds, or an empty QRect if the node has no paint device or is empty.\n",
     "hash": "99549080ffeadc9de8d225f5a17185d6c6f7953b83f22e2d8f3362aed465a8ec",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "bounds",
     "parameters": [],
     "returned": "QRect",
     "sourceCodeLine": 452,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": " move the pixels to the given x, y location in the image coordinate space.\n",
     "hash": "575ed8dd7f1a24f131252d2c86eb06f039ad6d99a38dca57ac0c935b8ae4fbe6",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "move",
     "parameters": [
      {
       "default": null,
       "name": "x",
       "type": "int"
      },
      {
       "default": null,
       "name": "y",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 457,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief position returns the position of the paint device of this node. The position is\nalways 0,0 unless the layer has been moved. If you want to know the topleft position of\nthe rectangle around the actual non-transparent pixels in the node, use bounds().\n@return the top-left position of the node\n",
     "hash": "44bd3067d21447669febc3ac418e1f75720dfb0abec14b012ffe4ee640daa62a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "position",
     "parameters": [],
     "returned": "QPoint",
     "sourceCodeLine": 465,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040102-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief remove removes this node from its parent image.\n",
     "hash": "b183149f0eaf4b09e16d6885aa99443a3c40107399630c04b90c28cbcb9e107c",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "remove",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 470,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief duplicate returns a full copy of the current node. The node is not inserted in the graphic\n@return a valid Node object or 0 if the node couldn't be duplicated.\n",
     "hash": "39014e4e6f27bde3cef574062fcb6d4caf8999c514942d83412898c4be9d3937",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "duplicate",
     "parameters": [],
     "returned": "Node",
     "sourceCodeLine": 476,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief save exports the given node with this filename. The extension of the filename determines the filetype.\n@param filename the filename including extension\n@param xRes the horizontal resolution in pixels per pt (there are 72 pts in an inch)\n@param yRes the horizontal resolution in pixels per pt (there are 72 pts in an inch)\n@param exportConfiguration a configuration object appropriate to the file format.\n@param exportRect the export bounds for saving a node as a QRect\nIf \\p exportRect is empty, then save exactBounds() of the node. If you'd like to save the image-\naligned area of the node, just pass image->bounds() there.\nSee Document->exportImage for InfoObject details.\n@return true if saving succeeded, false if it failed.\n",
     "hash": "768b6df53f22d7d8764e34131332a3cff6ede2af3334873e98d67963d5001e4b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "save",
     "parameters": [
      {
       "default": null,
       "name": "filename",
       "type": "str"
      },
      {
       "default": null,
       "name": "xRes",
       "type": "float"
      },
      {
       "default": null,
       "name": "yRes",
       "type": "float"
      },
      {
       "default": null,
       "name": "exportConfiguration",
       "type": "InfoObject"
      },
      {
       "default": "QRect()",
       "name": "exportRect",
       "type": "QRect"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 490,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief mergeDown merges the given node with the first visible node underneath this node in the layerstack.\nThis will drop all per-layer metadata.\n",
     "hash": "d64251a82174f10092d98e7e6b8a41fd50d4abccd877eef8b70ebda5c84c58f7",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "mergeDown",
     "parameters": [],
     "returned": "Node",
     "sourceCodeLine": 496,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040102-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief scaleNode\n@param origin the origin point\n@param width the width\n@param height the height\n@param strategy the scaling strategy. There's several ones amongst these that aren't available in the regular UI.\n<ul>\n<li>Hermite</li>\n<li>Bicubic - Adds pixels using the color of surrounding pixels. Produces smoother tonal gradations than Bilinear.</li>\n<li>Box - Replicate pixels in the image. Preserves all the original detail, but can produce jagged effects.</li>\n<li>Bilinear - Adds pixels averaging the color values of surrounding pixels. Produces medium quality results when the image is scaled from half to two times the original size.</li>\n<li>Bell</li>\n<li>BSpline</li>\n<li>Lanczos3 - Offers similar results than Bicubic, but maybe a little bit sharper. Can produce light and dark halos along strong edges.</li>\n<li>Mitchell</li>\n</ul>\n",
     "hash": "286d88efccf03996d3a9b09d9917b381020a114245d02f66315ecc7fa3f2ce32",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "scaleNode",
     "parameters": [
      {
       "default": null,
       "name": "origin",
       "type": "QPointF"
      },
      {
       "default": null,
       "name": "width",
       "type": "int"
      },
      {
       "default": null,
       "name": "height",
       "type": "int"
      },
      {
       "default": null,
       "name": "strategy",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 515,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief rotateNode rotate this layer by the given radians.\n@param radians amount the layer should be rotated in, in radians.\n",
     "hash": "7be274bed1db974e038fc3e18355d9002d8a327b8651df2f10a26ef7212501cc",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "rotateNode",
     "parameters": [
      {
       "default": null,
       "name": "radians",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 521,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief cropNode crop this layer.\n@param x the left edge of the cropping rectangle.\n@param y the top edge of the cropping rectangle\n@param w the right edge of the cropping rectangle\n@param h the bottom edge of the cropping rectangle\n",
     "hash": "a2ef097aaf796990dbc6c671e3d0c94528f358688ee623f59a7000519cfe4a64",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "cropNode",
     "parameters": [
      {
       "default": null,
       "name": "x",
       "type": "int"
      },
      {
       "default": null,
       "name": "y",
       "type": "int"
      },
      {
       "default": null,
       "name": "w",
       "type": "int"
      },
      {
       "default": null,
       "name": "h",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 530,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief shearNode perform a shear operation on this node.\n@param angleX the X-angle in degrees to shear by\n@param angleY the Y-angle in degrees to shear by\n",
     "hash": "8c1fe4e0b9acbee817f2dc2fe0b642fb3a9c5051d928bedbbf2f71b155fb8db2",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "shearNode",
     "parameters": [
      {
       "default": null,
       "name": "angleX",
       "type": "float"
      },
      {
       "default": null,
       "name": "angleY",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 537,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief thumbnail create a thumbnail of the given dimensions. The thumbnail is sized according\nto the layer dimensions, not the image dimensions. If the requested size is too big a null\nQImage is created. If the current node cannot generate a thumbnail, a transparent QImage of the\nrequested size is generated.\n@return a QImage representing the layer contents.\n",
     "hash": "2a25b9dd113308ff4e5ef86b051eaf0ae1b247d91603a53b9a0231e10436cf51",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "thumbnail",
     "parameters": [
      {
       "default": null,
       "name": "w",
       "type": "int"
      },
      {
       "default": null,
       "name": "h",
       "type": "int"
      }
     ],
     "returned": "QImage",
     "sourceCodeLine": 546,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief does the node have any content in it?\n@return if node has any content in it\n",
     "hash": "3ce62b21b2ce8e961bb54f5fcddfd78e489dd3ef355456751db75ceef25e30c6",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "hasExtents",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 250,
     "tagRef": {
      "available": [
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040100-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Should the node be visible in the timeline. It defaults to false\nwith new layer\n",
     "hash": "c5dcef5543e8e5d14397222f8d9da525803d043e79b3d7238990cc181a5b9837",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setShowInTimeline",
     "parameters": [
      {
       "default": null,
       "name": "showInTimeline",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 192,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return is layer is shown in the timeline\n",
     "hash": "8200a5ac1e61014a305e8f1de1f85f12876f2afa698305980316a3d8a69c200c",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "showInTimeline",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 197,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Check to see if frame number on layer is a keyframe\n",
     "hash": "ca63b7ad2b6eb2e4cfae8df4c03aeddde41598e931ec428ff909129afb787257",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "hasKeyframeAtTime",
     "parameters": [
      {
       "default": null,
       "name": "frameNumber",
       "type": "int"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 317,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief uniqueId uniqueId of the node\n@return a QUuid representing a unique id to identify the node\n",
     "hash": "14ca0fdcd590b6d4f06a0cfab661b34e1d017d87bfff5122b60230c07ce4ae8f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "uniqueId",
     "parameters": [],
     "returned": "QUuid",
     "sourceCodeLine": 571,
     "tagRef": {
      "available": [
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040405-XX",
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Sets whether or not node should be pinned to the Timeline Docker,\nregardless of selection activity.\n",
     "hash": "ea1aaa8734fc150888eb24fe18eda73a6d5754163722257ed59774c2164a5b37",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setPinnedToTimeline",
     "parameters": [
      {
       "default": null,
       "name": "pinned",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 192,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return Returns true if node is pinned to the Timeline Docker or false if it is not.\n",
     "hash": "2b1f9358378d72976af35d4d6ee7c5b5396a9bcdb89583b96d5e6c3fc8dde4ad",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "isPinnedToTimeline",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 197,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief layerStyleToAsl retrieve the current layer's style in ASL format.\n@return a QString in ASL format representing the layer style.\n",
     "hash": "1a793c5c420008678d030472414cf7b22786b906ffca5f5fa044cc632764bc86",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "layerStyleToAsl",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 552,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX",
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setLayerStyleFromAsl set a new layer style for this node.\n@param aslContent a string formatted in ASL format containing the layer style\n@return true if layer style was set, false if failed.\n",
     "hash": "d250501763dd1c31d63b2c4ae38bde3763c0526789e804785927f7ab24925733",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setLayerStyleFromAsl",
     "parameters": [
      {
       "default": null,
       "name": "asl",
       "type": "str"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 559,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief index the index of the node inside the parent\n@return an integer representing the node's index inside the parent\n",
     "hash": "5d502e9e1a3801e93a5bb939a4fd85792ec99e3a4c875a63eee8758894d97f7a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "index",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 565,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief findChildNodes\n@param name name of the child node to search for. Leaving this blank will return all nodes.\n@param recursive whether or not to search recursively. Defaults to false.\n@param partialMatch return if the name partially contains the string (case insensitive). Defaults to false.\n@param type filter returned nodes based on type\n@param colorLabelIndex filter returned nodes based on color label index\n@return returns a list of child nodes and grand child nodes of the current node that match the search criteria.\n",
     "hash": "53feef4e985cd1332a10472503e2cebcce9916e5c4750eab3e5bc4c928bb4d72",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "findChildNodes",
     "parameters": [
      {
       "default": "\"\"",
       "name": "name",
       "type": "str"
      },
      {
       "default": "False",
       "name": "recursive",
       "type": "bool"
      },
      {
       "default": "False",
       "name": "partialMatch",
       "type": "bool"
      },
      {
       "default": "\"\"",
       "name": "type",
       "type": "str"
      },
      {
       "default": "0",
       "name": "colorLabelIndex",
       "type": "int"
      }
     ],
     "returned": "list[Node]",
     "sourceCodeLine": 89,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    }
   ],
   "name": "Node",
   "sourceCodeLine": 21,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX",
     "040100-XX",
     "040200-XX",
     "040405-XX",
     "050000-XX",
     "050200-XX"
    ]
   }
  },
  "Notifier": {
   "description": "The Notifier can be used to be informed of state changes in the Krita application.\n",
   "extend": "QObject",
   "fileName": "Notifier.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@return true if the Notifier is active.\n",
     "hash": "13f3d60e2f3a46bc27c6e06d0a3c2d420496c6a29899ed4c594622aea19d77c1",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "active",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 36,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Enable or disable the Notifier\n",
     "hash": "ae2d9a45d3ef1bfd69cb4c2ea656b0fdf5b49347fa7ddce08fd77485563a88e3",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setActive",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 41,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief applicationClosing is emitted when the application is about to close. This\nhappens after any documents and windows are closed.\n",
     "hash": "01c226441adf20673398226acaabce950a60d3c92c24de9e3267d8e7a3232051",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "applicationClosing",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 49,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief imageCreated is emitted whenever a new image is created and registered with\nthe application.\n",
     "hash": "d42147471b194b2d67beb615a236631ee05d267f6a832441cd38516fa5a2f415",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "imageCreated",
     "parameters": [
      {
       "default": null,
       "name": "image",
       "type": "Document"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 55,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief imageSaved is emitted whenever a document is saved.\n@param filename the filename of the document that has been saved.\n",
     "hash": "b7b1a865220696a032f928eed8bfe0235618d1c2dbde79953c4e2a207cd66774",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "imageSaved",
     "parameters": [
      {
       "default": null,
       "name": "filename",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 61,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief imageClosed is emitted whenever the last view on an image is closed. The image\ndoes not exist anymore in Krita\n@param filename the filename of the image.\n",
     "hash": "28aa707eb35414ea388c30ef99fd9b0dac591f93969f5b5f37e6db5ade678ff2",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "imageClosed",
     "parameters": [
      {
       "default": null,
       "name": "filename",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 68,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief viewCreated is emitted whenever a new view is created.\n@param view the view\n",
     "hash": "3c9e067717492a42f83dd93db4bbed696798eb18746647941f7ce072a58ed185",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "viewCreated",
     "parameters": [
      {
       "default": null,
       "name": "view",
       "type": "View"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 74,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief viewClosed is emitted whenever a view is closed\n@param view the view\n",
     "hash": "0fe47a9488a4f48660800995d7303246e71ec5e1d628b38654b697224bc0b053",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "viewClosed",
     "parameters": [
      {
       "default": null,
       "name": "view",
       "type": "View"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 80,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief windowIsCreated is emitted after main window is completely created\n",
     "hash": "36f1a4e5f83da57e367e2d6d80dbffe7bdf86b2272fd56806789d11ee05733d4",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "windowCreated",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 91,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief configurationChanged is emitted every time Krita's configuration\nhas changed.\n",
     "hash": "e44312c04be0bc57844582f0ccfbcd6ab3c814a9351c2b62433a185ec9c04629",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "configurationChanged",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 97,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief windowCreated is emitted whenever a window is being created\n@param window the window; this is called from the constructor of the window, before the xmlgui file is loaded\n",
     "hash": "2efc4b8e9a03ed44dbf03887b07f11debcc43c3af8af2c8363b3a1979c2f48a6",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "windowIsBeingCreated",
     "parameters": [
      {
       "default": null,
       "name": "window",
       "type": "Window"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 86,
     "tagRef": {
      "available": [
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040300-XX"
      ]
     }
    }
   ],
   "name": "Notifier",
   "sourceCodeLine": 22,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX",
     "040300-XX"
    ]
   }
  },
  "Palette": {
   "description": "@brief The Palette class\nPalette is a resource object that stores organised color data.\nIt's purpose is to allow artists to save colors and store them.\n\nAn example for printing all the palettes and the entries:\n\n@code\nimport sys\nfrom krita import *\n\nresources = Application.resources(\"palette\")\n\nfor (k, v) in resources.items():\n    print(k)\n    palette = Palette(v)\n    for x in range(palette.numberOfEntries()):\n        entry = palette.colorSetEntryByIndex(x)\n        print(x, entry.name(), entry.id(), entry.spotColor())\n@endcode\n",
   "extend": "QObject",
   "fileName": "Palette.h",
   "methods": [
    {
     "accesType": "public",
     "description": "",
     "hash": "0904efe97192d23ba5a40acc8193a159c89d0e9dc2e56d14eb1900df4781c012",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "Palette",
     "parameters": [
      {
       "default": null,
       "name": "resource",
       "type": "Resource"
      }
     ],
     "returned": "Palette",
     "sourceCodeLine": 48,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief number of colors (swatches) in palette\nNOTE: same as `colorsCountTotal()`\n\n@return total number of colors\n",
     "hash": "1f26e92d67416701aa8cd6358004c1baf25c5b87d7c17027639e81bced5f68cd",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "numberOfEntries",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 64,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Palettes are defined in grids.\nThe number of column define grid width.\nThe number of rows will depend of columns and total number of entries.\n\n@return the number of columns this palette is set to use.\n",
     "hash": "977e93ecdb047b38bd0cfcea2cbe025f05ee0202e8eb8a28612c818857dea72e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "columnCount",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 73,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Palettes are defined in grids.\nThe number of column define grid width, this value can be defined.\nThe number of rows will depend of columns and total number of entries.\n\n@param columns Set the amount of columns this palette should use.\n",
     "hash": "601202af356bbdeafb0e9100185067208c18a6c4dc6bf0a5c4a86dab55bc84f8",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setColumnCount",
     "parameters": [
      {
       "default": null,
       "name": "columns",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 81,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief the comment or description associated with the palette.\n\n@return A string for which value contains the comment/description of palette.\n",
     "hash": "6d7fd680052346ca4c19cf124a8f3322201f6a6550f5a5ae8a874a8df07d25af",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "comment",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 88,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief the comment or description associated with the palette.\n\n@param comment set the comment or description associated with the palette.\n",
     "hash": "91f3e2c6596633f7e23f40bd5570569b35c3e8c0659740a4e7f09fe3db2dab25",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setComment",
     "parameters": [
      {
       "default": null,
       "name": "comment",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 95,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Palette content can be organized in groups.\n\n@return The list of group names (list of string). This list follow the order the groups are defined in palette.\n",
     "hash": "8149a017c5aa69c93acdb585e77ea5e5d610b9f5d32473e542896cb8ca9cb653",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "groupNames",
     "parameters": [],
     "returned": "list[str]",
     "sourceCodeLine": 102,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Palette content can be organized in groups.\nThis method allows to add a new group in palette.\n\n@param name The name of the new group to add.\n",
     "hash": "e68807848987958c1348229d1725a9da55099b51d28e50aa160a36295f30ecdb",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "addGroup",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 110,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "050200-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Palette content can be organized in groups.\nThis method allows to remove an existing group from palette.\n\n@param name The name of the new group to remve.\n@param keepColors whether or not to delete all the colors inside, or to move them to the default group.\n",
     "hash": "34ce27e768b5f3510011b90d5fd8006ec58aae3d9b902c8ae452ae55dca6e9f9",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "removeGroup",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      },
      {
       "default": "True",
       "name": "keepColors",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 119,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "050200-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief number of colors (swatches) in palette\nNOTE: same as `numberOfEntries()`\n\n@return total number of colors\n",
     "hash": "44c7bf1a19f3000198cd1814852dcd3221cf19430d505f8c147b0a00f4c6e84a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "colorsCountTotal",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 127,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief colorsCountGroup\n@param name of the group to check. Empty is the default group.\n@return the amount of colors within that group.\n",
     "hash": "cfe1ca2745441c75c20f0cdc5f9555c2a7581bbc7ee39af0d1a83b75c0eac5c4",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "colorsCountGroup",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      }
     ],
     "returned": "int",
     "sourceCodeLine": 116,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief remove from defined group a color entry designed by given index.\n\n@param index index in the group.\n@param groupName the name of the group within which color have to be removed.\n",
     "hash": "40446bd8705baadf5518eae806586a8b4bd94d3ff88b22413cccee39ae46dfe1",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "removeEntry",
     "parameters": [
      {
       "default": null,
       "name": "index",
       "type": "int"
      },
      {
       "default": null,
       "name": "groupName",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 183,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief changeGroupName\nchange the group name.\n\nDEPRECATED: use `renameGroup()` instead\n\n@param oldGroupName the old groupname to change.\n@param newGroupName the new name to change it into.\n@return whether successful. Reasons for failure include not knowing have oldGroupName\n",
     "hash": "c5e1fc37be97df29ddeb5222e63e28edbe72911c3aa71113eb4aa6afc9a3f6f4",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "changeGroupName",
     "parameters": [
      {
       "default": null,
       "name": "oldGroupName",
       "type": "str"
      },
      {
       "default": null,
       "name": "newGroupName",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 195,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "050200-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Move the group `groupName` to position before group `groupNameInsertBefore`.\n\n@param groupName group to move.\n@param groupNameInsertBefore reference group for which `groupName` have to be moved before.\n",
     "hash": "cb0c69ccc7e4a5bb95292f1d044e8d646cad8eb2ab04eeb7c9cbcc794ff6231f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "moveGroup",
     "parameters": [
      {
       "default": null,
       "name": "groupName",
       "type": "str"
      },
      {
       "default": "\"\"",
       "name": "groupNameInsertBefore",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 211,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "050200-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief save the palette\n\nWARNING: this method does nothing and need to be implemented!\n\n@return always False\n",
     "hash": "70db70cac67b225d05a458f24729919f80cf2d69056d2b15d8062490a99743cf",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "save",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 220,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief colorSetEntryByIndex\nget the colorsetEntry from the global index.\n\nDEPRECATED: use `entryByIndex()` instead\n\n@param index the global index\n@return the colorset entry\n",
     "hash": "85078bc13c1fa835fe3cde1d63b2f2171891d0f4064968f29b270c1a94be09d8",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "colorSetEntryByIndex",
     "parameters": [
      {
       "default": null,
       "name": "index",
       "type": "int"
      }
     ],
     "returned": "Swatch",
     "sourceCodeLine": 138,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief colorSetEntryFromGroup\n\nDEPRECATED: use `entryByIndexFromGroup()` instead\n\n@param index index in the group.\n@param groupName the name of the group to get the color from.\n@return the colorsetentry.\n",
     "hash": "408af658886f2b357573a4bb64a76a8cb9df916fcd98ee4ad0449bf95a859286",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "colorSetEntryFromGroup",
     "parameters": [
      {
       "default": null,
       "name": "index",
       "type": "int"
      },
      {
       "default": null,
       "name": "groupName",
       "type": "str"
      }
     ],
     "returned": "Swatch",
     "sourceCodeLine": 157,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief add a color entry to a group.\nColor is appended to the end.\n\n@param entry the entry\n@param groupName the name of the group to add to.\n",
     "hash": "cbfef85139abdffc66124cadaa57d0155765be0a8e43601884311409da7e6203",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "addEntry",
     "parameters": [
      {
       "default": null,
       "name": "entry",
       "type": "Swatch"
      },
      {
       "default": "\"\"",
       "name": "groupName",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 175,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief get color (swatch) from the global index.\n\n@param index the global index\n@return The Swatch color for given index.\n",
     "hash": "fe59ee651cf33d78b069752229ce5ccd83aeba47e7610d1b351531f750e5bc56",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "entryByIndex",
     "parameters": [
      {
       "default": null,
       "name": "index",
       "type": "int"
      }
     ],
     "returned": "Swatch",
     "sourceCodeLine": 146,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief get color (swatch) from the given group index.\n\n@param index index in the group.\n@param groupName the name of the group to get the color from.\n@return The Swatch color for given index within given group name.\n",
     "hash": "5df9381061a50a8e26c37df712c2292089c23f1fb9b9225cad7a6d699839df1d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "entryByIndexFromGroup",
     "parameters": [
      {
       "default": null,
       "name": "index",
       "type": "int"
      },
      {
       "default": null,
       "name": "groupName",
       "type": "str"
      }
     ],
     "returned": "Swatch",
     "sourceCodeLine": 166,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief rename a group\n\n@param oldGroupName the old groupname to change.\n@param newGroupName the new name to change it into.\n",
     "hash": "dfc1b51078deac216ba93339613d4be0a55f03a67641d685fb66a689039c7a82",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "renameGroup",
     "parameters": [
      {
       "default": null,
       "name": "oldGroupName",
       "type": "str"
      },
      {
       "default": null,
       "name": "newGroupName",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 203,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    }
   ],
   "name": "Palette",
   "sourceCodeLine": 44,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX",
     "040200-XX",
     "master"
    ]
   }
  },
  "PaletteView": {
   "description": "@class PaletteView\n@brief The PaletteView class is a wrapper around a MVC method for handling\npalettes. This class shows a nice widget that can drag and drop, edit colors in a colorset\nand will handle adding and removing entries if you'd like it to.\n",
   "extend": "QWidget",
   "fileName": "PaletteView.h",
   "methods": [
    {
     "accesType": "public",
     "description": "",
     "hash": "1fb8241b39793c6cf245309230bdd898aa46cd73e6fb0078b3f75f9c1c9476f6",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "PaletteView",
     "parameters": [
      {
       "default": "None",
       "name": "parent",
       "type": "QWidget"
      }
     ],
     "returned": "PaletteView",
     "sourceCodeLine": 35,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setPalette\nSet a new palette.\n@param palette\n",
     "hash": "429dd8fc5ded96d62996c6ff0b5b4d1b04b7cf403186ffffd347bc682a15fec1",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setPalette",
     "parameters": [
      {
       "default": null,
       "name": "palette",
       "type": "Palette"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 43,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief addEntryWithDialog\nThis gives a simple dialog for adding colors, with options like\nadding name, id, and to which group the color should be added.\n@param color the default color to add\n@return whether it was successful.\n",
     "hash": "0f97249d6903efce0cad821f7750b825098b242d118e7073ed1ca8eedec90223",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "addEntryWithDialog",
     "parameters": [
      {
       "default": null,
       "name": "color",
       "type": "ManagedColor"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 51,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief addGroupWithDialog\ngives a little dialog to ask for the desired groupname.\n@return whether this was successful.\n",
     "hash": "2c3755feba6ade991c9a62132ef35e622b0da35e715e98c4a43ac1041f3846e9",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "addGroupWithDialog",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 57,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief removeSelectedEntryWithDialog\nremoves the selected entry. If it is a group, it pop up a dialog\nasking whether the colors should also be removed.\n@return whether this was successful\n",
     "hash": "bfd177d887da1cd196e451ea89f59d223ef9ff769a9bd2ec072e02ed93f9fe17",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "removeSelectedEntryWithDialog",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 64,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief trySelectClosestColor\ntries to select the closest color to the one given.\nIt does not force a change on the active color.\n@param color the color to compare to.\n",
     "hash": "71594c52b779069d98b1cfe05b1516b53fb7bdba5bbf115c90d9ec7c961fbc07",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "trySelectClosestColor",
     "parameters": [
      {
       "default": null,
       "name": "color",
       "type": "ManagedColor"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 71,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief entrySelectedForeGround\nfires when a swatch is selected with leftclick.\n@param entry\n",
     "hash": "509e41eb35bec7c6483b18734e3cce0fb869b094b9893bb183eb75e5e8be3dc3",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "entrySelectedForeGround",
     "parameters": [
      {
       "default": null,
       "name": "entry",
       "type": "Swatch"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 78,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief entrySelectedBackGround\nfires when a swatch is selected with rightclick.\n@param entry\n",
     "hash": "b574c1068379fb4bf44bf4bf8b1fa1a6eca0b396b009faeccd450359b5ab7343",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "entrySelectedBackGround",
     "parameters": [
      {
       "default": null,
       "name": "entry",
       "type": "Swatch"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 84,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    }
   ],
   "name": "PaletteView",
   "sourceCodeLine": 31,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX",
     "040200-XX"
    ]
   }
  },
  "Preset": {
   "description": "@brief The Preset class\nPreset is a resource object that stores brush preset data.\n\nAn example for printing the current brush preset and all its settings:\n\n@code\nfrom krita import *\n\nview = Krita.instance().activeWindow().activeView()\npreset = Preset(view.currentBrushPreset())\n\nprint ( preset.toXML() )\n@endcode\n",
   "extend": "QObject",
   "fileName": "Preset.h",
   "methods": [
    {
     "accesType": "public",
     "description": "",
     "hash": "46492a10b56b8a0593e790b5072c4fd1719dfda37da8ed92ad77e9ac9841e72f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "Preset",
     "parameters": [
      {
       "default": null,
       "name": "resource",
       "type": "Resource"
      }
     ],
     "returned": "Preset",
     "sourceCodeLine": 37,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief toXML\nconvert the preset settings into a preset formatted xml.\n@return the xml in a string.\n",
     "hash": "2f7d17dd8377581b9b98e7f9f8a9966a3ab8baca76ec855231710dbfebc0a306",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "toXML",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 45,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief fromXML\nconvert the preset settings into a preset formatted xml.\n@param xml valid xml preset string.\n",
     "hash": "773c55097d72b41e22bfbc3fbcd660df9b85b567979d6946c610f5b495b166b7",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "fromXML",
     "parameters": [
      {
       "default": null,
       "name": "xml",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 52,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    }
   ],
   "name": "Preset",
   "sourceCodeLine": 34,
   "tagRef": {
    "available": [
     "050200-XX"
    ],
    "updated": [
     "050200-XX"
    ]
   }
  },
  "PresetChooser": {
   "description": "@brief The PresetChooser widget wraps the KisPresetChooser widget.\nThe widget provides for selecting brush presets. It has a tagging\nbar and a filter field. It is not automatically synchronized with \nthe currently selected preset in the current Windows.\n",
   "extend": "KisPresetChooser",
   "fileName": "PresetChooser.h",
   "methods": [
    {
     "accesType": "public",
     "description": "",
     "hash": "4934a5c137d69fa284ebb922b25237e4253b03052606bdbfa887a5b6bace7c8d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "PresetChooser",
     "parameters": [
      {
       "default": "None",
       "name": "parent",
       "type": "QWidget"
      }
     ],
     "returned": "PresetChooser",
     "sourceCodeLine": 29,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return a Resource wrapper around the currently selected\npreset. \n",
     "hash": "b908712f0164ad36fdc5aad661603344fe496843d5d6d794fc5dd75db28d3fc2",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "currentPreset",
     "parameters": [],
     "returned": "Resource",
     "sourceCodeLine": 43,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Emitted whenever a user selects the given preset.\n",
     "hash": "a4035a5b0e1c367f5efa994a53e1ddab519548f20a5ef589891f18ef98abc469",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "presetSelected",
     "parameters": [
      {
       "default": null,
       "name": "resource",
       "type": "Resource"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 50,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Emitted whenever a user clicks on the given preset.\n",
     "hash": "a2fb4462857dc6b9ef5a76cbd867e6ac3d19a55736e62e70ec2a070850280dc0",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "presetClicked",
     "parameters": [
      {
       "default": null,
       "name": "resource",
       "type": "Resource"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 55,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    }
   ],
   "name": "PresetChooser",
   "sourceCodeLine": 25,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX"
    ]
   }
  },
  "Resource": {
   "description": "A Resource represents a gradient, pattern, brush tip, brush preset, palette or \nworkspace definition.\n\n@code\nallPresets = Application.resources(\"preset\")\nfor preset in allPresets:\n    print(preset.name())\n@endcode\n\nResources are identified by their type, name and filename. If you want to change\nthe contents of a resource, you should read its data using data(), parse it and\nwrite the changed contents back.\n",
   "extend": "QObject",
   "fileName": "Resource.h",
   "methods": [
    {
     "accesType": "public",
     "description": "Return the type of this resource. Valid types are:\n<ul>\n<li>pattern: a raster image representing a pattern\n<li>gradient: a gradient\n<li>brush: a brush tip\n<li>preset: a brush preset\n<li>palette: a color set\n<li>workspace: a workspace definition.\n</ul>\n",
     "hash": "1a1a256fa0dcf82b5bbc19f29cc67378114ca5bdc237b835ce1a0527f8a77208",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "type",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 58,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "The user-visible name of the resource.\n",
     "hash": "64de82e251d3dc3c23d79b7ef5f14ee47ffb87ce9d8da1861a1b9bdbe1e7726b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "name",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 63,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "setName changes the user-visible name of the current resource.\n",
     "hash": "52a7575806cee4d8d2de73b4a5c1ba9ae96d317647073037c4eedda43d1797d3",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setName",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 68,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "The filename of the resource, if present. Not all resources\nare loaded from files.\n",
     "hash": "cb18e85c87a3ce8c9e46f4b2fb45967ec01695fd7925aa6d8f2d094d8ca92b64",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "filename",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 74,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "An image that can be used to represent the resource in the\nuser interface. For some resources, like patterns, the \nimage is identical to the resource, for others it's a mere\nicon.\n",
     "hash": "ecba876687c73ba291a9d4f91f9a34768d91cb4628498f4cf4e8ea28d21c3528",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "image",
     "parameters": [],
     "returned": "QImage",
     "sourceCodeLine": 82,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Change the image for this resource.\n",
     "hash": "4073e317b8aefd85fbea5b70de82ad55a31af2dfebaebf80033468d511cf6b9a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setImage",
     "parameters": [
      {
       "default": null,
       "name": "image",
       "type": "QImage"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 87,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Return the resource as a byte array.\n",
     "hash": "c7c47124384aee590dd0f62ee7fc6c3282d7a77285249a8311512009c7044092",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "data",
     "parameters": [],
     "returned": "QByteArray",
     "sourceCodeLine": 100,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Change the internal data of the resource to the given byte \narray. If the byte array is not valid, setData returns\nfalse, otherwise true.\n",
     "hash": "86409832108836b22646f58a8beac5b4c5e718fefe9128efcb573ac9c2915a2d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setData",
     "parameters": [
      {
       "default": null,
       "name": "data",
       "type": "QByteArray"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 107,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX"
      ],
      "updated": [
       "040000-XX",
       "040300-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "106d0adeeefde9b7b3357d2c8b5b54f5904c144b7af84416b45e185963d729ee",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "Resource",
     "parameters": [
      {
       "default": null,
       "name": "rhs",
       "type": "Resource"
      }
     ],
     "returned": "Resource",
     "sourceCodeLine": 38,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ]
     }
    }
   ],
   "name": "Resource",
   "sourceCodeLine": 30,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX",
     "050000-XX"
    ]
   }
  },
  "Scratchpad": {
   "description": "@brief The Scratchpad class\nA scratchpad is a type of blank canvas area that can be painted on \nwith the normal painting devices\n\n",
   "extend": "QWidget",
   "fileName": "Scratchpad.h",
   "methods": [
    {
     "accesType": "public",
     "description": "",
     "hash": "f3c5fa216df3410376350f3868611f145c44fb68fa35dcf4e0bcbaa38d7745d5",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "Scratchpad",
     "parameters": [
      {
       "default": null,
       "name": "view",
       "type": "View"
      },
      {
       "default": null,
       "name": "defaultColor",
       "type": "QColor"
      },
      {
       "default": "None",
       "name": "parent",
       "type": "QWidget"
      }
     ],
     "returned": "Scratchpad",
     "sourceCodeLine": 31,
     "tagRef": {
      "available": [
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040400-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Clears out scratchpad with color specified set during setup\n",
     "hash": "3d06eaed25a8196c3db57b4c0a17b457ad5037a02d327472c89be3083c097629",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "clear",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 39,
     "tagRef": {
      "available": [
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040400-XX",
       "050000-XX",
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Define default fill color for scratchpad\n@param Color to fill the canvas with\n",
     "hash": "7ab924c4d66e642997f1c1403fd8cc5695533ea341263fb15aed6e515197040a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setFillColor",
     "parameters": [
      {
       "default": null,
       "name": "color",
       "type": "QColor"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 113,
     "tagRef": {
      "available": [
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040400-XX",
       "050000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Switches between a GUI controlling the current mode and when mouse clicks control mode\n@param value Set to True allows GUI to control the mode with explicitly setting mode\n",
     "hash": "0283470040743e9d9afe86f73e5c64cbe42da1dd84672f92efd52414980de550",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setModeManually",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 119,
     "tagRef": {
      "available": [
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040400-XX",
       "050000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Manually set what mode scratchpad is in. Ignored if \"setModeManually is set to false\n@param modeName Available options are:\n- \"painting\"\n- \"panning\"\n- \"colorsampling\"\n",
     "hash": "85e1c3995cb73436c441feb3959782375ea27eb0516c6bca9b38fd52fcaf167a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setMode",
     "parameters": [
      {
       "default": null,
       "name": "modeName",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 128,
     "tagRef": {
      "available": [
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040400-XX",
       "050000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief DEPRECATED -- USE setCanvasZoomLink() instead\nMakes a connection between the zoom of the canvas and scratchpad area so they zoom in sync\n@param value If True (default) the scratchpad will share the current view zoom level.\nIf False, then use scratchpad scale methods to define current zoom level\n",
     "hash": "c850b0079002f357c1d241316c2f8a8d3891db40df2b8b4632302fc4f45a6e70",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "linkCanvasZoom",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 136,
     "tagRef": {
      "available": [
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040400-XX",
       "050000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Load image data to the scratchpad\n@param image Image object to load\n",
     "hash": "a6de1de78d0128cec5cc90959bcf858e53ec40ff6524dad0fef6d671f202a731",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "loadScratchpadImage",
     "parameters": [
      {
       "default": null,
       "name": "image",
       "type": "QImage"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 194,
     "tagRef": {
      "available": [
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040400-XX",
       "050000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Take what is on the scratchpad area and grab image\n@return the image data from the scratchpad\n",
     "hash": "76d19cb5c269a5d11bf7eabfbe95e7db94568b98a552a8a8b357263dae8f52f8",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "copyScratchpadImageData",
     "parameters": [],
     "returned": "QImage",
     "sourceCodeLine": 200,
     "tagRef": {
      "available": [
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040400-XX",
       "050000-XX",
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Fill the entire scratchpad with default color\n",
     "hash": "30569fa474caf5e3b261480a982cddda85f0cdc8eb430d0f2cbdd485f12ddd47",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "fillDefault",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 44,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Fill the entire scratchpad with current gradient\n@param gradientVectorStart is a QPoint to define origin of gradient\nSet an empty QPoint() to use default scratchpad top-left\n@param gradientVectorEnd is a QPoint to define end of gradient\nset an empty QPoint() to use default scratchpad bottom-right\n@param gradientShape define which gradient to apply, can be:\n- \"linear\"\n- \"bilinear\"\n- \"radial\"\n- \"square\"\n- \"conical\"\n- \"conicalSymmetric\"\n- \"spiral\"\n- \"reverseSpiral\"\n- \"polygonal\"\n@param gradientRepeat define how to repeat gradient, can be:\n- \"none\"\n- \"alternate\"\n- \"forwards\"\n@param reverseGradient a boolean to define if gradient is reversed or not\n@param dither a boolean to define if gradient is dithered or not\n",
     "hash": "25fbbce71be23788db89e34e16e1470e0ce5a141bb57fb23682fa8b0cf724896",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "fillGradient",
     "parameters": [
      {
       "default": "QPoint()",
       "name": "gradientVectorStart",
       "type": "QPoint"
      },
      {
       "default": "QPoint()",
       "name": "gradientVectorEnd",
       "type": "QPoint"
      },
      {
       "default": "\"linear\"",
       "name": "gradientShape",
       "type": "str"
      },
      {
       "default": "\"none\"",
       "name": "gradientRepeat",
       "type": "str"
      },
      {
       "default": "False",
       "name": "reverseGradient",
       "type": "bool"
      },
      {
       "default": "False",
       "name": "dither",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 69,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Fill the entire scratchpad with current background color\n",
     "hash": "d058bad03e93977380eadf49954fffd9eb425540e81d566f928468e7b10522c5",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "fillBackground",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 79,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Fill the entire scratchpad with current foreground color\n",
     "hash": "0cbea53cb05db3b4902d347425bd73158822d706ac333889ad519d08dadfc748",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "fillForeground",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 84,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Fill the entire scratchpad with a transparent color\n",
     "hash": "728fab908e89904552771ab204aedb0ffc00688de1e02c318aeb9fb22d3e9fe5",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "fillTransparent",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 89,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Fill the entire scratchpad with current document projection content\n@param fullContent when True, full document projection is loaded in scratchpad, otherwise only content matching scratchpad viewport is loaded\n",
     "hash": "bbc5c097d6ff0619b3e42a412ab18383b54e02226f714a975e17962db5bd7239",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "fillDocument",
     "parameters": [
      {
       "default": "True",
       "name": "fullContent",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 95,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Fill the entire scratchpad with current layer content\n@param fullContent when True, full layer content is loaded in scratchpad, otherwise only content matching scratchpad viewport is loaded\n",
     "hash": "613c50453e74723ae63228e4495690a7e157909409f23319b507118823f73f4d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "fillLayer",
     "parameters": [
      {
       "default": "True",
       "name": "fullContent",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 101,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Fill the entire scratchpad with current pattern\n@param transform is QTransform that let define pattern scale/rotation property\n",
     "hash": "e921c6f10d1548320af47b22a64011791e1965ffb524acba2a511ce19c15b019",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "fillPattern",
     "parameters": [
      {
       "default": "QTransform()",
       "name": "transform",
       "type": "QTransform"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 107,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief return if scratchpad zoom level is linked with current view zoom level\n@return return True if connection between the zoom of the canvas and scratchpad (so they zoom in sync) is active\n",
     "hash": "2dd85b51aed6823920e0275074d6b5dd23d0e2a13efa1380405c63b21ceffe25",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "canvasZoomLink",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 142,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Makes a connection between the zoom of the canvas and scratchpad area so they zoom in sync\n@param value If True (default) the scratchpad will share the current view zoom level.\nIf False, then use scratchpad scale methods to define current zoom level\n",
     "hash": "785d0a0eeec3ff38f5db05d60ac650c75546a920f6a88432cb2a06599c9f7356",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setCanvasZoomLink",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 149,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief return current zoom level applied on scratchpad (whatever the zoom source is: view zoom level or set manually)\n@return a float value (1.00 = 100%)\n",
     "hash": "802d7b5cf9d9b0d744e46debc67740ed2a1dc5e5b5ac94f1ac8fd79913a2263c",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "scale",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 155,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief allow to manually set scratchpad zoom level\nNote: call method is ignored if canvasZoomLink() is True,\n@param scale zoom level to apply (1.00 = 100%)\n@return if scale has been applied return True, otherwise return False\n",
     "hash": "695a96db12dc26ee379cd80dd1326877f60dbf528acb0aad6ac7d77fa23f6789",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setScale",
     "parameters": [
      {
       "default": null,
       "name": "scale",
       "type": "float"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 163,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief calculate scale automatically to fit scratchpad content in scratchpad viewport\nNote: call method is ignored if canvasZoomLink() is True\n",
     "hash": "9b1f3106bfff9dfb1b40e5bcbc3d8a224525b8c553aa5616f103a68eca0b6239",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "scaleToFit",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 169,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief reset scale and pan to origin\nNote: call method is ignored if canvasZoomLink() is True\n",
     "hash": "6f294c27ea8b58b20593f7314bd88bd5a237a5b490604a4f1ec85b68a5a7d85c",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "scaleReset",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 175,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief pan scratchpad content to top-left position of scratchpad viewport\nProvided value are absolute\n@param x abscissa position to pan to\n@param y ordinate position to pan to\n",
     "hash": "3a0a709fa0cd8a6097ca6f46bd1f67ee45c61ce556f2f6264cc0b2db360a5b09",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "panTo",
     "parameters": [
      {
       "default": null,
       "name": "x",
       "type": "qint32"
      },
      {
       "default": null,
       "name": "y",
       "type": "qint32"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 183,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief pan scratchpad content to center content in viewport\n",
     "hash": "560e7401e9e44c36fd5e7577b2d7e74df60574bcdeccc8aa24248d12514a2406",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "panCenter",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 188,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief The viewport indicates which part of scratchpad content is visible.\nIt takes in account the current translation & scale\n\nExample 1:\n- Scratchpad size: 500x500\n- Scratchpad content: 2000x2000\n- Scratchpad scale: 1.0\n- Scratchpad pan:   0, 0\nReturned viewport is a QRect(0, 0, 500, 500) matching content really visible in scratchpad.\nIf scale is 2.00, returned viewport will be QRect(0, 0, 250, 250)\nIf scale is 0.50, returned viewport will be QRect(0, 0, 1000, 1000)\n\nExample 2:\n- Scratchpad size: 500x500\n- Scratchpad content: 2000x2000\n- Scratchpad scale: 2.0\n- Scratchpad pan:   500, 1500\nReturned viewport is a QRect(500, 1500, 250, 250) matching content really visible in scratchpad.\n\n@return scratchpad viewport bounds as a QRect\n",
     "hash": "989144883c293f3e18e26a59e0db0ab6e3d35506233778dd47fb3f1af37f6af1",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "viewportBounds",
     "parameters": [],
     "returned": "QRect",
     "sourceCodeLine": 224,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief The content of scratchpad can be bigger or smaller than scratchpad dimension.\nThe bounds return the area in which there's some content\n@return scratchpad content bounds as a QRect\n",
     "hash": "1beab7c43c26022ac9723c371ba9fb4d82b5ba8bf778f53a4924c6bb83c41790",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "contentBounds",
     "parameters": [],
     "returned": "QRect",
     "sourceCodeLine": 231,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief signal is emitted when scratchpad scale is changed (from zoom canvas or manually)\n@param scale updated scale value (1.00 = 100%)\n",
     "hash": "a42cb68198dd7c7aed1ea9e9ae90337773c30a334632e6fe26e896fa1cf093cf",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "scaleChanged",
     "parameters": [
      {
       "default": null,
       "name": "scale",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 238,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief signal is emitted when scratchpad content is changed (stroke or fill)\n",
     "hash": "e654544b1379714ca1e3d31bf907069100431014f3fa05c39fbded7c6847730e",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "contentChanged",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 243,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief signal is emitted when scratchpad viewport has been modified (pan, zoom)\n@param rect new viewport bounds\n",
     "hash": "0b8b2cd526bb8280cbcca1e2b9f5a5f1b4bd2b20e24dd6fe37740fee7d31545b",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "viewportChanged",
     "parameters": [
      {
       "default": null,
       "name": "rect",
       "type": "QRect"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 249,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    }
   ],
   "name": "Scratchpad",
   "sourceCodeLine": 27,
   "tagRef": {
    "available": [
     "040400-XX"
    ],
    "updated": [
     "040400-XX",
     "master"
    ]
   }
  },
  "Selection": {
   "description": "Selection represents a selection on Krita. A selection is\nnot necessarily associated with a particular Node or Image.\n\n@code\nfrom krita import *\n\nd = Application.activeDocument()\nn = d.activeNode()\nr = n.bounds() \ns = Selection()\ns.select(r.width() / 3, r.height() / 3, r.width() / 3, r.height() / 3, 255)\ns.cut(n)\n@endcode\n",
   "extend": "QObject",
   "fileName": "Selection.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@return the width of the selection\n",
     "hash": "cda0cac1b912be5c1b0941a734026db8351801f6f19487ccb52fd1bbce48c6d3",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "width",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 61,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the height of the selection\n",
     "hash": "b9ff49e16a474ab3deab81456607fdc382b8a895199d824bdd24731d50c603b5",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "height",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 66,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the left-hand position of the selection.\n",
     "hash": "1ba80a3f9fe6973b4f84ea46222d8e260b4c3fad9b5bc5ab48b82f4d04c9efdf",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "x",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 71,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the top position of the selection.\n",
     "hash": "cfb8ba6c6449f966d100920ccbe2d4cd61e641f0162c5ffc6d5fd1d0f4a1c626",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "y",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 76,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Move the selection's top-left corner to the given coordinates.\n",
     "hash": "fff0b24f7c0a93d7411ffe18f390fad0f0a01b5b6f68b5c51b4b2345337f3eca",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "move",
     "parameters": [
      {
       "default": null,
       "name": "x",
       "type": "int"
      },
      {
       "default": null,
       "name": "y",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 81,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Make the selection entirely unselected.\n",
     "hash": "7d52672c1ef62e60b7247c8eb3a2c412300da7bd3a88d3a01261604fd40ab32f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "clear",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 86,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Make the selection's width and height smaller by the given value.\nThis will not move the selection's top-left position.\n",
     "hash": "d287df3a44dc8fab03ac2e8a3ea815af454e26355fc99d1acc56998bf82b02ff",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "contract",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 92,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief copy copies the area defined by the selection from the node to the clipboard.\n@param node the node from where the pixels will be copied.\n",
     "hash": "5edff185f2d96bf88e4068b271297420f02cbab5c59a8b6a36b7d060c513e2b1",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "copy",
     "parameters": [
      {
       "default": null,
       "name": "node",
       "type": "Node"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 98,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief cut erases the area defined by the selection from the node and puts a copy on the clipboard.\n@param node the node from which the selection will be cut.\n",
     "hash": "b4a9a66b1b03764344aeee78c8f5919eef5c6274c6b2e1ac57adebc90c788a36",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "cut",
     "parameters": [
      {
       "default": null,
       "name": "node",
       "type": "Node"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 104,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief paste pastes the content of the clipboard to the given node, limited by the area of the current\nselection.\n@param destination the node where the pixels will be written\n@param x: the x position at which the clip will be written\n@param y: the y position at which the clip will be written\n",
     "hash": "f6f7985dd760d6b39d5a0393f46678d1238b2329ec366ea8748c0bec7e925b0b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "paste",
     "parameters": [
      {
       "default": null,
       "name": "destination",
       "type": "Node"
      },
      {
       "default": null,
       "name": "x",
       "type": "int"
      },
      {
       "default": null,
       "name": "y",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 113,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Erode the selection with a radius of 1 pixel.\n",
     "hash": "0f782e43a3cca31ee922a796f29cde86cd23626518873c60f20ecf84a40a0a38",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "erode",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 118,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Dilate the selection with a radius of 1 pixel.\n",
     "hash": "d07efcb9c37427ed9cabe907cadba5e8030e42188cbae982ed19b41112d81e72",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "dilate",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 123,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Border the selection with the given radius.\n",
     "hash": "186cff8c3ab8053cf105f88476fdd17da600c200a744fcb7a0dd552e3f07d6f3",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "border",
     "parameters": [
      {
       "default": null,
       "name": "xRadius",
       "type": "int"
      },
      {
       "default": null,
       "name": "yRadius",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 128,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Feather the selection with the given radius.\n",
     "hash": "058295f91b08383cc801628be4dffdd155b26d13b5ea2f4a238e5438dac39723",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "feather",
     "parameters": [
      {
       "default": null,
       "name": "radius",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 133,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Grow the selection with the given radius.\n",
     "hash": "d3d7ddef4b39677e2875e5ae223b626456d2e1b0523495d58c5a7e85fd90ce01",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "grow",
     "parameters": [
      {
       "default": null,
       "name": "xradius",
       "type": "int"
      },
      {
       "default": null,
       "name": "yradius",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 138,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Shrink the selection with the given radius.\n",
     "hash": "c64469768c9a2776f095de9b22b7cac68b324559b5983ac39a61a075708c2e04",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "shrink",
     "parameters": [
      {
       "default": null,
       "name": "xRadius",
       "type": "int"
      },
      {
       "default": null,
       "name": "yRadius",
       "type": "int"
      },
      {
       "default": null,
       "name": "edgeLock",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 143,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Smooth the selection.\n",
     "hash": "194318472e4c2a7655559318c2fcfedbbed294a48b6f2bbed0f9e3ab0d0b7eee",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "smooth",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 148,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Invert the selection.\n",
     "hash": "2b9f4a8efff094c5082b9f0c7a75c514825a5ecdf745d3ba3e718cc64239f3b9",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "invert",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 153,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Resize the selection to the given width and height. The top-left position will not be moved.\n",
     "hash": "ac549339ec152fe7bba40067b7cfd80325a4ffb2ed6c1de2814ed14863b706a0",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "resize",
     "parameters": [
      {
       "default": null,
       "name": "w",
       "type": "int"
      },
      {
       "default": null,
       "name": "h",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 158,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Select the given area. The value can be between 0 and 255; 0 is \ntotally unselected, 255 is totally selected.\n",
     "hash": "f7299200332ca51ceb5a11950a7f26e92604e881ef34f79e412ad06ab15e5375",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "select",
     "parameters": [
      {
       "default": null,
       "name": "x",
       "type": "int"
      },
      {
       "default": null,
       "name": "y",
       "type": "int"
      },
      {
       "default": null,
       "name": "w",
       "type": "int"
      },
      {
       "default": null,
       "name": "h",
       "type": "int"
      },
      {
       "default": null,
       "name": "value",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 164,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Select all pixels in the given node. The value can be between 0 and 255; 0 is \ntotally unselected, 255 is totally selected.\n",
     "hash": "7f8d247992c2f44c031dd61a1770368ea81724339b149767a2c8d59bbaf26b22",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "selectAll",
     "parameters": [
      {
       "default": null,
       "name": "node",
       "type": "Node"
      },
      {
       "default": null,
       "name": "value",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 170,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Replace the current selection's selection with the one of the given selection.\n",
     "hash": "fd561d9932b95fbf010bde2c72ef8b139f7d15c4cf4e357f04fac2816b45459e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "replace",
     "parameters": [
      {
       "default": null,
       "name": "selection",
       "type": "Selection"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 175,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Add the given selection's selected pixels to the current selection.\n",
     "hash": "0b22bb12e41f9ef0118aa2230d402675e9a07010553b4798619bb95196ad5b84",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "add",
     "parameters": [
      {
       "default": null,
       "name": "selection",
       "type": "Selection"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 180,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Subtract the given selection's selected pixels from the current selection.\n",
     "hash": "d1c0fc26cfc79c2b0c0dab339b76eef63196c31aaacb90f1fa0932e63567c44e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "subtract",
     "parameters": [
      {
       "default": null,
       "name": "selection",
       "type": "Selection"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 185,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Intersect the given selection with this selection.\n",
     "hash": "9b758de6b4e89ade15af804dce827ec03863906ac70349f3e29753cb9cfc3ec3",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "intersect",
     "parameters": [
      {
       "default": null,
       "name": "selection",
       "type": "Selection"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 190,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief pixelData reads the given rectangle from the Selection's mask and returns it as a\nbyte array. The pixel data starts top-left, and is ordered row-first.\n\nThe byte array will contain one byte for every pixel, representing the selectedness. 0\nis totally unselected, 255 is fully selected.\n\nYou can read outside the Selection's boundaries; those pixels will be unselected.\n\nThe byte array is a copy of the original selection data.\n@param x x position from where to start reading\n@param y y position from where to start reading\n@param w row length to read\n@param h number of rows to read\n@return a QByteArray with the pixel data. The byte array may be empty.\n",
     "hash": "ac7a3dd9c6015694e6cc43a339a8ab7d68c57ff836521af15b272159b52db1eb",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "pixelData",
     "parameters": [
      {
       "default": null,
       "name": "x",
       "type": "int"
      },
      {
       "default": null,
       "name": "y",
       "type": "int"
      },
      {
       "default": null,
       "name": "w",
       "type": "int"
      },
      {
       "default": null,
       "name": "h",
       "type": "int"
      }
     ],
     "returned": "QByteArray",
     "sourceCodeLine": 213,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setPixelData writes the given bytes, of which there must be enough, into the\nSelection.\n\n@param value the byte array representing the pixels. There must be enough bytes available.\nKrita will take the raw pointer from the QByteArray and start reading, not stopping before\n(w * h) bytes are read.\n\n@param x the x position to start writing from\n@param y the y position to start writing from\n@param w the width of each row\n@param h the number of rows to write\n",
     "hash": "9addf6dd5c3959f7908c18c011614816522a9f1d56ec5003d4fc61b7cb2cf054",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setPixelData",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "QByteArray"
      },
      {
       "default": null,
       "name": "x",
       "type": "int"
      },
      {
       "default": null,
       "name": "y",
       "type": "int"
      },
      {
       "default": null,
       "name": "w",
       "type": "int"
      },
      {
       "default": null,
       "name": "h",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 228,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Intersect with the inverse of the given selection with this selection.\n",
     "hash": "438c6005f0b37a066285b3049879a3cb7afb975b15f5900343b51b8fc939e03f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "symmetricdifference",
     "parameters": [
      {
       "default": null,
       "name": "selection",
       "type": "Selection"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 195,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return a duplicate of the selection\n",
     "hash": "fb9ec4746b764d860bde9febc1981ce1e24bfff113a356e4b32105862d198e53",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "duplicate",
     "parameters": [],
     "returned": "Selection",
     "sourceCodeLine": 56,
     "tagRef": {
      "available": [
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040300-XX",
       "050000-XX"
      ]
     }
    }
   ],
   "name": "Selection",
   "sourceCodeLine": 30,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX",
     "040200-XX",
     "040300-XX"
    ]
   }
  },
  "SelectionMask": {
   "description": "@brief The SelectionMask class\nA selection mask is a mask type node that can be used\nto store selections. In the gui, these are referred to\nas local selections.\n\nA selection mask can hold both raster and vector selections, though\nthe API only supports raster selections.\n",
   "extend": "Node",
   "fileName": "SelectionMask.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief type Krita has several types of nodes, split in layers and masks. Group\nlayers can contain other layers, any layer can contain masks.\n\n@return selectionmask\n\nIf the Node object isn't wrapping a valid Krita layer or mask object, and\nempty string is returned.\n",
     "hash": "16ad0ec4cde040c526e4964f95184fed99fcbd179f6ae7b4965c932e077f1ec0",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": true,
     "name": "type",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 46,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "01209a619c1585c6b62a9ae15b68fd0932e44c81cf037d4dc1de3a1ec52b2555",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "selection",
     "parameters": [],
     "returned": "Selection",
     "sourceCodeLine": 48,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "d36d70665396960e9de1b85d9017d9d9608bd7196e485276e50ecd25d9642d24",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setSelection",
     "parameters": [
      {
       "default": null,
       "name": "selection",
       "type": "Selection"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 50,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    }
   ],
   "name": "SelectionMask",
   "sourceCodeLine": 26,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX"
    ]
   }
  },
  "Shape": {
   "description": "@brief The Shape class\nThe shape class is a wrapper around Krita's vector objects.\n\nSome example code to parse through interesting information in a given vector layer with shapes.\n@code\nimport sys\nfrom krita import *\n\ndoc = Application.activeDocument()\n\nroot = doc.rootNode()\n\nfor layer in root.childNodes():\n    print (str(layer.type())+\" \"+str(layer.name()))\n    if (str(layer.type())==\"vectorlayer\"):\n        for shape in layer.shapes():\n            print(shape.name())\n            print(shape.toSvg())\n@endcode\n",
   "extend": "QObject",
   "fileName": "Shape.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief name\n@return the name of the shape\n",
     "hash": "223250a1c9b24c63b8417703bd1e5ad9dc40e54b238bfbe54f4f02667099583e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "name",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 55,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setName\n@param name which name the shape should have.\n",
     "hash": "fbe5bcbbd2f5c8f3b9a47c07d09f7f3f3190936aee4e5a5ffdf1ce3c2098d338",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setName",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 61,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief type\n@return the type of shape.\n",
     "hash": "74893ab70a412ec3963bebca230d7bf61c5be748c29560d15c67c1314d6fcbe2",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": true,
     "name": "type",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 67,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief visible\n@return whether the shape is visible.\n",
     "hash": "de659b7283742c2600d9a75f06e9cba69cce1fa91c0ae0b854dc1c18830718e1",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "visible",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 109,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setVisible\n@param visible whether the shape should be visible.\n",
     "hash": "aad0ea1edd68e5a949515e46aaf1a3414cf13432fae58cae8ce82ed97432e49f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setVisible",
     "parameters": [
      {
       "default": null,
       "name": "visible",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 115,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief boundingBox the bounding box of the shape in points\n@return RectF containing the bounding box.\n",
     "hash": "e477bb55ab76ba3485ccf234609efae1c46826d1b51fc62eef8e22eb25a48d39",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "boundingBox",
     "parameters": [],
     "returned": "QRectF",
     "sourceCodeLine": 121,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief position the position of the shape in points.\n@return the position of the shape in points.\n",
     "hash": "77a1c0c49f710f78c227950da8f6a1bae1f8f553027889774c73c8b7d11a017e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "position",
     "parameters": [],
     "returned": "QPointF",
     "sourceCodeLine": 127,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setPosition set the position of the shape.\n@param point the new position in points\n",
     "hash": "35b08e42cfedcb16f5c576f30f3bfaebb1f97c95b38a0a1a0a112f3b2718cd6d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setPosition",
     "parameters": [
      {
       "default": null,
       "name": "point",
       "type": "QPointF"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 133,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief toSvg\nconvert the shape to svg, will not include style definitions.\n@param prependStyles prepend the style data. Default: false\n@param stripTextMode enable strip text mode. Default: true\n@return the svg in a string.\n",
     "hash": "76ff9a476396d21a174cc9c8d9613978715f9adc60306446f5abb2e652075020",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "toSvg",
     "parameters": [
      {
       "default": "False",
       "name": "prependStyles",
       "type": "bool"
      },
      {
       "default": "True",
       "name": "stripTextMode",
       "type": "bool"
      }
     ],
     "returned": "str",
     "sourceCodeLine": 177,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief zIndex\n@return the zindex of the shape.\n",
     "hash": "d3913faeb8d92cfdcb623bc7a352a6877ec439bd76a55e6d9e28f70e6f7abec5",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "zIndex",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 73,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setZIndex\n@param zindex set the shape zindex value.\n",
     "hash": "08fb2fc74b9164658ddcd026c1feb5a3326dc88c33b5cd42804559902ac2fa10",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setZIndex",
     "parameters": [
      {
       "default": null,
       "name": "zindex",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 79,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief selectable\n@return whether the shape is user selectable.\n",
     "hash": "445e13988ef88e05a183b921bc6a7dc7db8cb1ac7b2a2371b66388165cc4e9e7",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "selectable",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 85,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setSelectable\n@param selectable whether the shape should be user selectable.\n",
     "hash": "1319bdaf1f03d282367fcdd0e0f2d1a44dbf2fff5a9ba4d1be946302d2217485",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setSelectable",
     "parameters": [
      {
       "default": null,
       "name": "selectable",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 91,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief geometryProtected\n@return whether the shape is protected from user changing the shape geometry.\n",
     "hash": "80511e54a67677ae6b0e15d134be51b6e967ae2d4689f5688e269d3dce6aa611",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "geometryProtected",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 97,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setGeometryProtected\n@param protect whether the shape should be geometry protected from the user.\n",
     "hash": "26f12a71b40f020b998c01e5104e4bb2f701853e3ce19d94289f97290160a65a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setGeometryProtected",
     "parameters": [
      {
       "default": null,
       "name": "protect",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 103,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief transformation the 2D transformation matrix of the shape.\n@return the 2D transformation matrix.\n",
     "hash": "ff67de2ea50f7ea60f98153f4edef1ffd909c6a657bb70187ff9ee9b84bb8916",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "transformation",
     "parameters": [],
     "returned": "QTransform",
     "sourceCodeLine": 139,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief setTransformation set the 2D transformation matrix of the shape.\n@param matrix the new 2D transformation matrix.\n",
     "hash": "74003fc6fb91daf149e8ebb7629aa8bfa4d92f3aa7259af293aac7f6dd25bdad",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setTransformation",
     "parameters": [
      {
       "default": null,
       "name": "matrix",
       "type": "QTransform"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 145,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief remove delete the shape.\n",
     "hash": "2bea2c57a6961818e122fc51a95c375f08c22e04af84f97a4717c9888256d7a1",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "remove",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 156,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief update queue the shape update.\n",
     "hash": "1bd444670b256b366acb1d705752f54d5443a8e3092a37069a3255fa18aa224e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "update",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 161,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief updateAbsolute queue the shape update in the specified rectangle.\n@param box the RectF rectangle to update.\n",
     "hash": "88d3c064aa8faebe23187caab202c4c95a7a0db6ae32a987d6847893daf77ae5",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "updateAbsolute",
     "parameters": [
      {
       "default": null,
       "name": "box",
       "type": "QRectF"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 167,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief select selects the shape.\n",
     "hash": "4bee453410e843b5b62435bb4f79fc15886cca00cd33e98d1c3f378c1852552f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "select",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 182,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief deselect deselects the shape.\n",
     "hash": "9d875d581cbf235f437fb93c4b13396ea34a4889e16e857db88ad598dd9663c7",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "deselect",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 187,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief isSelected\n@return whether the shape is selected.\n",
     "hash": "77e788beb67bb411a72c1143438592bd6cf0609df8adc0e732240b787b8bd177",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "isSelected",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 193,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief transformation the 2D transformation matrix of the shape including all grandparent transforms.\n@return the 2D transformation matrix.\n",
     "hash": "0c7142cb17942bc938700163bb4a5cd5c5b126c05e40fcd8e94ca815f8f34fe7",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "absoluteTransformation",
     "parameters": [],
     "returned": "QTransform",
     "sourceCodeLine": 151,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief parentShape\n@return the parent GroupShape of the current shape.\n",
     "hash": "36ffe2c8378a1996a8fb1177e48fce1f4689f7d633aae73fe7e47083ac74fd5f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "parentShape",
     "parameters": [],
     "returned": "Shape",
     "sourceCodeLine": 199,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    }
   ],
   "name": "Shape",
   "sourceCodeLine": 37,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX",
     "050000-XX",
     "050200-XX"
    ]
   }
  },
  "SliderSpinBox": {
   "description": "@brief This class is a wrapper around KisSliderSpinBox, a spinbox in which \nyou can click and drag to set the value, with a slider like bar displayed\ninside. The widget itself is accessed with the widget() function.\n\nThe value can be set by click and dragging with the mouse or pen or by\ntyping in with the keyboard. To enter the edit mode, in which the keyboard\ncan be used, one has to right-click inside the spinbox or click and hold\nthe pointer inside or press the enter key. To leave the edit mode, one\ncan press the enter key again, in which case the value is committed, or\npress the escape key, in which case the value is rejected.\n\nWhen dragging with the pointer, one can fine tune the value by dragging\nfar away vertically from the spinbox. The farther the pointer is, the\nslower the value will change. If the pointer is inside the spinbox plus\na certain margin, the value will not be scaled.\nBy pressing the shift key the slow down will be even more pronounced and\nby pressing the control key the value will snap to the increment set by\n@ref setFastSliderStep. The two keys can be used at the same time.\n\nA \"soft range\" can be set to make the slider display only a sub-range of the\nspinbox range. This way one can have a large range but display and set with\nthe pointer and with more precision only the most commonly used sub-set\nof values.\nA value outside the \"soft range\" can be set by entering the edit\nmode and using the keyboard.\nThe \"soft range\" is considered valid if the \"soft maximum\" is greater than\nthe \"soft minimum\".\n",
   "extend": "IntParseSpinBox",
   "fileName": "SliderSpinBox.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief Get the internal KisSliderSpinBox as a QWidget, so it may be\nadded to a UI\n\n@return the internal KisSliderSpinBox as a QWidget\n",
     "hash": "56b7b00c1e78a2278160a8f7edc242b1e5e5e6bc897623959d86ed926ba5d714",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "widget",
     "parameters": [],
     "returned": "QWidget",
     "sourceCodeLine": 68,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Get the value to which multiples the spinbox value snaps when\nthe control key is pressed\n\n@return the value to which multiples the spinbox value snaps when\nthe control key is pressed\n@see setFastSliderStep(int)\n",
     "hash": "9bfda116ad0d716b9a5725639cecf3d35207074c923a96caddd9defbc5292d68",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "fastSliderStep",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 78,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Get the minimum value of the \"soft range\"\n@return the minimum value of the \"soft range\"\n@see setSoftMinimum(int) \n@see setSoftRange(int, int) \n@see softMaximum() const \n",
     "hash": "e067aabd61108b03d87c681fdcd7e3ec26ac6a2a4b475e542f1179a5d7a5a929",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "softMinimum",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 86,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Get the maximum value of the \"soft range\"\n@return the maximum value of the \"soft range\"\n@see setSoftMaximum(int) \n@see setSoftRange(int, int) \n@see softMinimum) const \n",
     "hash": "cae95d09c44eaf2e099af7ff9ac526bac86c79f1bd8f2c43d7d391c51e8b6177",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "softMaximum",
     "parameters": [],
     "returned": "int",
     "sourceCodeLine": 94,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Get if the user is currently dragging the slider with the pointer\n@return true if the user is currently dragging the slider with the\npointer, false otherwise\n",
     "hash": "b8a2bb2b232106de87cae32ea841b97f567f6264a32c9a9377f9969154f7de88",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "isDragging",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 100,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set the value\n@param newValue the new value\n",
     "hash": "43f42fd9e3121acd3f0b60676df2978eb9460eb71544424449ce16c90e3cc9d7",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setValue",
     "parameters": [
      {
       "default": null,
       "name": "newValue",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 105,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set the minimum and the maximum values of the range, computing\na new \"fast slider step\" based on the range if required\n\nThe soft range will be adapted to fit inside the range\n@param newMinimum the new minimum value\n@param newMaximum the new maximum value\n@param computeNewFastSliderStep true if a new \"fast slider step\"\nmust be computed based on the range\n@see setMinimum(int)\n@see setMaximum(int)\n",
     "hash": "c159f9c75fdda47437c2b4dfbf0084c5ffc7bf849c9e1f80ac747e1befcfdd1c",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setRange",
     "parameters": [
      {
       "default": null,
       "name": "newMinimum",
       "type": "int"
      },
      {
       "default": null,
       "name": "newMaximum",
       "type": "int"
      },
      {
       "default": "True",
       "name": "computeNewFastSliderStep",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 118,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set the minimum value of the range\n\nThe soft range will be adapted to fit inside the range\n@param newMinimum the new minimum value\n@param computeNewFastSliderStep true if a new \"fast slider step\"\nmust be computed based on the range\n@see setRange(int,int)\n@see setMaximum(int)\n",
     "hash": "430a3454ee0ba153aff614425763942443fac2a14c5d9f60206d303576c3b8c5",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setMinimum",
     "parameters": [
      {
       "default": null,
       "name": "newMinimum",
       "type": "int"
      },
      {
       "default": "True",
       "name": "computeNewFastSliderStep",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 129,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set the maximum value of the range\n\nThe soft range will be adapted to fit inside the range\n@param newMaximum the new maximum value\n@param computeNewFastSliderStep true if a new \"fast slider step\"\nmust be computed based on the range\n@see setRange(int,int)\n@see setMinimum(int)\n",
     "hash": "dd9f7ceae0498c73981c450796e695a6d698d977e8e62efe045b157769df93f4",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setMaximum",
     "parameters": [
      {
       "default": null,
       "name": "newMaximum",
       "type": "int"
      },
      {
       "default": "True",
       "name": "computeNewFastSliderStep",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 140,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set the exponent used by a power function to modify the values\nas a function of the horizontal position.\n\nThis allows having more values concentrated in one side of the\nslider than the other\n@param newExponentRatio the new exponent to be used by the power function\n",
     "hash": "102ec3c99269ce22063be1766aee21e14968297c64849a3745f67be83abbeb51",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setExponentRatio",
     "parameters": [
      {
       "default": null,
       "name": "newExponentRatio",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 149,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set if the spinbox should not emit signals when dragging the\nslider.\n\nThis is useful to prevent multiple updates when changing the value if\nthe update operation is costly.\nA valueChanged signal will be emitted when the pointer is released from\nthe slider.\n@param newBlockUpdateSignalOnDrag true if the spinbox should not emit\nsignals when dragging the slider. false otherwise\n",
     "hash": "e8acb4f5a1c62e5a516a61e611de17bb8f4ca50cb213063670e1cf65476400b7",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setBlockUpdateSignalOnDrag",
     "parameters": [
      {
       "default": null,
       "name": "newBlockUpdateSignalOnDrag",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 161,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set the value to which multiples the spinbox value snaps when\nthe control key is pressed\n@param newFastSliderStep value to which multiples the spinbox value\nsnaps when the control key is pressed\n@see fastSliderStep() const\n",
     "hash": "af60bf91066ba145ae80de1d58fd68e0044d49c1600ace53227f19651da09314",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setFastSliderStep",
     "parameters": [
      {
       "default": null,
       "name": "newFastSliderStep",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 169,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set the minimum and the maximum values of the soft range\n@param newSoftMinimum the new minimum value\n@param newSoftMaximum the new maximum value\n@see setSoftMinimum(int)\n@see setSoftMaximum(int)\n@see softMinimum() const\n@see softMaximum() const\n",
     "hash": "f0e9ad997eb048c49b3974608fb647f18e1428aa62a4dee6516e6a36d3f4cc6c",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setSoftRange",
     "parameters": [
      {
       "default": null,
       "name": "newSoftMinimum",
       "type": "int"
      },
      {
       "default": null,
       "name": "newSoftMaximum",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 179,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set the minimum value of the soft range\n@param newSoftMinimum the new minimum value\n@see setSoftRange(int,int)\n@see setSoftMaximum(int)\n@see softMinimum() const\n@see softMaximum() const\n",
     "hash": "a8e9765db752fef39128a8dfd2b0a0fc442cb0b75373092aae0bf754b7b69e28",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setSoftMinimum",
     "parameters": [
      {
       "default": null,
       "name": "newSoftMinimum",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 188,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief Set the maximum value of the soft range\n@param newSoftMaximum the new maximum value\n@see setSoftRange(int,int)\n@see setSoftMinimum(int)\n@see softMinimum() const\n@see softMaximum() const\n",
     "hash": "938c061488e237d4d6cdbab62d9552ad7715d99c8cc15ddda956471ba489d5cf",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setSoftMaximum",
     "parameters": [
      {
       "default": null,
       "name": "newSoftMaximum",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 197,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "d6cd904a7da6d798054358e13bc1c4627f080a6522d82c0c5de54be5c95091ca",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "draggingFinished",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 200,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    }
   ],
   "name": "SliderSpinBox",
   "sourceCodeLine": 50,
   "tagRef": {
    "available": [
     "master"
    ],
    "updated": [
     "master"
    ]
   }
  },
  "Swatch": {
   "description": "@brief The Swatch class is a thin wrapper around the KisSwatch class.\n\nA Swatch is a single color that is part of a palette, that has a name\nand an id. A Swatch color can be a spot color.\n",
   "extend": "QObject",
   "fileName": "Swatch.h",
   "methods": [
    {
     "accesType": "public",
     "description": "",
     "hash": "3f9455222764e55b841f2c4305399efa998399cca59ce3eff640bd2c0342f068",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "Swatch",
     "parameters": [
      {
       "default": null,
       "name": "rhs",
       "type": "Swatch"
      },
      {
       "default": "None",
       "name": "parent",
       "type": "QObject"
      }
     ],
     "returned": "Swatch",
     "sourceCodeLine": 32,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "534734b306ba8cafb6445aadba97283185e24b95743a3a61f1b831232f83780f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": true,
     "name": "Swatch",
     "parameters": [],
     "returned": "Swatch",
     "sourceCodeLine": 25,
     "tagRef": {
      "available": [
       "040200-XX"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "808ceef83242f936d7e22b896350b7feee6a3a4cc44bcd476616b8110e1a1835",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "Swatch",
     "parameters": [
      {
       "default": null,
       "name": "rhs",
       "type": "Swatch"
      }
     ],
     "returned": "Swatch",
     "sourceCodeLine": 26,
     "tagRef": {
      "available": [
       "040200-XX"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "ae748315e0cd4ef12e15bf1cc54f0fec4ddfc09b5c9a3d12b46e95148c12cdca",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "name",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 39,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "24d15f7e73842c2bb50aa34fa7d94dcc5891d137da36c450eb53c01f8ce79c30",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setName",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 40,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "fed802f314a6d80d8f8b99d80c39bad215d9e6af3f1848551e0bb40faee818d6",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "id",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 42,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "c7d90dcb211c93df021b1031cee5dc0e120f25703598fce86f043e1ab0be8699",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setId",
     "parameters": [
      {
       "default": null,
       "name": "id",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 43,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "1bfd9fe8d17041c500cb27aacb2940f838208f2d80abb0c0a53c4ee01f458870",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "color",
     "parameters": [],
     "returned": "ManagedColor",
     "sourceCodeLine": 45,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "e7019de9a97865616576e4cf672df96b4742ce7f8ae5fd768c50c8f6bbd7b08f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setColor",
     "parameters": [
      {
       "default": null,
       "name": "color",
       "type": "ManagedColor"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 46,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "9cd49d1068131bd75ed578ef9cbf6ced5cd8b2f9338f9339f7cbce0bcfcd46b2",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "spotColor",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 48,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "64ca8012679a06535084db67b610bb6b96608a06785391a46f58e9190820dcee",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setSpotColor",
     "parameters": [
      {
       "default": null,
       "name": "spotColor",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 49,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "89872300cdcc9ce27c45e14816ddd3dc05b4eb587bca31ef63eb31ef07855f91",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "isValid",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 51,
     "tagRef": {
      "available": [
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040200-XX"
      ]
     }
    }
   ],
   "name": "Swatch",
   "sourceCodeLine": 21,
   "tagRef": {
    "available": [
     "040200-XX"
    ],
    "updated": [
     "040200-XX"
    ]
   }
  },
  "TransformMask": {
   "description": "@brief The TransformMask class\nA transform mask is a mask type node that can be used\nto store transformations.\n",
   "extend": "Node",
   "fileName": "TransformMask.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief type Krita has several types of nodes, split in layers and masks. Group\nlayers can contain other layers, any layer can contain masks.\n\n@return transformmask\n\nIf the Node object isn't wrapping a valid Krita layer or mask object, and\nempty string is returned.\n",
     "hash": "e6d1e6fe22e67c0c3a99cc1065bc779f3aa4ebacfd35266088ef1286f9459b60",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": true,
     "name": "type",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 42,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "b20ac4c63567a2f4519ff3d78bec8c7779792109833cb1b22325eac66df80720",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "finalAffineTransform",
     "parameters": [],
     "returned": "QTransform",
     "sourceCodeLine": 44,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief toXML\n@return a string containing XML formated transform parameters.\n",
     "hash": "1ebb6fdf71b98793b91cb78484d837327498c699d1877cc7896019cb95fcbfda",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "toXML",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 50,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief fromXML set the transform of the transform mask from XML formatted data.\nThe xml must have a valid id\n\ndumbparams - placeholder for static transform masks\ntooltransformparams - static transform mask\nanimatedtransformparams - animated transform mask\n\n@code\n<!DOCTYPE transform_params>\n<transform_params>\n  <main id=\"tooltransformparams\"/>\n  <data mode=\"0\">\n   <free_transform>\n    <transformedCenter type=\"pointf\" x=\"12.3102137276208\" y=\"11.0727768562035\"/>\n    <originalCenter type=\"pointf\" x=\"20\" y=\"20\"/>\n    <rotationCenterOffset type=\"pointf\" x=\"0\" y=\"0\"/>\n    <transformAroundRotationCenter value=\"0\" type=\"value\"/>\n    <aX value=\"0\" type=\"value\"/>\n    <aY value=\"0\" type=\"value\"/>\n    <aZ value=\"0\" type=\"value\"/>\n    <cameraPos z=\"1024\" type=\"vector3d\" x=\"0\" y=\"0\"/>\n    <scaleX value=\"1\" type=\"value\"/>\n    <scaleY value=\"1\" type=\"value\"/>\n    <shearX value=\"0\" type=\"value\"/>\n    <shearY value=\"0\" type=\"value\"/>\n    <keepAspectRatio value=\"0\" type=\"value\"/>\n    <flattenedPerspectiveTransform m23=\"0\" m31=\"0\" m32=\"0\" type=\"transform\" m33=\"1\" m12=\"0\" m13=\"0\" m22=\"1\" m11=\"1\" m21=\"0\"/>\n    <filterId value=\"Bicubic\" type=\"value\"/>\n   </free_transform>\n  </data>\n</transform_params>\n@endcode\n@param xml a valid formated XML string with proper main and data elements.\n@return a true response if successful, a false response if failed.\n",
     "hash": "c40bcaccd68fcff3474dda8ab8d8c961a77e36caa8aa2235f8b1b86dc133b2cf",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "fromXML",
     "parameters": [
      {
       "default": null,
       "name": "xml",
       "type": "str"
      }
     ],
     "returned": "bool",
     "sourceCodeLine": 88,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    }
   ],
   "name": "TransformMask",
   "sourceCodeLine": 22,
   "tagRef": {
    "available": [
     "050000-XX"
    ],
    "updated": [
     "050000-XX",
     "050200-XX"
    ]
   }
  },
  "TransparencyMask": {
   "description": "@brief The TransparencyMask class\nA transparency mask is a mask type node that can be used\nto show and hide parts of a layer.\n\n",
   "extend": "Node",
   "fileName": "TransparencyMask.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief type Krita has several types of nodes, split in layers and masks. Group\nlayers can contain other layers, any layer can contain masks.\n\n@return transparencymask\n\nIf the Node object isn't wrapping a valid Krita layer or mask object, and\nempty string is returned.\n",
     "hash": "e3fc5b74697aca06d613cd6dddb821aaa54018b48b718c8d05296bec3fc7dc74",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": true,
     "name": "type",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 43,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "01209a619c1585c6b62a9ae15b68fd0932e44c81cf037d4dc1de3a1ec52b2555",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "selection",
     "parameters": [],
     "returned": "Selection",
     "sourceCodeLine": 45,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "d36d70665396960e9de1b85d9017d9d9608bd7196e485276e50ecd25d9642d24",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setSelection",
     "parameters": [
      {
       "default": null,
       "name": "selection",
       "type": "Selection"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 47,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    }
   ],
   "name": "TransparencyMask",
   "sourceCodeLine": 23,
   "tagRef": {
    "available": [
     "050200-XX"
    ],
    "updated": [
     "050200-XX"
    ]
   }
  },
  "VectorLayer": {
   "description": "@brief The VectorLayer class\nA vector layer is a special layer that stores\nand shows vector shapes.\n\nVector shapes all have their coordinates in points, which\nis a unit that represents 1/72th of an inch. Keep this in\nmind wen parsing the bounding box and position data.\n",
   "extend": "Node",
   "fileName": "VectorLayer.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@brief type Krita has several types of nodes, split in layers and masks. Group\nlayers can contain other layers, any layer can contain masks.\n\n@return vectorlayer\n",
     "hash": "a89325beb9fccee7c0e9c14d90f9f7f1d5e6951a394dac4baf9c1c41a25f4c24",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": true,
     "name": "type",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 48,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief shapes\n@return the list of top-level shapes in this vector layer.\n",
     "hash": "589fd12cf9e42653ff590310d15f443288c25233e1792bbe7132b5c8478fe171",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "shapes",
     "parameters": [],
     "returned": "list[Shape]",
     "sourceCodeLine": 54,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief toSvg\nconvert the shapes in the layer to svg.\n@return the svg in a string.\n",
     "hash": "7046b49e40ce63d09ae3ab42d833197717bce9467e16cadfc2f8decf698c62d2",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "toSvg",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 61,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief addShapesFromSvg\nadd shapes to the layer from a valid svg.\n@param svg valid svg string.\n@return the list of shapes added to the layer from the svg.\n",
     "hash": "c09ac7da9217a8de06f9fe0926c05c2f14a2c6fbe9a46b029b5624f03bb21d38",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "addShapesFromSvg",
     "parameters": [
      {
       "default": null,
       "name": "svg",
       "type": "str"
      }
     ],
     "returned": "list[Shape]",
     "sourceCodeLine": 69,
     "tagRef": {
      "available": [
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief shapeAtPoint\ncheck if the position is located within any non-group shape's boundingBox() on the current layer.\n@param position a QPointF of the position.\n@return the shape at the position, or None if no shape is found.\n",
     "hash": "e4590576492109765cc44484867a7973a9153554357863af7aa807f2d26b72af",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "shapeAtPosition",
     "parameters": [
      {
       "default": null,
       "name": "position",
       "type": "QPointF"
      }
     ],
     "returned": "Shape",
     "sourceCodeLine": 77,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief shapeInRect\nget all non-group shapes that the shape's boundingBox() intersects or is contained within a given rectangle on the current layer.\n@param rect a QRectF\n@param omitHiddenShapes true if non-visible() shapes should be omitted, false if they should be included. \\p omitHiddenShapes defaults to true.\n@param containedMode false if only shapes that are within or intersect with the outline should be included, true if only shapes that are fully contained within the outline should be included. \\p containedMode defaults to false\n@return returns a list of shapes.\n",
     "hash": "0b122d9eec69fd83c4c175f9d5c6c1fe98d479a4c189f4b0112abd7eeab6a123",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "shapesInRect",
     "parameters": [
      {
       "default": null,
       "name": "rect",
       "type": "QRectF"
      },
      {
       "default": "True",
       "name": "omitHiddenShapes",
       "type": "bool"
      },
      {
       "default": "False",
       "name": "containedMode",
       "type": "bool"
      }
     ],
     "returned": "list[Shape]",
     "sourceCodeLine": 87,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief createGroupShape\ncombine a list of top level shapes into a group.\n@param name the name of the shape.\n@param shapes list of top level shapes.\n@return if successful, a GroupShape object will be returned.\n",
     "hash": "4df0285ad34a9f8d9916fccc2f5195fe75aed282a9c909a5bfecfdc9325c918a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "createGroupShape",
     "parameters": [
      {
       "default": null,
       "name": "name",
       "type": "str"
      },
      {
       "default": null,
       "name": "shapes",
       "type": "list[Shape]"
      }
     ],
     "returned": "Shape",
     "sourceCodeLine": 96,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief return antialiasing status for the Vector layer\n@return True if antialiasing is active for the layer\n",
     "hash": "8ae57a07fd2814dc4a2bf17d1daba9fdf8593252491dc0930a6558408068e8be",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "isAntialiased",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 102,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief set antialiasing status for the Vector layer\n@param antialiased set to True to activate antialiasing\n",
     "hash": "2e16283973203cb53df7e547b5add5a14949b946516ed3a3d1da3a86a21cc0f2",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setAntialiased",
     "parameters": [
      {
       "default": null,
       "name": "antialiased",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 108,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    }
   ],
   "name": "VectorLayer",
   "sourceCodeLine": 31,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX",
     "050000-XX",
     "050200-XX",
     "master"
    ]
   }
  },
  "View": {
   "description": "View represents one view on a document. A document can be\nshown in more than one view at a time.\n",
   "extend": "QObject",
   "fileName": "View.h",
   "methods": [
    {
     "accesType": "public",
     "description": "@return the window this view is shown in.\n",
     "hash": "cabdf4a667df5dc3614e1414501db46352130cdfc5fa3b8b7e6d7d8e618ba1ed",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "window",
     "parameters": [],
     "returned": "Window",
     "sourceCodeLine": 41,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the document this view is showing.\n",
     "hash": "d8b1e342f09c860c09963f0ae8199d248ceb90448ea1cf0f73c2c210544dad70",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "document",
     "parameters": [],
     "returned": "Document",
     "sourceCodeLine": 46,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return True if the current view is visible, False if not.\n",
     "hash": "b0f3c2c786ce6c3b0257f65f47a5f6acbd1b7dd3c90dcc5b5dbe834abd30e34d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "visible",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 56,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Make the current view visible.\n",
     "hash": "b803758798048d53de6a64f085cf60fdf5f840720d1deebcf1e36cb0bc46d4a9",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setVisible",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 61,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the canvas this view is showing. The canvas controls\nthings like zoom and rotation.\n",
     "hash": "57c1fa0eaf49a2fe6647427edbcff0d24b95132b4b77727366d00e2e032e784f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "canvas",
     "parameters": [],
     "returned": "Canvas",
     "sourceCodeLine": 67,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief activateResource activates the given resource.\n@param resource: a pattern, gradient or paintop preset\n",
     "hash": "b5a0dac7b3345f4954c5dbf3ac8647f6a3f5091cbc807cb3bd13a41a9734709b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "activateResource",
     "parameters": [
      {
       "default": null,
       "name": "resource",
       "type": "Resource"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 73,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief foreGroundColor allows access to the currently active color.\nThis is nominally per canvas/view, but in practice per mainwindow.\n@code\ncolor = Application.activeWindow().activeView().foreGroundColor()\ncomponents = color.components()\ncomponents[0] = 1.0\ncomponents[1] = 0.6\ncomponents[2] = 0.7\ncolor.setComponents(components)\nApplication.activeWindow().activeView().setForeGroundColor(color)\n@endcode\n",
     "hash": "c1346bfce827a5c16063423edb360681affe79f7bcc724c373f75e3332b0471d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "foreGroundColor",
     "parameters": [],
     "returned": "ManagedColor",
     "sourceCodeLine": 94,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "1dd89bcec5009fb97c1087cde06a8030b5fd3eca1ab333a5577e9de732e9ebc0",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setForeGroundColor",
     "parameters": [
      {
       "default": null,
       "name": "color",
       "type": "ManagedColor"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 94,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "6abd6922ed3efa86d29035bde281e9b2b45c6a02e0be7ca856171954d24ab905",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "backGroundColor",
     "parameters": [],
     "returned": "ManagedColor",
     "sourceCodeLine": 97,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "",
     "hash": "bc91567a10b8a8061a94f96a807f5b75b5f144cc9dce2574770e4df23351a301",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setBackGroundColor",
     "parameters": [
      {
       "default": null,
       "name": "color",
       "type": "ManagedColor"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 103,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief return the current selected preset\n\n@return the current preset (Resource type = 'preset')\n",
     "hash": "7c091015e7c825e09c99546c5b4e7fc7e756d61b62749596b7bfca565740e462",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "currentBrushPreset",
     "parameters": [],
     "returned": "Resource",
     "sourceCodeLine": 110,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief set the current selected preset\n\n@param resource the current preset to set (Resource type = 'preset')\n",
     "hash": "9555d8b313e842c440dbc02b6b10382ccb4ad64d58ae79a70c420403ab4ad818",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setCurrentBrushPreset",
     "parameters": [
      {
       "default": null,
       "name": "resource",
       "type": "Resource"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 117,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief return the current selected pattern\n\n@return the current pattern (Resource type = 'pattern')\n",
     "hash": "63bbbb10e6dd7ea05d24e154d0993f8efa5d3aac55810c21bdc338f624192bf5",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "currentPattern",
     "parameters": [],
     "returned": "Resource",
     "sourceCodeLine": 124,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief set the current selected pattern\n\n@param resource the current pattern to set (Resource type = 'pattern')\n",
     "hash": "ca37dc47e181de923e0989d505d840d316862a5da38b0b67d74e6097ceef2836",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setCurrentPattern",
     "parameters": [
      {
       "default": null,
       "name": "resource",
       "type": "Resource"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 131,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief return the current selected gradient\n\n@return the current gradient (Resource type = 'gradient')\n",
     "hash": "0c90f042db4ab8492c2e3330d4bfe23fcffb0ed5c83dc1ce52a175280b3b6e43",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "currentGradient",
     "parameters": [],
     "returned": "Resource",
     "sourceCodeLine": 138,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief set the current selected gradient\n\n@param resource the current gradient to set (Resource type = 'gradient')\n",
     "hash": "badc77657dd80415d00a67611eb3adca16a4477d1379924635f34c2d96a254c2",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setCurrentGradient",
     "parameters": [
      {
       "default": null,
       "name": "resource",
       "type": "Resource"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 145,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief return the current blending mode for brush\n\n@return the current blending mode identifier\n",
     "hash": "dd91d99083e5c1a8ac83324c3b4b4de0f704a81c1ecd916067c6cdf537e693d7",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "currentBlendingMode",
     "parameters": [],
     "returned": "str",
     "sourceCodeLine": 152,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief set the current blending mode for brush\n\n@param blendingMode the current belding mode identifier\n",
     "hash": "66e36d9b5606556b94ddde02552ee24b4f312877d1eaefb0068962145285e402",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setCurrentBlendingMode",
     "parameters": [
      {
       "default": null,
       "name": "blendingMode",
       "type": "str"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 159,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the current HDR Exposure value\n",
     "hash": "4b0ca40cd6a5bd3c41e49aaea177667a43ad8ca3cedee1d90967f5360e647dc6",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "HDRExposure",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 164,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief set the current HDR Exposure value\n\n@param exposure the HDR Exposure to set\n",
     "hash": "2e59e0f2031049870e9036ea8435db9dfafb3705a7d231f27b1f4707a37fe381",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setHDRExposure",
     "parameters": [
      {
       "default": null,
       "name": "exposure",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 171,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the current HDR Gamma value\n",
     "hash": "bb12bf1e2b9a40294294e6e1b2c7cdbc02fbc7d18bd6e35c23699dc9347084b3",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "HDRGamma",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 176,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief set the current HDR Gamma value\n\n@param exposure the HDR Gamma to set\n",
     "hash": "ed7d5b746eb7a4a29361ab029013138944d04ba82f240e7edd4f8f9ba91a968b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setHDRGamma",
     "parameters": [
      {
       "default": null,
       "name": "gamma",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 183,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief return the current opacity for brush\n\n@return the brush opacity value (0.00=fully transparent - 1.00=fully opaque)\n",
     "hash": "0a22859086b0ab4ef4ac208fc47ea6787ecf785de7c0ede6d4ece83cf1ba14b4",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "paintingOpacity",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 190,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief set the current opacity for brush\n\n@param opacity the opacity value (0.00=fully transparent - 1.00=fully opaque)\n",
     "hash": "fe6fd408786a22304ba55c8a93fc7ab03bccdc753f11b149939296125c69225a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setPaintingOpacity",
     "parameters": [
      {
       "default": null,
       "name": "opacity",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 197,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief return the current size for brush\n\n@return the brush size value (in pixels)\n",
     "hash": "86dec952a29c32dad1a09e6fe1a76472a34f1e746a1258ef812bb66d3f784938",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "brushSize",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 204,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief set the current size for brush\n\n@param brushSize the brush size (in pixels)\n",
     "hash": "5a1bfe6e15994e1bd9103f1253f5111228b132a4bd944a5080cd2806ed3d09d5",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setBrushSize",
     "parameters": [
      {
       "default": null,
       "name": "brushSize",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 211,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief return the current flow for brush\n\n@return the brush flow value\n",
     "hash": "726312c7bd8b0935daa6ca4d492fba8250dc5a5d1e0f82a4d69b788e14f37860",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "paintingFlow",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 232,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief set the current flow value for brush\n\n@param flow the brush flow\n",
     "hash": "0bcbf59d57a925614a225d4cd4f0239c247c98af8b895d65939b00ef9464be5a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setPaintingFlow",
     "parameters": [
      {
       "default": null,
       "name": "flow",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 239,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief selectedNodes returns a list of Nodes that are selected in this view.\n\n\n@code\nfrom krita import *\nw = Krita.instance().activeWindow()\nv = w.activeView()\nselected_nodes = v.selectedNodes()\nprint(selected_nodes)\n@endcode\n\n\n@return a list of Node objects which may be empty.\n",
     "hash": "d34b83c6ac3dea6018ff96de71e70c2ba39caa84e313809d2e5c317d1e26ea20",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "selectedNodes",
     "parameters": [],
     "returned": "list[Node]",
     "sourceCodeLine": 322,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief foregroundColor allows access to the currently active foreground color.\nThis is nominally per canvas/view, but in practice per mainwindow.\n\n@code\ncolor = Application.activeWindow().activeView().foregroundColor()\ncomponents = color.components()\ncomponents[0] = 1.0\ncomponents[1] = 0.6\ncomponents[2] = 0.7\ncolor.setComponents(components)\nApplication.activeWindow().activeView().setForeGroundColor(color)\n@endcode\n\n@return The current foreground color\n",
     "hash": "0a4640164f1c8c0c575f54095479080660712ee5ce8a419dbbb2b19892133274",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "foregroundColor",
     "parameters": [],
     "returned": "ManagedColor",
     "sourceCodeLine": 93,
     "tagRef": {
      "available": [
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040002-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief backgroundColor allows access to the currently active background color.\nThis is nominally per canvas/view, but in practice per mainwindow.\n\n@return The current background color\n",
     "hash": "9394c06d8225cca78b3feec61c1a3aa6570d03dca41349f4f255522b59ebccfa",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "backgroundColor",
     "parameters": [],
     "returned": "ManagedColor",
     "sourceCodeLine": 102,
     "tagRef": {
      "available": [
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040002-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Reset the view to show @p document.\n",
     "hash": "c5e7738856152968870e8800334d4762570527a180e979873ade274e0a578497",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setDocument",
     "parameters": [
      {
       "default": null,
       "name": "document",
       "type": "Document"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 51,
     "tagRef": {
      "available": [
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040300-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief showFloatingMessage displays a floating message box on the top-left corner of the canvas\n@param message: Message to be displayed inside the floating message box\n@param icon: Icon to be displayed inside the message box next to the message string\n@param timeout: Milliseconds until the message box disappears\n@param priority: 0 = High, 1 = Medium, 2 = Low. Higher priority\nmessages will be displayed in place of lower priority messages\n",
     "hash": "3830a661411e479fcc6392bf94e301d25eb2aa839b204301831d6d9aede9bc3b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "showFloatingMessage",
     "parameters": [
      {
       "default": null,
       "name": "message",
       "type": "str"
      },
      {
       "default": null,
       "name": "icon",
       "type": "QIcon"
      },
      {
       "default": null,
       "name": "timeout",
       "type": "int"
      },
      {
       "default": null,
       "name": "priority",
       "type": "int"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 305,
     "tagRef": {
      "available": [
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040400-XX",
       "050000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief flakeToDocumentTransform\nThe transformation of the document relative to the view without rotation and mirroring\n@return QTransform\n",
     "hash": "400379ad94dd57afe7e4be026b974ffb0772e6fddc61a546ab266693889e1f1b",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "flakeToDocumentTransform",
     "parameters": [],
     "returned": "QTransform",
     "sourceCodeLine": 329,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief flakeToCanvasTransform\nThe transformation of the canvas relative to the view without rotation and mirroring\n@return QTransform\n",
     "hash": "c7f8e25874e7808ae6185bc3a49cb6455eb2fd06fd56366bd5e6fc2a866d80d1",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "flakeToCanvasTransform",
     "parameters": [],
     "returned": "QTransform",
     "sourceCodeLine": 336,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief flakeToImageTransform\nThe transformation of the image relative to the view without rotation and mirroring\n@return QTransform\n",
     "hash": "355e3d0eaf56e1276ec0980578383d5c9716efd7c6075b12daf20ae0e70ec93a",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "flakeToImageTransform",
     "parameters": [],
     "returned": "QTransform",
     "sourceCodeLine": 343,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief return the current rotation for brush tip\n\n@return the brush tip rotation value (in degrees)\n",
     "hash": "fc5f98ccb8514a12a165bfeb5e9f2edf0ac1faf8aaa0c0b93f28ddc4e6568bcc",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "brushRotation",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 218,
     "tagRef": {
      "available": [
       "050202-XX",
       "050203-XX",
       "master"
      ],
      "updated": [
       "050202-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief set the current rotation for brush tip\n\n@param brushRotation the brush tip rotation (in degrees)\n",
     "hash": "6e574be3c25a4193ffdc773f21ed4065030f3ecf80c891a72ae15278686048cb",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setBrushRotation",
     "parameters": [
      {
       "default": null,
       "name": "brushRotation",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 225,
     "tagRef": {
      "available": [
       "050202-XX",
       "050203-XX",
       "master"
      ],
      "updated": [
       "050202-XX",
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief return the current pattern size for brush\n\n@return the brush pattern size value\n",
     "hash": "11fffc699c0e7a753ab675e52df3f7206107e17631cccdf43ef890ed17cb6a67",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "patternSize",
     "parameters": [],
     "returned": "float",
     "sourceCodeLine": 246,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief set the current pattern size value for brush\n\n@param flow the brush pattern size\n",
     "hash": "b1b97b505754f27c3b91874a600b4dfaea68f49150f00a9de69a9e1b4687199e",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setPatternSize",
     "parameters": [
      {
       "default": null,
       "name": "size",
       "type": "float"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 253,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief return current eraser mode status (active/inactive)\n\n@return True if eraser mode is active, otherwise False\n",
     "hash": "c3ab07b2e734367ea0d2088a2da4ae5a8e5e4dc76c5e1ed0b0379e054738b3b5",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "eraserMode",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 260,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief set current eraser active/inactive\n\n@param value Set to True to activate eraser mode, False to deactivate\n",
     "hash": "8971e0ab83613cb98206f332431f0c5e6441d7e81655a8b147d0f75950199d02",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setEraserMode",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 267,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief return current global alpha lock mode (active/inactive)\n\n@return True if is active, otherwise False\n",
     "hash": "b714ec550eabb8983ae7cbfbdb9f0aa1c0a8832550b1aecd4036d252009a3ee6",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "globalAlphaLock",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 274,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief set current global alpha lock mode active/inactive\n\n@param value Set to True to lock global alpha mode, False to unlock\n",
     "hash": "11815b802a220d873289e9cadc375ee821882059bc07724cd6fe93d0a65837e0",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setGlobalAlphaLock",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 281,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief return current disabled pressure status\n\n@return True if is pressure is disabled, otherwise False\n",
     "hash": "b2d6945e7d5b99cc72e779e632d0783777d10d2bb3c458b4998b693ac8a60bc8",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "disablePressure",
     "parameters": [],
     "returned": "bool",
     "sourceCodeLine": 288,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief set current disabled pressure status\n\n@param value Set to True to disable pressure, False to enabled pressure\n",
     "hash": "b6ec386ece0210bd7f11ae8175ffbe77e1302dd796921eee1d64d2874d48ca4f",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "setDisablePressure",
     "parameters": [
      {
       "default": null,
       "name": "value",
       "type": "bool"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 295,
     "tagRef": {
      "available": [
       "master"
      ],
      "updated": [
       "master"
      ]
     }
    }
   ],
   "name": "View",
   "sourceCodeLine": 24,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX",
     "040002-XX",
     "040300-XX",
     "040400-XX",
     "050200-XX",
     "050202-XX",
     "master"
    ]
   }
  },
  "Window": {
   "description": "Window represents one Krita mainwindow. A window can have any number\nof views open on any number of documents.\n",
   "extend": "QObject",
   "fileName": "Window.h",
   "methods": [
    {
     "accesType": "public",
     "description": "Return a handle to the QMainWindow widget. This is useful\nto e.g. parent dialog boxes and message box.\n",
     "hash": "c81cad3dec942c6db15b69238f35668577ca57e440b9634da8286d600d81afe9",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "qwindow",
     "parameters": [],
     "returned": "QMainWindow",
     "sourceCodeLine": 39,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return a list of open views in this window\n",
     "hash": "a4b45fec121267408aac46f00eec771d4e894e633f90dd0df3842468e40a66ab",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "views",
     "parameters": [],
     "returned": "list[View]",
     "sourceCodeLine": 50,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Open a new view on the given document in this window\n",
     "hash": "9c95b0220d5242669d043d7c7a97184b5efe80eb140946cf69503561a4cca42d",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "addView",
     "parameters": [
      {
       "default": null,
       "name": "document",
       "type": "Document"
      }
     ],
     "returned": "View",
     "sourceCodeLine": 55,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Make the given view active in this window. If the view\ndoes not belong to this window, nothing happens.\n",
     "hash": "18e52bcdefcaaff6aed61d47f801a10cb9963a19c28fcdd9b455a328c39e7d84",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "showView",
     "parameters": [
      {
       "default": null,
       "name": "view",
       "type": "View"
      }
     ],
     "returned": "void",
     "sourceCodeLine": 61,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@return the currently active view or 0 if no view is active\n",
     "hash": "011ddce7c9341d5d850ec51fe1a01c66ec97113e0106055f0190889a3876a0a0",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "activeView",
     "parameters": [],
     "returned": "View",
     "sourceCodeLine": 67,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief activate activates this Window.\n",
     "hash": "b621a0404c775a7a4272857e1438e270f39c19ffbed71f02de3dc4a755cfcf31",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "activate",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 72,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief close the active window and all its Views. If there\nare no Views left for a given Document, that Document will\nalso be closed.\n",
     "hash": "54c539804119f4d2e33715bb589106eba8acc3df8a09b92317ebb9791389f1cd",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "close",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 79,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief createAction creates a QAction object and adds it to the action\nmanager for this Window.\n@param id The unique id for the action. This will be used to\n    propertize the action if any .action file is present\n@param text The user-visible text of the action. If empty, the text from the\n   .action file is used.\n@param menuLocation a /-separated string that describes which menu the action should\n    be places in. Default is \"tools/scripts\"\n@return the new action.\n",
     "hash": "d876dc8eddf17c3799a440b5d269c9ce6381046c4247595890dc127fc63aebb6",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "createAction",
     "parameters": [
      {
       "default": null,
       "name": "id",
       "type": "str"
      },
      {
       "default": "\"\"",
       "name": "text",
       "type": "str"
      },
      {
       "default": "\"tools/scripts\"",
       "name": "menuLocation",
       "type": "str"
      }
     ],
     "returned": "QAction",
     "sourceCodeLine": 92,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX",
       "040200-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Emitted when the window is closed.",
     "hash": "6f8791029a9eab51cc398eb5bd53b3fa9703a586c8b19ad10cafd41d444bdacc",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "windowClosed",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 96,
     "tagRef": {
      "available": [
       "040000-XX",
       "040001-XX",
       "040002-XX",
       "040003-XX",
       "040004-XX",
       "040100-XX",
       "040101-XX",
       "040102-XX",
       "040103-XX",
       "040104-XX",
       "040105-XX",
       "040106-XX",
       "040107-XX",
       "040108-XX",
       "040200-XX",
       "040201-XX",
       "040202-XX",
       "040203-XX",
       "040204-XX",
       "040205-XX",
       "040206-XX",
       "040207-XX",
       "040208-XX",
       "040209-XX",
       "040300-XX",
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040000-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": " Emitted when we change the color theme",
     "hash": "77b491f4ad4a919b3b1568664fbb0152a4974bfeed702b207ec3bde2fd75c2cd",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "themeChanged",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 99,
     "tagRef": {
      "available": [
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040400-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "Emitted when the active view changes",
     "hash": "7c394f82421d7b0961eebc94dd7f08a0b5058625fa5408e25ea383bfb79636e2",
     "isSignal": true,
     "isStatic": false,
     "isVirtual": false,
     "name": "activeViewChanged",
     "parameters": [],
     "returned": "void",
     "sourceCodeLine": 102,
     "tagRef": {
      "available": [
       "040400-XX",
       "040401-XX",
       "040402-XX",
       "040403-XX",
       "040404-XX",
       "040405-XX",
       "040406-XX",
       "040407-XX",
       "040408-XX",
       "050000-XX",
       "050001-XX",
       "050002-XX",
       "050005-XX",
       "050006-XX",
       "050008-XX",
       "050100-XX",
       "050101-XX",
       "050102-XX",
       "050103-XX",
       "050104-XX",
       "050105-XX",
       "050106-XX",
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "040400-XX"
      ]
     }
    },
    {
     "accesType": "public",
     "description": "@brief dockers\n@return a list of all the dockers belonging to this window\n",
     "hash": "3b0834fdbba4f55e7b1a424441408122dc5e62f82d7169ccc3ecf6ef16c9d3b0",
     "isSignal": false,
     "isStatic": false,
     "isVirtual": false,
     "name": "dockers",
     "parameters": [],
     "returned": "list[QDockWidget]",
     "sourceCodeLine": 45,
     "tagRef": {
      "available": [
       "050200-XX",
       "050201-XX",
       "050202-XX",
       "050203-XX",
       "050300-PREALPHA",
       "master"
      ],
      "updated": [
       "050200-XX"
      ]
     }
    }
   ],
   "name": "Window",
   "sourceCodeLine": 22,
   "tagRef": {
    "available": [
     "040000-XX"
    ],
    "updated": [
     "040000-XX",
     "040400-XX",
     "050200-XX"
    ]
   }
  }
 },
 "tags": {
  "040000-PREALPHA": {
   "date": "2017-06-14",
   "hash": "d6c2ce3d4f540817706fac8e0c5d82d6b4f79d5d",
   "processed": false,
   "tag": "4.0.0-prealpha"
  },
  "040000-XX": {
   "date": "2018-03-20",
   "hash": "b7077f19412390baf46d0ecd0b46d95fb5ed3ea9",
   "processed": true,
   "tag": "v4.0.0"
  },
  "040001-XX": {
   "date": "2018-04-10",
   "hash": "cfce346710488195dd74968509560070362e1321",
   "processed": true,
   "tag": "v4.0.1"
  },
  "040002-XX": {
   "date": "2018-05-07",
   "hash": "78f059ec58957baf59225d5c1328c569d8d62ad8",
   "processed": true,
   "tag": "v4.0.2"
  },
  "040003-XX": {
   "date": "2018-05-12",
   "hash": "d9cab1033fccc56e914deb9b0867ad19abdf7a41",
   "processed": true,
   "tag": "v4.0.3"
  },
  "040004-XX": {
   "date": "2018-06-13",
   "hash": "05c5793d92f2775427c255f6a464848803d8e3a8",
   "processed": true,
   "tag": "v4.0.4"
  },
  "040100-XX": {
   "date": "2018-06-26",
   "hash": "149ae8fedac615ccb29eb49c8bba1db22eb3eacd",
   "processed": true,
   "tag": "v4.1.0"
  },
  "040101-XX": {
   "date": "2018-07-16",
   "hash": "1bbc794b78cf6196995e5bc9bdb3b3bc6ba55ee0",
   "processed": true,
   "tag": "v4.1.1"
  },
  "040102-XX": {
   "date": "2018-09-25",
   "hash": "f0a31b402c6ca803e7379e47ac1fea4f51b9305c",
   "processed": true,
   "tag": "v4.1.2"
  },
  "040103-XX": {
   "date": "2018-09-26",
   "hash": "9eb5e0f9d45736e692b620d1d9187a9ddfb62b16",
   "processed": true,
   "tag": "v4.1.3"
  },
  "040104-XX": {
   "date": "2018-10-11",
   "hash": "afa2911da1b8dc2bdd8e2d8c88f32cf15bb355b1",
   "processed": true,
   "tag": "v4.1.4"
  },
  "040105-XX": {
   "date": "2018-10-11",
   "hash": "4d91a719220c2505ff3c0988585fd3e23984052e",
   "processed": true,
   "tag": "v4.1.5"
  },
  "040106-XX": {
   "date": "2018-12-11",
   "hash": "57afda7b4f02dbab491f0398c0ff903762b1f5bc",
   "processed": true,
   "tag": "v4.1.6"
  },
  "040107-XX": {
   "date": "2018-12-12",
   "hash": "b1e578fabd67547f4b0354a897d8cd1003605a33",
   "processed": true,
   "tag": "v4.1.7"
  },
  "040108-XX": {
   "date": "2019-03-06",
   "hash": "43d0d8a0ec8234c4cefe016bfa2523a82cb167e3",
   "processed": true,
   "tag": "v4.1.8"
  },
  "040200-BETA2": {
   "date": "2019-05-15",
   "hash": "36f4beca59919159b689e51ca204e3792de6b8c5",
   "processed": false,
   "tag": "v4.2.0-beta2"
  },
  "040200-PREALPHA": {
   "date": "2018-10-29",
   "hash": "cb409b848c2029f0dbb3dbe06a92bfd865c82f98",
   "processed": false,
   "tag": "v4.2.0-prealpha"
  },
  "040200-XX": {
   "date": "2019-05-27",
   "hash": "b47883a4e011d192aee70b04a5754416974c0c6a",
   "processed": true,
   "tag": "v4.2.0"
  },
  "040201-XX": {
   "date": "2019-06-04",
   "hash": "0e93dfe6f9d18796c123ff7823880cb612612ace",
   "processed": true,
   "tag": "v4.2.1"
  },
  "040202-XX": {
   "date": "2019-06-24",
   "hash": "aabd9a0f19c7a58c4e5905ffe221e19ca95ad6c3",
   "processed": true,
   "tag": "v4.2.2"
  },
  "040203-XX": {
   "date": "2019-07-12",
   "hash": "bec661be49ab3bd16119fa8aa6edf56d3e1a767f",
   "processed": true,
   "tag": "v4.2.3"
  },
  "040204-XX": {
   "date": "2019-07-30",
   "hash": "0ed2c36481b2912bfbf8a8e0f1d0b1d4f16bed88",
   "processed": true,
   "tag": "v4.2.4"
  },
  "040205-XX": {
   "date": "2019-08-02",
   "hash": "74001788f0649cc76d4a25df12d2b175f4634e0c",
   "processed": true,
   "tag": "v4.2.5"
  },
  "040206-BETA1": {
   "date": "2019-08-30",
   "hash": "9c9f3bfe2eafcf2ed32c59826a072290d452cffc",
   "processed": false,
   "tag": "v4.2.6-beta1"
  },
  "040206-XX": {
   "date": "2019-09-10",
   "hash": "e09f93facf50c84ffcc4ac3a7b092a05e4d5f2ea",
   "processed": true,
   "tag": "v4.2.6"
  },
  "040207-BETA1": {
   "date": "2019-09-25",
   "hash": "c2e08943c706d172322ea15e99e20d7280a4a0aa",
   "processed": false,
   "tag": "v4.2.7-beta1"
  },
  "040207-XX": {
   "date": "2019-09-30",
   "hash": "35c5e92cac1452292035a66b8a49494888ad2a54",
   "processed": true,
   "tag": "v4.2.7"
  },
  "040208-BETA1": {
   "date": "2019-11-19",
   "hash": "72106e8e6db17327365a4b8510056c67e93f7307",
   "processed": false,
   "tag": "v4.2.8-beta1"
  },
  "040208-XX": {
   "date": "2019-11-25",
   "hash": "2c263cbb343731e14882a4aa9690805add665899",
   "processed": true,
   "tag": "v4.2.8"
  },
  "040209-BETA1": {
   "date": "2020-03-03",
   "hash": "d1d73fd06363e3b3784ead2f72b735ba920a7b97",
   "processed": false,
   "tag": "v4.2.9-beta1"
  },
  "040209-XX": {
   "date": "2020-03-23",
   "hash": "a09161384b3b443dd1b28d2aff85d782e48710be",
   "processed": true,
   "tag": "v4.2.9"
  },
  "040300-BETA1": {
   "date": "2020-05-03",
   "hash": "bf7b6e6048a12d4ba2b404f7f83ed32dad4aca8f",
   "processed": false,
   "tag": "v4.3.0-beta1"
  },
  "040300-BETA2": {
   "date": "2020-05-25",
   "hash": "e0d1b2daa26987dbc55478864a7d783565c3edde",
   "processed": false,
   "tag": "v4.3.0-beta2"
  },
  "040300-PREALPHA": {
   "date": "2019-07-12",
   "hash": "d50afe4443f0dbf0ff48e35a98e06a7a947ac69f",
   "processed": false,
   "tag": "v4.3.0-prealpha"
  },
  "040300-XX": {
   "date": "2020-06-16",
   "hash": "e191a4d2118b8b317a6261c0eef9c43dc941f280",
   "processed": true,
   "tag": "v4.3.0"
  },
  "040400-BETA1": {
   "date": "2020-09-21",
   "hash": "aac84929f223b7376c8f20a8bc481bdcbd8a3436",
   "processed": false,
   "tag": "v4.4.0-beta1"
  },
  "040400-BETA2": {
   "date": "2020-09-28",
   "hash": "60fbefd13ad18be03a34fba4402377a73557686f",
   "processed": false,
   "tag": "v4.4.0-beta2"
  },
  "040400-XX": {
   "date": "2020-10-12",
   "hash": "c89dc6a5bf082c794985f67240ab072c9b2de905",
   "processed": true,
   "tag": "v4.4.0"
  },
  "040401-XX": {
   "date": "2020-10-28",
   "hash": "538004c9eb80fe8905096b3b300e47d5c59b7eac",
   "processed": true,
   "tag": "v4.4.1"
  },
  "040402-BETA1": {
   "date": "2020-12-01",
   "hash": "01e80c6754cf4705cf463fc65dbe460c158a7bbd",
   "processed": false,
   "tag": "v4.4.2-beta1"
  },
  "040402-BETA2": {
   "date": "2020-12-24",
   "hash": "52385f68598f98b95330e4e70643fc881be46153",
   "processed": false,
   "tag": "v4.4.2-beta2"
  },
  "040402-XX": {
   "date": "2021-01-19",
   "hash": "baa9e4fc5cb1b72809126a9a2ee31bdaf1cdd624",
   "processed": true,
   "tag": "v4.4.2"
  },
  "040403-BETA1": {
   "date": "2021-02-23",
   "hash": "ac1b003dcff2793df9bf8cc7a7dbc185f8af7d9a",
   "processed": false,
   "tag": "v4.4.3-beta1"
  },
  "040403-BETA2": {
   "date": "2021-03-10",
   "hash": "503af68c899088f84ce833258654617874a45060",
   "processed": false,
   "tag": "v4.4.3-beta2"
  },
  "040403-XX": {
   "date": "2021-03-22",
   "hash": "6493cdcb1e34c29903800cd21890ad76913e27ad",
   "processed": true,
   "tag": "v4.4.3"
  },
  "040404-XX": {
   "date": "2021-04-22",
   "hash": "b4a76fd3eb2b88b23a229552be9a0cd5ca3acb9c",
   "processed": true,
   "tag": "v4.4.4"
  },
  "040405-XX": {
   "date": "2021-06-08",
   "hash": "5b0854dcf5a100da1b5950fab98dc9c5367f0fbc",
   "processed": true,
   "tag": "v4.4.5"
  },
  "040406-XX": {
   "date": "2021-06-09",
   "hash": "e17e404a7a25dc6f27ac5129393f0ccd7efbaf68",
   "processed": true,
   "tag": "v4.4.6"
  },
  "040407-XX": {
   "date": "2021-08-03",
   "hash": "5c9d84c1d216c1e127676844bb6901b2582c2237",
   "processed": true,
   "tag": "v4.4.7"
  },
  "040408-XX": {
   "date": "2021-08-24",
   "hash": "3be8d646ac24cde400e737a0e2be864a427dbf4f",
   "processed": true,
   "tag": "v4.4.8"
  },
  "050000-BETA1": {
   "date": "2021-08-18",
   "hash": "dfc796c7e35678d1631c8ea07865a1f01b6994a5",
   "processed": false,
   "tag": "v5.0.0-beta1"
  },
  "050000-BETA2": {
   "date": "2021-10-06",
   "hash": "e63abd5dfb8963439d4ab5856550486a90a9401a",
   "processed": false,
   "tag": "v5.0.0-beta2"
  },
  "050000-BETA3": {
   "date": "2021-11-30",
   "hash": "ac11c4c9638bf31110deb29c433945a90ffdcdf0",
   "processed": false,
   "tag": "v5.0.0-beta3"
  },
  "050000-BETA4": {
   "date": "2021-12-03",
   "hash": "b5df280201bfbac13b1d842b770bc9bfc91f2e86",
   "processed": false,
   "tag": "v5.0.0-beta4"
  },
  "050000-BETA5": {
   "date": "2021-12-03",
   "hash": "df07f245bb5c661069da092ffe0bb3e94fc33e0c",
   "processed": false,
   "tag": "v5.0.0-beta5"
  },
  "050000-XX": {
   "date": "2021-12-20",
   "hash": "f932d58a21157599e545e1e810f65e8af5c6cbdd",
   "processed": true,
   "tag": "v5.0.0"
  },
  "050001-XX": {
   "date": "2021-12-22",
   "hash": "9fab13c2f088af347a9dd021b1814f0231469825",
   "processed": true,
   "tag": "v5.0.1"
  },
  "050002-XX": {
   "date": "2022-01-06",
   "hash": "b1c4eb99ea5c18135863c6837c0d1c75283ae665",
   "processed": true,
   "tag": "v5.0.2"
  },
  "050005-XX": {
   "date": "2022-04-12",
   "hash": "b325fb25cbd089c7b7f68cbb64d7cdecbd0c8618",
   "processed": true,
   "tag": "v5.0.5"
  },
  "050006-XX": {
   "date": "2022-04-27",
   "hash": "d96805e939b6c5e99ba768a554c5db4c372027b6",
   "processed": true,
   "tag": "v5.0.6"
  },
  "050008-XX": {
   "date": "2022-05-25",
   "hash": "0e86b574e6a7daee84406a7bef53f2e88d563985",
   "processed": true,
   "tag": "v5.0.8"
  },
  "050100-BETA1": {
   "date": "2022-06-22",
   "hash": "70fb97d69309b46023579fc4e35255028aa22fc4",
   "processed": false,
   "tag": "v5.1.0-beta1"
  },
  "050100-BETA2": {
   "date": "2022-07-14",
   "hash": "1a3d2f1e6b19dea7edaae3f94ba762d32d203747",
   "processed": false,
   "tag": "v5.1.0-beta2"
  },
  "050100-PREALPHA": {
   "date": "2021-12-04",
   "hash": "fec0a715b35b06795fecf1f469917980451569f7",
   "processed": false,
   "tag": "v5.1.0-prealpha"
  },
  "050100-RC1": {
   "date": "2022-08-03",
   "hash": "fce0eb89bd3518a95ad30316537076f9e8b19796",
   "processed": false,
   "tag": "v5.1.0-RC1"
  },
  "050100-XX": {
   "date": "2022-08-17",
   "hash": "f5b8fe4c819d1a6030ee729c71bbca2a4a548f0a",
   "processed": true,
   "tag": "v5.1.0"
  },
  "050101-XX": {
   "date": "2022-09-13",
   "hash": "e3c190f802147390e28911bae8ac45493b3d89d3",
   "processed": true,
   "tag": "v5.1.1"
  },
  "050102-XX": {
   "date": "2022-11-05",
   "hash": "d28733cf206669960744691cc785e496d5db7230",
   "processed": true,
   "tag": "5.1.2"
  },
  "050103-XX": {
   "date": "2022-11-06",
   "hash": "65908de10b65dced61f115ab1538b3b11eb24048",
   "processed": true,
   "tag": "5.1.3"
  },
  "050104-XX": {
   "date": "2022-12-14",
   "hash": "fee3fde6721db500b67e87707e1510ab484b70cf",
   "processed": true,
   "tag": "5.1.4"
  },
  "050105-XX": {
   "date": "2023-01-05",
   "hash": "4e90f081c276d4ad2a56090a8024a5a54bedd4bd",
   "processed": true,
   "tag": "5.1.5"
  },
  "050106-XX": {
   "date": "2023-05-26",
   "hash": "6a72b3503238bdfbc72f903b41cc2c97064da469",
   "processed": true,
   "tag": "5.1.6"
  },
  "050200-BETA1": {
   "date": "2023-07-27",
   "hash": "4a684784f5835c09d2c303e7841ac2cdb98767ef",
   "processed": false,
   "tag": "5.2.0-beta1"
  },
  "050200-BETA2": {
   "date": "2023-08-16",
   "hash": "68570f7aeb386e24b44e706030e183f3eaf7f81d",
   "processed": false,
   "tag": "v5.2.0-beta2"
  },
  "050200-PREALPHA": {
   "date": "2022-06-07",
   "hash": "c86ebe1d1fcb41a71831db7d66a2668545123a0b",
   "processed": false,
   "tag": "v5.2.0-prealpha"
  },
  "050200-RC1": {
   "date": "2023-09-14",
   "hash": "bb27d8f0f4a16e84b27f6b1a1041abe5e61afcaf",
   "processed": false,
   "tag": "v5.2.0-rc1"
  },
  "050200-XX": {
   "date": "2023-10-13",
   "hash": "1d16de46b01426233324dc2eb6775f081b4a8ddd",
   "processed": true,
   "tag": "v5.2.0"
  },
  "050201-XX": {
   "date": "2023-11-01",
   "hash": "268eedaaa10e04d16cb35c52efb0fe2e96e40885",
   "processed": true,
   "tag": "5.2.1"
  },
  "050202-XX": {
   "date": "2023-12-06",
   "hash": "eaedb5e42f7b0c4764419c1bcc2f10611802373e",
   "processed": true,
   "tag": "v5.2.2"
  },
  "050203-BETA1": {
   "date": "2024-05-28",
   "hash": "5f12130b775485930dc2803679b32288568f8b49",
   "processed": false,
   "tag": "v5.2.3-beta1"
  },
  "050203-XX": {
   "date": "2024-06-21",
   "hash": "efb51220d9de5c30de75e77e7ae38e0a26106a2a",
   "processed": true,
   "tag": "v5.2.3"
  },
  "050300-PREALPHA": {
   "date": "2023-08-08",
   "hash": "a9faa2ef6785d9cb34b5803df6c7582885d512d5",
   "processed": true,
   "tag": "v5.3.0-prealpha"
  },
  "master": {
   "date": "2024-07-20",
   "hash": "72ff212477e3b3b97b4f68296c23179e6d7dc56d",
   "processed": true,
   "tag": "master"
  }
 }
}